cscope 15 $HOME/os/assignment6/guestos/src               0000299027
	@bpred.c

20 
	~<m2s.h
>

22 
	#BTB_ENTRY
(
SET
, 
WAY
Ë(&
b¥ed
->
btb
[(SETË* 
b¥ed_btb_assoc
 + (WAY)])

	)

25 
	sbtb_íåy_t
 {

26 
uöt32_t
 
	msour˚
;

27 
uöt32_t
 
	mèrgë
;

28 
	mcou¡î
;

33 
	sb¥ed_t
 {

36 
uöt32_t
 *
	møs
;

37 
	møs_idx
;

41 
btb_íåy_t
 *
	mbtb
;

46 *
	mbimod
;

50 
uöt32_t
 *
	mtwﬁevñ_bht
;

51 *
	mtwﬁevñ_pht
;

56 *
	mchoi˚
;

59 
	m«me
[20];

60 
uöt64_t
 
	mac˚s£s
;

61 
uöt64_t
 
	mhôs
;

66 
	eb¥ed_köd_íum
 {

67 
	mb¥ed_köd_≥r„˘
 = 0,

68 
	mb¥ed_köd_èkí
,

69 
	mb¥ed_köd_nŸèkí
,

70 
	mb¥ed_köd_bimod
,

71 
	mb¥ed_köd_twﬁevñ
,

72 
	mb¥ed_köd_comb


73 } 
	gb¥ed_köd
 = 
b¥ed_köd_twﬁevñ
;

76 *
	gb¥ed_btb
 = "256:4";

77 
uöt32_t
 
	gb¥ed_btb_£ts
;

78 
uöt32_t
 
	gb¥ed_btb_assoc
;

79 
uöt32_t
 
	gb¥ed_bimod_size
 = 1024;

80 
uöt32_t
 
	gb¥ed_choi˚_size
 = 1024;

81 
uöt32_t
 
	gb¥ed_øs_size
 = 32;

83 
uöt32_t
 
	gb¥ed_twﬁevñ_∑øm
[3] = {1, 1024, 8};

84 
uöt32_t
 
	gb¥ed_hi°_size
;

85 
uöt32_t
 
	gb¥ed_Àvñ1_size
;

86 
uöt32_t
 
	gb¥ed_Àvñ2_size
;

87 
uöt32_t
 
	gb¥ed_Àvñ2_height
;

90 
	$b¥ed_ªg_›ti⁄s
()

92 *
b¥ed_köd_m≠
[] = { "perfect", "taken", "nottaken", "bimod", "twolevel", "comb" };

93 
	`›t_ªg_íum
("-bpred", "BranchÖredictor kind {perfect|taken|nottaken|bimod|twolevel|comb}",

94 (*Ë&
b¥ed_köd
, 
b¥ed_köd_m≠
, 6);

95 
	`›t_ªg_°rög
("-b¥ed:btb", "BTB c⁄figuøti⁄ (<£ts>:<assoc>)", &
b¥ed_btb
);

96 
	`›t_ªg_uöt32
("-b¥ed:øs", "Rëu∫áddªs†°ack size", &
b¥ed_øs_size
);

97 
	`›t_ªg_uöt32
("-b¥ed:bimod", "Numbî o‡íåõ†f‹ bimodÆÖªdi˘‹", &
b¥ed_bimod_size
);

98 
	`›t_ªg_uöt32_li°
("-bpred:twolevel", "Two-leveládaptive (<l1size> <l2size> <hist_size>)",

99 
b¥ed_twﬁevñ_∑øm
, 3, 
NULL
);

100 
	`›t_ªg_uöt32
("-b¥ed:choi˚", "Numbî o‡íåõ†f‹ choi˚Öªdi˘‹", &
b¥ed_choi˚_size
);

101 
	}
}

104 
	$b¥ed_öô
()

106 
c‹e
, 
thªad
;

109 
b¥ed_hi°_size
 = 
b¥ed_twﬁevñ_∑øm
[2];

110 
b¥ed_Àvñ1_size
 = 
b¥ed_twﬁevñ_∑øm
[0];

111 
b¥ed_Àvñ2_size
 = 
b¥ed_twﬁevñ_∑øm
[1];

112 
b¥ed_Àvñ2_height
 = 1 << 
b¥ed_hi°_size
;

115 i‡(
b¥ed_bimod_size
 & (bpred_bimod_size - 1))

116 
	`Áèl
("bpred:bimod must beÖower of 2");

117 i‡(
b¥ed_choi˚_size
 & (bpred_choice_size - 1))

118 
	`Áèl
("bpred:choice must beÖower of 2");

119 i‡(
	`ssˇnf
(
b¥ed_btb
, "%d:%d", &
b¥ed_btb_£ts
, &
b¥ed_btb_assoc
) != 2)

120 
	`Áèl
("invalid bpred:btb format");

121 i‡(
b¥ed_btb_£ts
 & (bpred_btb_sets - 1))

122 
	`Áèl
("number of btb sets must beÖower of 2");

123 i‡(
b¥ed_btb_assoc
 & (bpred_btb_assoc - 1))

124 
	`Áèl
("btbássociativity must beÖower of 2");

126 i‡(
b¥ed_hi°_size
 < 1 || bpred_hist_size > 30)

127 
	`Áèl
("predictor history size must be >=1ánd <=30");

128 i‡(
b¥ed_Àvñ1_size
 & (bpred_level1_size - 1))

129 
	`Áèl
("two-levelÖredictor sizes must beÖower of 2");

130 i‡(
b¥ed_Àvñ2_size
 & (bpred_level2_size - 1))

131 
	`Áèl
("two-levelÖredictor sizes must beÖower of 2");

134 
FOREACH_CORE
 
FOREACH_THREAD
 {

135 
THREAD
.
b¥ed
 = 
	`b¥ed_¸óã
();

136 
	`•rötf
(
THREAD
.
b¥ed
->
«me
, "c%dt%d.b¥ed", 
c‹e
, 
thªad
);

138 
	}
}

141 
	$b¥ed_d⁄e
()

143 
c‹e
, 
thªad
;

144 
FOREACH_CORE
 
FOREACH_THREAD


145 
	`b¥ed_‰ì
(
THREAD
.
b¥ed
);

146 
	}
}

149 
b¥ed_t
 *
	$b¥ed_¸óã
()

151 
b¥ed_t
 *
b¥ed
;

152 
i
, 
j
;

155 
b¥ed
 = 
	`ˇŒoc
(1, (
b¥ed_t
));

156 
	`°r˝y
(
b¥ed
->
«me
, "bpred");

157 
b¥ed
->
øs
 = 
	`ˇŒoc
(
b¥ed_øs_size
, (
uöt32_t
));

160 i‡(
b¥ed_köd
 =
b¥ed_köd_bimod
 || b¥ed_köd =
b¥ed_köd_comb
) {

161 
b¥ed
->
bimod
 = 
	`ˇŒoc
(
b¥ed_bimod_size
, ());

162 
i
 = 0; i < 
b¥ed_bimod_size
; i++)

163 
b¥ed
->
bimod
[
i
] = 2;

167 i‡(
b¥ed_köd
 =
b¥ed_köd_twﬁevñ
 || b¥ed_köd =
b¥ed_köd_comb
) {

168 
b¥ed
->
twﬁevñ_bht
 = 
	`ˇŒoc
(
b¥ed_Àvñ1_size
, (
uöt32_t
));

169 
b¥ed
->
twﬁevñ_pht
 = 
	`ˇŒoc
(
b¥ed_Àvñ2_size
 * 
b¥ed_Àvñ2_height
, ());

170 
i
 = 0; i < 
b¥ed_Àvñ2_size
 * 
b¥ed_Àvñ2_height
; i++)

171 
b¥ed
->
twﬁevñ_pht
[
i
] = 2;

175 i‡(
b¥ed_köd
 =
b¥ed_köd_comb
) {

176 
b¥ed
->
choi˚
 = 
	`ˇŒoc
(
b¥ed_choi˚_size
, ());

177 
i
 = 0; i < 
b¥ed_choi˚_size
; i++)

178 
b¥ed
->
choi˚
[
i
] = 2;

182 
b¥ed
->
btb
 = 
	`ˇŒoc
(
b¥ed_btb_£ts
 * 
b¥ed_btb_assoc
, (
btb_íåy_t
));

183 
i
 = 0; i < 
b¥ed_btb_£ts
; i++)

184 
j
 = 0; j < 
b¥ed_btb_assoc
; j++)

185 
	`BTB_ENTRY
(
i
, 
j
)->
cou¡î
 = j;

188  
b¥ed
;

189 
	}
}

192 
	$b¥ed_‰ì
(
b¥ed_t
 *
b¥ed
)

195 i‡(
b¥ed_köd
 =
b¥ed_köd_bimod
 || b¥ed_köd =
b¥ed_köd_comb
)

196 
	`‰ì
(
b¥ed
->
bimod
);

199 i‡(
b¥ed_köd
 =
b¥ed_köd_twﬁevñ
 || b¥ed_köd =
b¥ed_köd_comb
) {

200 
	`‰ì
(
b¥ed
->
twﬁevñ_bht
);

201 
	`‰ì
(
b¥ed
->
twﬁevñ_pht
);

205 i‡(
b¥ed_köd
 =
b¥ed_köd_comb
)

206 
	`‰ì
(
b¥ed
->
choi˚
);

209 
	`‰ì
(
b¥ed
->
btb
);

210 
	`‰ì
(
b¥ed
->
øs
);

211 
	`‰ì
(
b¥ed
);

212 
	}
}

216 
	$b¥ed_lookup
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
)

222 
	`as£π
(
u›
->
Êags
 & 
FCTRL
);

223 i‡((
u›
->
Êags
 & 
FCALL
Ë|| (u›->Êag†& 
FRET
Ë|| !(u›->Êag†& 
FCOND
)) {

224 
u›
->
¥ed
 = 1;

229 i‡(
b¥ed_köd
 =
b¥ed_köd_≥r„˘
)

230 
u›
->
¥ed
 = u›->
√ù
 !u›->
eù
 + u›->
m›_size
;

233 i‡(
b¥ed_köd
 =
b¥ed_köd_èkí
)

234 
u›
->
¥ed
 = 1;

237 i‡(
b¥ed_köd
 =
b¥ed_köd_nŸèkí
)

238 
u›
->
¥ed
 = 0;

241 i‡(
b¥ed_köd
 =
b¥ed_köd_bimod
 || b¥ed_köd =
b¥ed_köd_comb
) {

242 
u›
->
bimod_ödex
 = u›->
eù
 & (
b¥ed_bimod_size
 - 1);

243 
u›
->
bimod_¥ed
 = 
b¥ed
->
bimod
[u›->
bimod_ödex
] > 1;

244 
u›
->
¥ed
 = u›->
bimod_¥ed
;

248 i‡(
b¥ed_köd
 =
b¥ed_köd_twﬁevñ
 || b¥ed_köd =
b¥ed_köd_comb
) {

249 
u›
->
twﬁevñ_bht_ödex
 = u›->
eù
 & (
b¥ed_Àvñ1_size
 - 1);

250 
u›
->
twﬁevñ_pht_row
 = 
b¥ed
->
twﬁevñ_bht
[u›->
twﬁevñ_bht_ödex
];

251 
	`as£π
(
u›
->
twﬁevñ_pht_row
 < 
b¥ed_Àvñ2_height
);

252 
u›
->
twﬁevñ_pht_cﬁ
 = u›->
eù
 & (
b¥ed_Àvñ2_size
 - 1);

253 
u›
->
twﬁevñ_¥ed
 = 
b¥ed
->
twﬁevñ_pht
[u›->
twﬁevñ_pht_row
 *

254 
b¥ed_Àvñ2_size
 + 
u›
->
twﬁevñ_pht_cﬁ
] > 1;

255 
u›
->
¥ed
 = u›->
twﬁevñ_¥ed
;

259 i‡(
b¥ed_köd
 =
b¥ed_köd_comb
) {

260 
u›
->
choi˚_ödex
 = u›->
eù
 & (
b¥ed_choi˚_size
 - 1);

261 
u›
->
choi˚_¥ed
 = 
b¥ed
->
choi˚
[u›->
choi˚_ödex
] > 1;

262 
u›
->
¥ed
 = u›->
choi˚_¥ed
 ? u›->
twﬁevñ_¥ed
 : u›->
bimod_¥ed
;

266 
	`as£π
(!
u›
->
¥ed
 || uop->pred == 1);

267  
u›
->
¥ed
;

268 
	}
}

276 
	$b¥ed_lookup_mu…ùÀ
(
b¥ed_t
 *
b¥ed
, 
uöt32_t
 
eù
, 
cou¡
)

278 
i
, 
¥ed
, 
ãmp_¥ed
;

279 
uöt32_t
 
bht_ödex
, 
pht_cﬁ
;

280 
uöt32_t
 
bhr
;

285 
	`as£π
(
b¥ed_köd
 =
b¥ed_köd_twﬁevñ
);

286 
bht_ödex
 = 
eù
 & (
b¥ed_Àvñ1_size
 - 1);

287 
bhr
 = 
b¥ed
->
twﬁevñ_bht
[
bht_ödex
];

288 
	`as£π
(
bhr
 < 
b¥ed_Àvñ2_height
);

289 
pht_cﬁ
 = 
eù
 & (
b¥ed_Àvñ2_size
 - 1);

290 
¥ed
 = 
ãmp_¥ed
 = 
b¥ed
->
twﬁevñ_pht
[
bhr
 * 
b¥ed_Àvñ2_size
 + 
pht_cﬁ
] > 1;

293 
i
 = 1; i < 
cou¡
; i++) {

294 
bhr
 = ((bh∏<< 1Ë| 
ãmp_¥ed
Ë& (
b¥ed_Àvñ2_height
 - 1);

295 
ãmp_¥ed
 = 
b¥ed
->
twﬁevñ_pht
[
bhr
 * 
b¥ed_Àvñ2_size
 + 
pht_cﬁ
] > 1;

296 
	`as£π
(!
ãmp_¥ed
 ||Åemp_pred == 1);

297 
¥ed
 |
ãmp_¥ed
 << 
i
;

301  
¥ed
;

302 
	}
}

305 
	$b¥ed_upd©e
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
)

307 
èkí
;

308 *
p˘r
;

309 
uöt32_t
 *
pbhr
;

311 
	`as£π
(!
u›
->
•ecmode
);

312 
	`as£π
(
u›
->
Êags
 & 
FCTRL
);

313 
èkí
 = 
u›
->
√ù
 !u›->
eù
 + u›->
m›_size
;

316 
b¥ed
->
ac˚s£s
++;

317 i‡(
u›
->
√ù
 =u›->
¥ed_√ù
)

318 
b¥ed
->
hôs
++;

323 i‡((
u›
->
Êags
 & 
FCALL
Ë|| (u›->Êag†& 
FRET
Ë|| !(u›->Êag†& 
FCOND
)

324 || 
b¥ed_köd
 =
b¥ed_köd_≥r„˘
)

328 i‡(
b¥ed_köd
 =
b¥ed_köd_bimod
 ||

329 (
b¥ed_köd
 =
b¥ed_köd_comb
 && !
u›
->
choi˚_¥ed
))

331 
p˘r
 = &
b¥ed
->
bimod
[
u›
->
bimod_ödex
];

332 *
p˘r
 = 
èkí
 ? 
	`MIN
(*p˘∏+ 1, 3Ë: 
	`MAX
(*pctr - 1, 0);

336 i‡(
b¥ed_köd
 =
b¥ed_köd_twﬁevñ
 ||

337 (
b¥ed_köd
 =
b¥ed_köd_comb
 && 
u›
->
choi˚_¥ed
))

340 
pbhr
 = &
b¥ed
->
twﬁevñ_bht
[
u›
->
twﬁevñ_bht_ödex
];

341 *
pbhr
 = ((*pbh∏<< 1Ë| 
èkí
Ë& (
b¥ed_Àvñ2_height
 - 1);

344 
p˘r
 = &
b¥ed
->
twﬁevñ_pht
[
u›
->
twﬁevñ_pht_row
 *

345 
b¥ed_Àvñ2_size
 + 
u›
->
twﬁevñ_pht_cﬁ
];

346 *
p˘r
 = 
èkí
 ? 
	`MIN
(*p˘∏+ 1, 3Ë: 
	`MAX
(*pctr - 1, 0);

351 i‡(
b¥ed_köd
 =
b¥ed_köd_comb
 && 
u›
->
bimod_¥ed
 !u›->
twﬁevñ_¥ed
) {

352 
p˘r
 = &
b¥ed
->
choi˚
[
u›
->
choi˚_ödex
];

353 *
p˘r
 = 
u›
->
bimod_¥ed
 =
èkí
 ? 
	`MAX
(*p˘∏- 1, 0Ë: 
	`MIN
(*pctr + 1, 3);

355 
	}
}

361 
uöt32_t
 
	$b¥ed_btb_lookup
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
)

363 
btb_íåy_t
 *
íåy
;

364 
uöt32_t
 
way
, 
£t
, 
èrgë
 = 0;

365 
hô
 = 0;

368 
	`as£π
(
u›
->
Êags
 & 
FCTRL
);

369 i‡(
b¥ed_köd
 =
b¥ed_köd_≥r„˘
)

370  
u›
->
√ù
;

373 
£t
 = 
u›
->
eù
 & (
b¥ed_btb_£ts
 - 1);

374 
way
 = 0; way < 
b¥ed_btb_assoc
; way++) {

375 
íåy
 = 
	`BTB_ENTRY
(
£t
, 
way
);

376 i‡(
íåy
->
sour˚
 !
u›
->
eù
)

378 
èrgë
 = 
íåy
->target;

379 
hô
 = 1;

386 i‡(
hô
 && (
u›
->
Êags
 & 
FCALL
Ë&& !u›->
•ecmode
) {

387 
b¥ed
->
øs
[b¥ed->
øs_idx
] = 
u›
->
eù
 + u›->
m›_size
;

388 
b¥ed
->
øs_idx
 = (b¥ed->øs_idx + 1Ë% 
b¥ed_øs_size
;

393 i‡(
hô
 && (
u›
->
Êags
 & 
FRET
Ë&& !u›->
•ecmode
) {

394 
b¥ed
->
øs_idx
 = (b¥ed->øs_idx + 
b¥ed_øs_size
 - 1) % bpred_ras_size;

395 
èrgë
 = 
b¥ed
->
øs
[b¥ed->
øs_idx
];

399  
èrgë
;

400 
	}
}

404 
	$b¥ed_btb_upd©e
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
)

406 
btb_íåy_t
 *
íåy
, *
found
 = 
NULL
;

407 
way
, 
£t
;

410 i‡(
b¥ed_köd
 =
b¥ed_köd_≥r„˘
)

414 
£t
 = 
u›
->
eù
 & (
b¥ed_btb_£ts
 - 1);

415 
way
 = 0; way < 
b¥ed_btb_assoc
; way++) {

416 
íåy
 = 
	`BTB_ENTRY
(
£t
, 
way
);

417 i‡(
íåy
->
sour˚
 =
u›
->
eù
) {

418 
found
 = 
íåy
;

424 i‡(!
found
) {

425 
way
 = 0; way < 
b¥ed_btb_assoc
; way++) {

426 
íåy
 = 
	`BTB_ENTRY
(
£t
, 
way
);

427 
íåy
->
cou¡î
--;

428 i‡(
íåy
->
cou¡î
 < 0) {

429 
íåy
->
cou¡î
 = 
b¥ed_btb_assoc
 - 1;

430 
íåy
->
sour˚
 = 
u›
->
eù
;

431 
íåy
->
èrgë
 = 
u›
->
√ù
;

437 i‡(
found
) {

438 
way
 = 0; way < 
b¥ed_btb_assoc
; way++) {

439 
íåy
 = 
	`BTB_ENTRY
(
£t
, 
way
);

440 i‡(
íåy
->
cou¡î
 > 
found
->counter)

441 
íåy
->
cou¡î
--;

443 
found
->
cou¡î
 = 
b¥ed_btb_assoc
 - 1;

444 
found
->
èrgë
 = 
u›
->
√ù
;

446 
	}
}

453 
uöt32_t
 
	$b¥ed_btb_√xt_bønch
(
b¥ed_t
 *
b¥ed
, 
uöt32_t
 
eù
, uöt32_à
bsize
)

455 
btb_íåy_t
 *
íåy
;

456 
uöt32_t
 
limô
;

457 
£t
, 
way
;

459 
	`as£π
(!(
bsize
 & (bsize - 1)));

460 
limô
 = (
eù
 + 
bsize
) & ~(bsize - 1);

461 
eù
 < 
limô
) {

462 
£t
 = 
eù
 & (
b¥ed_btb_£ts
 - 1);

463 
way
 = 0; way < 
b¥ed_btb_assoc
; way++) {

464 
íåy
 = 
	`BTB_ENTRY
(
£t
, 
way
);

465 i‡(
íåy
->
sour˚
 =
eù
)

466  
eù
;

468 
eù
++;

471 
	}
}

	@commit.c

20 
	~<m2s.h
>

23 
	$ˇn_commô_thªad
(
c‹e
, 
thªad
)

25 
u›_t
 *
u›
;

26 
˘x_t
 *
˘x
 = 
THREAD
.ctx;

30 i‡(!
˘x
 || !
	`˘x_gë_°©us
(˘x, 
˘x_ru¬ög
))

31 
THREAD
.
œ°_commô_cy˛e
 = 
sim_cy˛e
;

32 i‡(
sim_cy˛e
 - 
THREAD
.
œ°_commô_cy˛e
 > 1000000)

33 
	`∑nic
("c%dt%d:Çÿö° commôãd i¿1M cy˛es", 
c‹e
, 
thªad
);

37 i‡(!
	`rob_ˇn_dequeue
(
c‹e
, 
thªad
))

41 
u›
 = 
	`rob_hód
(
c‹e
, 
thªad
);

42 
	`as£π
(
	`u›_exi°s
(
u›
));

43 
	`as£π
(
u›
->
c‹e
 =c‹ê&& u›->
thªad
 ==Åhread);

47 i‡(
u›
->
Êags
 & 
FSTORE
) {

48 i‡(!
u›
->
ªady
 && 
	`rf_ªady
(uop))

49 
u›
->
ªady
 = 1;

50  
u›
->
ªady
;

54  
u›
->
com∂ëed
;

55 
	}
}

58 
	$commô_thªad
(
c‹e
, 
thªad
, 
qu™t
)

60 
˘x_t
 *
˘x
 = 
THREAD
.ctx;

61 
u›_t
 *
u›
;

62 
ªcovî
 = 0;

65 i‡(
esim_debug_fûe
)

66 
	`u›_ li°_check_if_ªady
(
THREAD
.
sq
);

69 
	`as£π
(
˘x
);

70 
qu™t
 && 
	`ˇn_commô_thªad
(
c‹e
, 
thªad
)) {

73 
u›
 = 
	`rob_hód
(
c‹e
, 
thªad
);

74 
	`as£π
(
	`u›_exi°s
(
u›
));

75 
	`as£π
(
u›
->
c‹e
 == core);

76 
	`as£π
(
u›
->
thªad
 ==Åhread);

77 
	`as£π
(!
ªcovî
);

80 i‡(
p_ªcovî_köd
 =
p_ªcovî_köd_commô
 &&

81 (
u›
->
Êags
 & 
FCTRL
Ë&& u›->
√ù
 !u›->
¥ed_√ù
)

82 
ªcovî
 = 1;

85 
	`as£π
(!
u›
->
•ecmode
);

86 
	`rf_commô
(
u›
);

89 i‡(
u›
->
Êags
 & 
FCTRL
) {

90 
	`b¥ed_upd©e
(
THREAD
.
b¥ed
, 
u›
);

91 
	`b¥ed_btb_upd©e
(
THREAD
.
b¥ed
, 
u›
);

92 
THREAD
.
btb_wrôes
++;

96 i‡(
tˇche_¥e£¡
)

97 
	`tˇche_√w_u›
(
THREAD
.
tˇche
, 
u›
);

100 
THREAD
.
œ°_commô_cy˛e
 = 
sim_cy˛e
;

101 
THREAD
.
commôãd
[
u›
->uop]++;

102 
CORE
.
commôãd
[
u›
->uop]++;

103 
p
->
commôãd
[
u›
->uop]++;

104 
sim_ö°
++;

105 i‡(
u›
->
„tch_tˇche
)

106 
THREAD
.
tˇche
->
commôãd
++;

107 i‡(
u›
->
Êags
 & 
FCTRL
) {

108 
THREAD
.
bønches
++;

109 
CORE
.
bønches
++;

110 
p
->
bønches
++;

111 i‡(
u›
->
√ù
 !u›->
¥ed_√ù
) {

112 
THREAD
.
mi•ªd
++;

113 
CORE
.
mi•ªd
++;

114 
p
->
mi•ªd
++;

119 
	`esim_debug
("uopáction=\"update\", core=%d, seq=%llu, stg_commit=1\n",

120 
u›
->
c‹e
, (Ëu›->
di_£q
);

121 
	`esim_debug
("uopáction=\"destroy\", core=%d, seq=%llu\n",

122 
u›
->
c‹e
, (Ëu›->
di_£q
);

125 
	`rob_ªmove_hód
(
c‹e
, 
thªad
);

126 
CORE
.
rob_ªads
++;

127 
THREAD
.
rob_ªads
++;

128 
qu™t
--;

132 i‡(
ªcovî
) {

133 
	`p_ªcovî
(
c‹e
, 
thªad
);

134 
	`fu_ªÀa£
(
c‹e
);

140 i‡(
˘x
->
dóŒoc_sig«l
 && 
	`p_pùñöe_em±y
(
c‹e
, 
thªad
))

141 
	`p_unm≠_c⁄ãxt
(
c‹e
, 
thªad
);

142 
	}
}

145 
	$commô_c‹e
(
c‹e
)

147 
∑ss
, 
qu™t
, 
√w
;

150 
p_commô_köd
) {

152 
p_commô_köd_sh¨ed
:

153 
∑ss
 = 
p_thªads
;

154 
qu™t
 = 
p_commô_width
;

155 
qu™t
 && 
∑ss
) {

156 
CORE
.
commô_cuºít
 = (CORE.commô_cuºíà+ 1Ë% 
p_thªads
;

157 i‡(
	`ˇn_commô_thªad
(
c‹e
, 
CORE
.
commô_cuºít
)) {

158 
	`commô_thªad
(
c‹e
, 
CORE
.
commô_cuºít
, 1);

159 
qu™t
--;

160 
∑ss
 = 
p_thªads
;

162 
∑ss
--;

166 
p_commô_köd_time¶i˚
:

169 
√w
 = (
CORE
.
commô_cuºít
 + 1Ë% 
p_thªads
;

170 
√w
 !
CORE
.
commô_cuºít
 && !
	`ˇn_commô_thªad
(
c‹e
,Çew))

171 
√w
 = (√w + 1Ë% 
p_thªads
;

174 
CORE
.
commô_cuºít
 = 
√w
;

175 
	`commô_thªad
(
c‹e
, 
√w
, 
p_commô_width
);

179 
	}
}

182 
	$p_commô
()

184 
c‹e
;

185 
p
->
°age
 = "commit";

186 
FOREACH_CORE


187 
	`commô_c‹e
(
c‹e
);

188 
	}
}

	@decode.c

20 
	~<m2s.h
>

22 
	$decode_thªad
(
c‹e
, 
thªad
)

24 
li°_t
 *
„tchq
 = 
THREAD
.fetchq;

25 
li°_t
 *
u›q
 = 
THREAD
.uopq;

26 
u›_t
 *
u›
;

27 
i
;

29 
i
 = 0; i < 
p_decode_width
; i++) {

32 i‡(!
	`li°_cou¡
(
„tchq
))

34 i‡(
	`li°_cou¡
(
u›q
Ë>
u›q_size
)

36 
u›
 = 
	`li°_gë
(
„tchq
, 0);

37 
	`as£π
(
	`u›_exi°s
(
u›
));

42 i‡(
u›
->
„tch_tˇche
) {

44 
	`„tchq_ªmove
(
c‹e
, 
thªad
, 0);

45 
	`li°_add
(
u›q
, 
u›
);

46 
u›
->
ö_u›q
 = 1;

47 
u›
 = 
	`li°_gë
(
„tchq
, 0);

48 } 
u›
 && u›->
„tch_tˇche
);

54 
	`as£π
(!
u›
->
m›_ödex
);

55 i‡(!
	`ˇche_sy°em_≥ndög_ac˚ss
(
c‹e
, 
thªad
, 
ˇche_köd_ö°
, 
u›
->
„tch_ac˚ss
)) {

57 
	`„tchq_ªmove
(
c‹e
, 
thªad
, 0);

58 
	`li°_add
(
u›q
, 
u›
);

59 
u›
->
ö_u›q
 = 1;

60 
u›
 = 
	`li°_gë
(
„tchq
, 0);

61 } 
u›
 && u›->
m›_ödex
);

64 
	}
}

67 
	$decode_c‹e
(
c‹e
)

69 
thªad
;

70 
FOREACH_THREAD


71 
	`decode_thªad
(
c‹e
, 
thªad
);

72 
	}
}

75 
	$p_decode
()

77 
c‹e
;

78 
p
->
°age
 = "decode";

79 
FOREACH_CORE


80 
	`decode_c‹e
(
c‹e
);

81 
	}
}

	@dispatch.c

20 
	~<m2s.h
>

25 
di_°Æl_íum
 
	$ˇn_di•©ch_thªad
(
c‹e
, 
thªad
)

27 
li°_t
 *
u›q
 = 
THREAD
.uopq;

28 
u›_t
 *
u›
;

31 
u›
 = 
	`li°_gë
(
u›q
, 0);

32 i‡(!
u›
)

33  !
THREAD
.
˘x
 || !
	`˘x_gë_°©us
(THREAD.˘x, 
˘x_ru¬ög
) ?

34 
di_°Æl_˘x
 : 
di_°Æl_u›q
;

37 i‡(!
	`rob_ˇn_íqueue
(
u›
))

38  
di_°Æl_rob
;

39 i‡(!(
u›
->
Êags
 & 
FMEM
Ë&& !
	`iq_ˇn_ö£π
(uop))

40  
di_°Æl_iq
;

41 i‡((
u›
->
Êags
 & 
FMEM
Ë&& !
	`lsq_ˇn_ö£π
(uop))

42  
di_°Æl_lsq
;

43 i‡(!
	`rf_ˇn_ª«me
(
u›
))

44  
di_°Æl_ª«me
;

46  
di_°Æl_u£d
;

47 
	}
}

50 
	$di•©ch_thªad
(
c‹e
, 
thªad
, 
qu™t
)

52 
u›_t
 *
u›
;

53 
di_°Æl_íum
 
°Æl
;

55 
qu™t
) {

58 
°Æl
 = 
	`ˇn_di•©ch_thªad
(
c‹e
, 
thªad
);

59 i‡(
°Æl
 !
di_°Æl_u£d
) {

60 
CORE
.
di_°Æl
[
°Æl
] +
qu™t
;

65 
u›
 = 
	`li°_ªmove_©
(
THREAD
.
u›q
, 0);

66 
	`as£π
(
	`u›_exi°s
(
u›
));

67 
u›
->
ö_u›q
 = 0;

70 
	`rf_ª«me
(
u›
);

73 
	`rob_íqueue
(
u›
);

74 
CORE
.
rob_wrôes
++;

75 
THREAD
.
rob_wrôes
++;

78 i‡(!(
u›
->
Êags
 & 
FMEM
)) {

79 
	`iq_ö£π
(
u›
);

80 
CORE
.
iq_wrôes
++;

81 
THREAD
.
iq_wrôes
++;

85 i‡(
u›
->
Êags
 & 
FMEM
) {

86 
	`lsq_ö£π
(
u›
);

87 
CORE
.
lsq_wrôes
++;

88 
THREAD
.
lsq_wrôes
++;

92 
u›
->
di_£q
 = ++
CORE
.di_seq;

93 
CORE
.
di_°Æl
[
u›
->
•ecmode
 ? 
di_°Æl_•ec
 : 
di_°Æl_u£d
]++;

94 
THREAD
.
di•©ched
[
u›
->uop]++;

95 
CORE
.
di•©ched
[
u›
->uop]++;

96 
p
->
di•©ched
[
u›
->uop]++;

97 
qu™t
--;

100 
	`esim_debug
("uopáction=\"create\", core=%d, seq=%llu,Çame=\"%s\","

103 
u›
->
c‹e
, (Ëu›->
di_£q
, u›->
«me
,

104 
u›
->
m›_«me
, u›->
m›_cou¡
, u›->
m›_ödex
, u›->
•ecmode
,

105 !!
u›
->
ö_rob
, !!u›->
ö_iq
, u›->
ö_lq
 || u›->
ö_sq
);

108  
qu™t
;

109 
	}
}

111 
	$di•©ch_c‹e
(
c‹e
)

113 
skù
 = 
p_thªads
;

114 
qu™t
 = 
p_di•©ch_width
;

115 
ªmaö
;

117 
p_di•©ch_köd
) {

119 
p_di•©ch_köd_sh¨ed
:

122 
CORE
.
di•©ch_cuºít
 = (CORE.di•©ch_cuºíà+ 1Ë% 
p_thªads
;

123 
ªmaö
 = 
	`di•©ch_thªad
(
c‹e
, 
CORE
.
di•©ch_cuºít
, 1);

124 
skù
 = 
ªmaö
 ? skù - 1 : 
p_thªads
;

125 
qu™t
 = 
ªmaö
 ? quant : quant - 1;

126 } 
qu™t
 && 
skù
);

129 
p_di•©ch_köd_time¶i˚
:

132 
CORE
.
di•©ch_cuºít
 = (CORE.di•©ch_cuºíà+ 1Ë% 
p_thªads
;

133 
skù
--;

134 } 
skù
 && 
	`ˇn_di•©ch_thªad
(
c‹e
, 
CORE
.
di•©ch_cuºít
Ë!
di_°Æl_u£d
);

135 
	`di•©ch_thªad
(
c‹e
, 
CORE
.
di•©ch_cuºít
, 
qu™t
);

138 
	}
}

141 
	$p_di•©ch
()

143 
c‹e
;

144 
p
->
°age
 = "dispatch";

145 
FOREACH_CORE


146 
	`di•©ch_c‹e
(
c‹e
);

147 
	}
}

	@fetch.c

20 
	~<m2s.h
>

23 
	$ˇn_„tch
(
c‹e
, 
thªad
)

25 
uöt32_t
 
phaddr
, 
block
;

26 
˘x_t
 *
˘x
 = 
THREAD
.ctx;

29 i‡(!
˘x
 || !
	`˘x_gë_°©us
(˘x, 
˘x_ru¬ög
))

33 i‡(
THREAD
.
„tch_°Æl
 || 
˘x
->
dóŒoc_sig«l
)

38 i‡(
THREAD
.
„tchq_occ
 >
„tchq_size
)

43 
block
 = 
THREAD
.
„tch_√ù
 & ~(THREAD.
„tch_bsize
 - 1);

44 i‡(
block
 !
THREAD
.
„tch_block
) {

45 
phaddr
 = 
	`mmu_å™¶©e
(
THREAD
.
˘x
->
mid
, THREAD.
„tch_√ù
);

46 i‡(!
	`ˇche_sy°em_ˇn_ac˚ss
(
c‹e
, 
thªad
, 
ˇche_köd_ö°
,

47 
ˇche_ac˚ss_köd_ªad
, 
phaddr
))

53 
	}
}

60 
u›_t
 *
	$„tch_ö°
(
c‹e
, 
thªad
, 
„tch_tˇche
)

62 
˘x_t
 *
˘x
 = 
THREAD
.ctx;

63 
li°_t
 *
„tchq
 = 
THREAD
.fetchq;

64 
cou¡
, 
√wcou¡
, 
i
;

65 
u›_t
 *
u›
, *
ªt
;

68 
THREAD
.
„tch_eù
 = THREAD.
„tch_√ù
;

69 
	`˘x_£t_eù
(
˘x
, 
THREAD
.
„tch_eù
);

70 
	`˘x_execuã_ö°
(
˘x
);

71 
THREAD
.
„tch_√ù
 = THREAD.
„tch_eù
 + 
iß_ö°
.
size
;

74 
cou¡
 = 
	`li°_cou¡
(
„tchq
);

75 
ªt
 = 
	`u›_decode
(
„tchq
);

76 
√wcou¡
 = 
	`li°_cou¡
(
„tchq
);

87 
i
 = 
cou¡
; i < 
√wcou¡
; i++) {

88 
u›
 = 
	`li°_gë
(
„tchq
, 
i
);

89 
	`as£π
(
u›
);

90 
u›
->
£q
 = ++
p
->seq;

91 
u›
->
m›_£q
 = 
p
->
£q
 - 
i
 + 
cou¡
;

92 
u›
->
m›_size
 = 
iß_ö°
.
size
;

93 
u›
->
m›_cou¡
 = 
√wcou¡
 - 
cou¡
;

94 
u›
->
m›_ödex
 = 
i
 - 
cou¡
;

95 
u›
->
˘x
 = ctx;

96 
u›
->
c‹e
 = core;

97 
u›
->
thªad
 =Åhread;

98 
u›
->
eù
 = 
THREAD
.
„tch_eù
;

99 
u›
->
ö_„tchq
 = 1;

100 
u›
->
„tch_tˇche
 = fetch_tcache;

101 
u›
->
•ecmode
 = 
	`˘x_gë_°©us
(
˘x
, 
˘x_•ecmode
);

102 
u›
->
„tch_ac˚ss
 = 
THREAD
.fetch_access;

103 
u›
->
√ù
 = 
˘x
->
ªgs
->
eù
;

104 
u›
->
¥ed_√ù
 = 
THREAD
.
„tch_√ù
;

105 
u›
->
èrgë_√ù
 = 
iß_èrgë
;

110 
	`rf_cou¡_dïs
(
u›
);

113 i‡(
u›
->
Êags
 & 
FMEM
) {

114 
u›
->
mem_véaddr
 = 
˘x
->
mem
->
œ°_addªss
;

115 
u›
->
mem_phaddr
 = 
	`mmu_å™¶©e
(
THREAD
.
˘x
->
mid
, ctx->
mem
->
œ°_addªss
);

119 
	`u›_dump_buf
(
u›
, u›->
«me
, (uop->name));

120 i‡(
i
 =
cou¡
)

121 
	`x86_ö°_dump_buf
(&
iß_ö°
, 
u›
->
m›_«me
,

122 (
u›
->
m›_«me
));

125 
p
->
„tched
++;

126 
THREAD
.
„tched
++;

127 i‡(
„tch_tˇche
)

128 
THREAD
.
tˇcheq_occ
++;

133 i‡(
ªt
 && !
„tch_tˇche
)

134 
THREAD
.
„tchq_occ
 +
ªt
->
m›_size
;

135  
ªt
;

136 
	}
}

141 
	$„tch_thªad_tˇche
(
c‹e
, 
thªad
)

143 
u›_t
 *
u›
;

144 
uöt32_t
 
eù_bønch
;

145 
m¥ed
, 
hô
, 
m›_cou¡
, 
i
;

146 
uöt32_t
 *
m›_¨øy
, 
√ù
;

149 i‡(!
tˇche_¥e£¡
)

151 i‡(
THREAD
.
tˇcheq_occ
 >
tˇche_queue_size
)

155 
eù_bønch
 = 
	`b¥ed_btb_√xt_bønch
(
THREAD
.
b¥ed
,

156 
THREAD
.
„tch_√ù
, THREAD.
„tch_bsize
);

157 
m¥ed
 = 
eù_bønch
 ? 
	`b¥ed_lookup_mu…ùÀ
(
THREAD
.
b¥ed
,

158 
eù_bønch
, 
tˇche_bønch_max
) : 0;

159 
hô
 = 
	`tˇche_lookup
(
THREAD
.
tˇche
, THREAD.
„tch_√ù
, 
m¥ed
,

160 &
m›_cou¡
, &
m›_¨øy
, &
√ù
);

161 i‡(!
hô
)

165 
i
 = 0; i < 
m›_cou¡
; i++) {

168 i‡(!
	`˘x_gë_°©us
(
THREAD
.
˘x
, 
˘x_ru¬ög
))

174 
THREAD
.
„tch_√ù
 = 
m›_¨øy
[
i
];

175 
u›
 = 
	`„tch_ö°
(
c‹e
, 
thªad
, 1);

176 i‡(!
u›
)

181 i‡(
u›
->
Êags
 & 
FCTRL
) {

182 
	`b¥ed_lookup
(
THREAD
.
b¥ed
, 
u›
);

183 
u›
->
¥ed_√ù
 = 
i
 =
m›_cou¡
 - 1 ? 
√ù
 :

184 
m›_¨øy
[
i
 + 1];

189 
THREAD
.
„tch_√ù
 = 
√ù
;

191 
	}
}

194 
	$„tch_thªad
(
c‹e
, 
thªad
)

196 
˘x_t
 *
˘x
 = 
THREAD
.ctx;

197 
u›_t
 *
u›
;

198 
uöt32_t
 
block
, 
phaddr
, 
èrgë
;

199 
èkí
;

202 i‡(
	`„tch_thªad_tˇche
(
c‹e
, 
thªad
))

207 
block
 = 
THREAD
.
„tch_√ù
 & ~(THREAD.
„tch_bsize
 - 1);

208 i‡(
block
 !
THREAD
.
„tch_block
) {

209 
phaddr
 = 
	`mmu_å™¶©e
(
THREAD
.
˘x
->
mid
, THREAD.
„tch_√ù
);

210 
THREAD
.
„tch_block
 = 
block
;

211 
THREAD
.
„tch_ac˚ss
 = 
	`ˇche_sy°em_ªad
(
c‹e
, 
thªad
,

212 
ˇche_köd_ö°
, 
phaddr
, 
NULL
, NULL);

213 
THREAD
.
btb_ªads
++;

217 (
THREAD
.
„tch_√ù
 & ~(THREAD.
„tch_bsize
 - 1)Ë=
block
) {

220 i‡(!
	`˘x_gë_°©us
(
˘x
, 
˘x_ru¬ög
))

227 
u›
 = 
	`„tch_ö°
(
c‹e
, 
thªad
, 0);

228 i‡(!
iß_ö°
.
size
)

230 i‡(!
u›
)

236 i‡(
u›
->
Êags
 & 
FCTRL
) {

237 
èrgë
 = 
	`b¥ed_btb_lookup
(
THREAD
.
b¥ed
, 
u›
);

238 
èkí
 = 
èrgë
 && 
	`b¥ed_lookup
(
THREAD
.
b¥ed
, 
u›
);

239 i‡(
èkí
) {

240 
THREAD
.
„tch_√ù
 = 
èrgë
;

241 
u›
->
¥ed_√ù
 = 
èrgë
;

246 
	}
}

251 
	$„tch_c‹e
(
c‹e
)

253 
thªad
, 
√w
;

254 
mu°_swôch
;

256 
p_„tch_köd
) {

259 
p_„tch_köd_sh¨ed
:

260 
FOREACH_THREAD


261 i‡(
	`ˇn_„tch
(
c‹e
, 
thªad
))

262 
	`„tch_thªad
(
c‹e
, 
thªad
);

265 
p_„tch_köd_time¶i˚
:

266 
FOREACH_THREAD
 {

267 
CORE
.
„tch_cuºít
 = (CORE.„tch_cuºíà+ 1Ë% 
p_thªads
;

268 i‡(
	`ˇn_„tch
(
c‹e
, 
CORE
.
„tch_cuºít
)) {

269 
	`„tch_thªad
(
c‹e
, 
CORE
.
„tch_cuºít
);

275 
p_„tch_köd_swôch⁄evít
:

278 
thªad
 = 
CORE
.
„tch_cuºít
;

279 
mu°_swôch
 = !
	`˘x_gë_°©us
(
THREAD
.
˘x
, 
˘x_ru¬ög
);

280 i‡(
sim_cy˛e
 - 
CORE
.
„tch_swôch
 > 
p_thªad_qu™tum
 ||

281 
	`evítq_l⁄gœt
(
c‹e
, 
thªad
) ||

282 
mu°_swôch
)

285 
√w
 = (
thªad
 + 1Ë% 
p_thªads
;Çew !=Åhread;

286 
√w
 = (√w + 1Ë% 
p_thªads
)

289 i‡(!
	`ˇn_„tch
(
c‹e
, 
√w
))

293 i‡(
mu°_swôch
)

297 i‡(
	`ITHREAD
(
√w
).
commôãd
 > 
THREAD
.committed + 100000)

301 i‡(!
	`evítq_l⁄gœt
(
c‹e
, 
√w
))

306 i‡(
√w
 !
thªad
) {

307 
CORE
.
„tch_cuºít
 = 
√w
;

308 
CORE
.
„tch_swôch
 = 
sim_cy˛e
;

309 
	`ITHREAD
(
√w
).
„tch_°Æl
 = 
p_thªad_swôch_≥«…y
;

314 i‡(
	`ˇn_„tch
(
c‹e
, 
CORE
.
„tch_cuºít
))

315 
	`„tch_thªad
(
c‹e
, 
CORE
.
„tch_cuºít
);

318 
	}
}

321 
	$p_„tch
()

323 
c‹e
;

324 
p
->
°age
 = "fetch";

325 
FOREACH_CORE


326 
	`„tch_c‹e
(
c‹e
);

327 
	}
}

	@fu.c

20 
	~<m2s.h
>

25 
	sfu_ªs_t
 {

26 
	mcou¡
;

27 
	m›œt
;

28 
	missuñ©
;

29 *
	m«me
;

33 
fu_ªs_t
 
	gfu_ªs_poﬁ
[
fu_cou¡
] = {

52 
	$fu_ªg_›ti⁄s
()

54 
	`›t_ªg_uöt32_li°
("-fu:intadd", "Integer Adder (count, oplat, issuelat)",

55 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_öèdd
], 3, 
NULL
);

56 
	`›t_ªg_uöt32_li°
("-fu:intsub", "Integer Subtracter",

57 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_ötsub
], 3, 
NULL
);

58 
	`›t_ªg_uöt32_li°
("-fu:intmult", "Integer Multiplier",

59 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_ötmu…
], 3, 
NULL
);

60 
	`›t_ªg_uöt32_li°
("-fu:intdiv", "Integer Divider",

61 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_ötdiv
], 3, 
NULL
);

62 
	`›t_ªg_uöt32_li°
("-fu:effaddr", "Effective Address",

63 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_efÁddr
], 3, 
NULL
);

64 
	`›t_ªg_uöt32_li°
("-fu:logical", "Logical Operations",

65 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_logiˇl
], 3, 
NULL
);

67 
	`›t_ªg_uöt32_li°
("-fu:fpsimple", "Floating-point simple operator",

68 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_Âsim∂e
], 3, 
NULL
);

69 
	`›t_ªg_uöt32_li°
("-fu:fpadd", "Floating-pointerádder",

70 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_Âadd
], 3, 
NULL
);

71 
	`›t_ªg_uöt32_li°
("-fu:fpcomp", "Floating-point comparator",

72 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_Âcomp
], 3, 
NULL
);

73 
	`›t_ªg_uöt32_li°
("-fu:fpmult", "Floating-point multiplier",

74 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_Âmu…
], 3, 
NULL
);

75 
	`›t_ªg_uöt32_li°
("-fu:fpdiv", "Floating-point divider",

76 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_Âdiv
], 3, 
NULL
);

77 
	`›t_ªg_uöt32_li°
("-fu:fpcomplex", "Floating-point complex operator",

78 (
uöt32_t
 *Ë&
fu_ªs_poﬁ
[
fu_Âcom∂ex
], 3, 
NULL
);

79 
	}
}

82 
	$fu_öô
()

84 
c‹e
;

85 
FOREACH_CORE


86 
CORE
.
fu
 = 
	`ˇŒoc
(1, (
fu_t
));

87 
	}
}

90 
	$fu_d⁄e
()

92 
c‹e
;

93 
FOREACH_CORE


94 
	`‰ì
(
CORE
.
fu
);

95 
	}
}

101 
	$fu_ª£rve
(
u›_t
 *
u›
)

103 
i
;

104 
c‹e
 = 
u›
->core;

105 
fu_t
 *
fu
 = 
CORE
.fu;

106 
fu_˛ass_íum
 
fu_˛ass
 = 
u›
->fu_class;

109 i‡(!
u›
->
issue_åy_whí
)

110 
u›
->
issue_åy_whí
 = 
sim_cy˛e
;

113 
	`as£π
(
fu_˛ass
 > 
fu_n⁄e
 && fu_˛as†< 
fu_cou¡
);

114 
	`as£π
(
fu_ªs_poﬁ
[
fu_˛ass
].
cou¡
 <
FU_RES_MAX
);

115 
i
 = 0; i < 
fu_ªs_poﬁ
[
fu_˛ass
].
cou¡
; i++) {

116 i‡(
fu
->
cy˛e_whí_‰ì
[
fu_˛ass
][
i
] <
sim_cy˛e
) {

117 
	`as£π
(
fu_ªs_poﬁ
[
fu_˛ass
].
issuñ©
 > 0);

118 
	`as£π
(
fu_ªs_poﬁ
[
fu_˛ass
].
›œt
 > 0);

119 
fu
->
cy˛e_whí_‰ì
[
fu_˛ass
][
i
] = 
sim_cy˛e
 + 
fu_ªs_poﬁ
[fu_˛ass].
issuñ©
;

120 
fu
->
ac˚s£s
[
fu_˛ass
]++;

121 
fu
->
waôög_time
[
fu_˛ass
] +
sim_cy˛e
 - 
u›
->
issue_åy_whí
;

122  
fu_ªs_poﬁ
[
fu_˛ass
].
›œt
;

127 
fu
->
díõd
[
fu_˛ass
]++;

129 
	}
}

133 
	$fu_ªÀa£
(
c‹e
)

135 
i
, 
j
;

136 
i
 = 0; i < 
fu_cou¡
; i++)

137 
j
 = 0; j < 
fu_ªs_poﬁ
[
i
].
cou¡
; j++)

138 
CORE
.
fu
->
cy˛e_whí_‰ì
[
i
][
j
] = 0;

139 
	}
}

	@guestos.c

21 
	~<›ti⁄s.h
>

22 
	~<sig«l.h
>

23 
	~<m2skî√l.h
>

24 
	~<°rög.h
>

25 
	~<limôs.h
>

26 
	~<°dio.h
>

29 #i‚de‡
VERSION


30 
	#VERSION
 ""

	)

35 
	#max_∑th_Àngth
 100

	)

37 *
	gsim_tôÀ
 = "";

38 *
	gc⁄figfûe
 = "";

39 *
	g˘xc⁄fig
 = "";

41 *
	g˘x_debug_fûe
 = "";

42 *
	gsysˇŒ_debug_fûe
 = "";

43 *
	g›í˛_debug_fûe
 = "";

44 *
	ggpu_iß_debug_fûe
 = "";

45 *
	gñf_debug_fûe
 = "";

46 *
	glﬂdî_debug_fûe
 = "";

47 *
	giß_ˇŒ_debug_fûe
 = "";

48 *
	giß_ö°_debug_fûe
 = "";

50 *
	gö°_°©_fûe
 = "";

51 *
	gö°_°›
 = "";

52 
uöt64_t
 
	gö°_ª£t
 = 0;

53 
uöt64_t
 
	gmax_cy˛es
 = 0;

54 
uöt64_t
 
	gmax_ö°
 = 0;

55 
uöt32_t
 
	gbªak_poöt
 = 0;

56 
uöt64_t
 
	gsim_cy˛e
 = 0;

57 
uöt64_t
 
	gsim_ö°
 = 0;

61 
	gsigöt_ª˚ived
 = 0;

62 
ö°r_¶i˚
;

65 
shñl
();

68 
	$sim_ªg_›ti⁄s
() {

69 
	`›t_ªg_°rög
("-tôÀ", "Simuœti⁄ÅôÀ", &
sim_tôÀ
);

70 
	`›t_ªg_°rög
("-c⁄fig", "m2s-Á° c⁄figuøti⁄ fûe", &
c⁄figfûe
);

71 
	`›t_ªg_°rög
("-˘xc⁄fig", "C⁄ãxàc⁄figuøti⁄ fûe", &
˘xc⁄fig
);

73 
	`›t_ªg_°rög
("-debug:˘x", "Debug inf‹m©i⁄ f‹ c⁄ãxà¸óti⁄ & sètu†upd©es", &
˘x_debug_fûe
);

74 
	`›t_ªg_°rög
("-debug:sysˇŒ", "Debug inf‹m©i⁄ f‹ sy°em cÆls", &
sysˇŒ_debug_fûe
);

75 
	`›t_ªg_°rög
("-debug:›í˛", "Debug inf‹m©i⁄ f‹ O≥nCLÖrogøms", &
›í˛_debug_fûe
);

76 
	`›t_ªg_°rög
("-debug:gpu_iß", "Debug inf‹m©i⁄ f‹ GPU in°ru˘i⁄s", &
gpu_iß_debug_fûe
);

77 
	`›t_ªg_°rög
("-debug:ñf", "Debug inf‹m©i⁄ fromÉl‡fûê™Æyzî", &
ñf_debug_fûe
);

78 
	`›t_ªg_°rög
("-debug:lﬂdî", "Debug inf‹m©i⁄ fromÖrogømÜﬂdî", &
lﬂdî_debug_fûe
);

79 
	`›t_ªg_°rög
("-debug:ˇŒ", "Debug inf‹m©i⁄ábouà¥o˚duª cÆls", &
iß_ˇŒ_debug_fûe
);

80 
	`›t_ªg_°rög
("-debug:ö°", "Debug inf‹m©i⁄ábouàexecuãd in°ru˘i⁄s", &
iß_ö°_debug_fûe
);

82 
	`›t_ªg_°rög
("-ö°_°©", "Fûêtÿdum∞ö°ru˘i⁄ sèts", &
ö°_°©_fûe
);

83 
	`›t_ªg_°rög
("-ö°_°›", "St› whíÉxecutög in°", &
ö°_°›
);

84 
	`›t_ªg_uöt64
("-ö°_ª£t", "Cy˛êtÿª£àö°ru˘i⁄ sèts", &
ö°_ª£t
);

85 
	`›t_ªg_uöt64
("-max_cy˛es", "Cy˛êtÿ°›Örogøm (0Úÿ°›)", &
max_cy˛es
);

86 
	`›t_ªg_uöt64
("-max_ö°", "MaximumÇumbî o‡ö°ru˘i⁄s", &
max_ö°
);

87 
	`›t_ªg_uöt32
("-bªak_poöt", "VÆuêf‹ÉùÅÿ°›", &
bªak_poöt
);

88 
	`›t_ªg_boﬁ
("-mem_ß„_mode", "Sa„ác˚s£†tÿmem‹y", &
mem_ß„_mode
);

90 
	`gk_ªg_›ti⁄s
();

91 
	}
}

94 
	$sim_sig«l_h™dÀr
(
signum
) {

95 
FILE
 *
f
;

97 
signum
) {

99 
SIGINT
:

102 
sigöt_ª˚ived
 = 1;

103 
	`Ârötf
(
°dîr
, "SIGINTÑeceived\n");

104 
	`sig«l
(
SIGINT
, 
sim_sig«l_h™dÀr
);

105 
	`¥ötf
("Don't doÅhat\n");

108 
SIGABRT
:

109 
	`sig«l
(
SIGABRT
, 
SIG_DFL
);

110 
	`Ârötf
(
°dîr
, "cy˛ê%Œd:áb‹ãd\n", (Ë
sim_cy˛e
);

111 
f
 = 
	`›í_wrôe
(
ö°_°©_fûe
);

112 i‡(
f
)

113 
	`iß_ö°_°©_dump
(
f
);

114 
	`iß_dump
(
°dîr
);

115 
	`ke_dump
(
°dîr
);

116 
	`exô
(1);

118 
SIGFPE
:

119 
	`¥ötf
("\n Inside signal handler for signal floatingÖointÉrror**");

120 
	`¥ötf
("\n Inside signal handler for signal floatingÖointÉrror**");

121 
	`sig«l
(
SIGFPE
, 
SIG_DFL
);

124 
SIGSEGV
:

125 
	`sig«l
(
SIGSEGV
, 
SIG_DFL
);

126 
	`¥ötf
 ( "Youáre here in sim_signal_handler \nsegmentation fault\n");

127 
	`exô
(0);

130 
SIGUSR1
:

131 
	`¥ötf
("\n Inside signal handler for signalÇamed SIGUSR1");

132 
	`¥ötf
("\ndoingÇothing");

135 
	}
}

139 
	#BOOT_FILE
 ".c⁄fig"

	)

141 
	$gë_∑øm
(c⁄° *
∑øm
, *
vÆue
){

142 
FILE
 *
Â
;

143 i‡((
Â
=
	`f›í
(
BOOT_FILE
,"r"))==0) {

144 
	`≥º‹
("boot configuration file couldn't beÜoaded.\n");

147 
°r_buf
[
LINE_MAX
 + 1];

148 
Àn
 = 
	`°æí
(
∑øm
);

149 
dñim
[
Àn
+2];

151 
	`°rˇt
(
	`°r˝y
(
dñim
,
∑øm
), "=");

153 
	`fgës
(
°r_buf
, (°r_buf), 
Â
Ë!
NULL
) {

154 i‡(
	`°∫cmp
(
dñim
,
°r_buf
,
Àn
+1)==0){

155 
	`°r˝y
(
vÆue
,
°r_buf
+
Àn
+1);

161 
	}
}

163 
	$£t_deÁu…s
() {

164 
∑øm_vÆue
[
LINE_MAX
+1];

165 
	`gë_∑øm
("INSTR_SLICE", 
∑øm_vÆue
);

166 
ö°r_¶i˚
 = 
	`©oi
(
∑øm_vÆue
);

168 
hóds
, 
åacks
, 
£˘‹s
;

169 
comm™d
[1000];

170 
	`gë_∑øm
("NUM_HEADS",
∑øm_vÆue
);

171 
hóds
=
	`©oi
(
∑øm_vÆue
);

172 
	`gë_∑øm
("NUM_TRACKS",
∑øm_vÆue
);

173 
åacks
=
	`©oi
(
∑øm_vÆue
);

174 
	`gë_∑øm
("NUM_SECTORS",
∑øm_vÆue
);

175 
£˘‹s
=
	`©oi
(
∑øm_vÆue
);

176 
	`•rötf
(
comm™d
,"(dd if=/dev/zîÿof=Sim_disk bs=%dx%dx%db cou¡=1Ë2> /dev/zîo",
hóds
,
åacks
,
£˘‹s
);

177 
	`sy°em
(
comm™d
);

178 
	}
}

180 
	$ö°Æl_sig«ls
(){

181 
	`sig«l
(
SIGINT
, &
sim_sig«l_h™dÀr
);

182 
	`sig«l
(
SIGABRT
, &
sim_sig«l_h™dÀr
);

183 
	`sig«l
(
SIGFPE
, &
sim_sig«l_h™dÀr
);

184 
	`sig«l
(
SIGUSR2
, &
sim_sig«l_h™dÀr
);

185 
	}
}

187 
	$boŸ
() {

189 
	`ö°Æl_sig«ls
();

190 
	`£t_deÁu…s
();

191 
	}
}

195 
	gu£r_¥og_∑th
[200];

198 
	$maö
(
¨gc
, **
¨gv
) {

199 
uöt64_t
 
t
;

200 
my¨gc
 = 2;

210 
	`Ârötf
(
°dîr
, "********************************************************");

211 
	`Ârötf
(
°dîr
, "\n WELCOME TO GUESTOS\n");

212 
	`Ârötf
(
°dîr
, "********************************************************\n");

216 
	`›t_öô
();

217 
	`sim_ªg_›ti⁄s
();

230 
	`ke_öô
();

232 
	`boŸ
();

252 
	`shñl
();

253 i‡(*
c⁄figfûe
) {

255 
	`›t_check_c⁄fig
(
c⁄figfûe
);

274 
	`ld_lﬂd_¥og_‰om_˘xc⁄fig
(
˘xc⁄fig
);

281 
	`sig«l
(
SIGINT
, &
sim_sig«l_h™dÀr
);

282 
	`sig«l
(
SIGABRT
, &
sim_sig«l_h™dÀr
);

283 
	`sig«l
(
SIGFPE
, &
sim_sig«l_h™dÀr
);

284 
	`sig«l
(
SIGUSR2
, &
sim_sig«l_h™dÀr
);

288 !
sigöt_ª˚ived
) {

291 i‡(
bªak_poöt
 && 
ke
->
c⁄ãxt_li°_hód
->
ªgs
->
eù
 == break_point) {

292 
	`ªgs_dump
(
ke
->
c⁄ãxt_li°_hód
->
ªgs
, 
°dout
);

297 
	`ke_run
();

298 
sim_ö°
 +
ke
->
ru¬ög_cou¡
;

299 i‡(!
ke
->
c⁄ãxt_li°_hód
)

303 
sim_cy˛e
++;

304 i‡((
sim_cy˛e
 >
max_cy˛es
 && max_cycles) ||

305 (
sim_ö°
 >
max_ö°
 && max_inst)) {

306 
	`ªgs_dump
(
iß_ªgs
, 
°dout
);

307 
	`ke_dump
(
°dout
);

310 i‡(
sim_cy˛e
 =
ö°_ª£t
 && inst_reset)

311 
	`iß_ö°_°©_ª£t
();

313 i‡(*
ö°_°›
 && !
	`°rcmp
(
iß_ö°
.
f‹m©
, inst_stop))

314 
	`∑nic
("ö°ru˘i⁄ '%s' found", 
ö°_°›
);

320 
	`ke_d⁄e
();

323 
	`mh™dÀ_d⁄e
();

325 
	}
}

327 
	$shñl
() {

328 
numbî_of_¥o˚s£s
 = 0, 
i
 = 0;

329 
FILE
 *
f_ö
;

330 
ãmp
[400];

331 
u£r_¥og_∑th
[400];

332 
uid
;

333 
	`¥ötf
("\n Shell begins:\n");

334 
	`¥ötf
("\n guestos:\n");

335 
	`fÊush
(
°dö
);

336 
	`¥ötf
("How many userÖrocessesÅoÑun?");

337 
	`sˇnf
("%d", &
numbî_of_¥o˚s£s
);

338 
f_ö
 = 
	`f›í
("configfile", "w");

339 
i
 = 0; i < 
numbî_of_¥o˚s£s
; i++) {

340 
	`¥ötf
("\n\n\n guestos:EnterÅhe fullÖath of userÖrogramÅoÉxecute:");

341 
	`fÊush
(
°dö
);

344 
	`sˇnf
("%s", 
u£r_¥og_∑th
);

345 
	`¥ötf
 ("Enter Uid forÖrocess: ");

346 
	`sˇnf
("%d", &
uid
);

347 
	`¥ötf
("\¿Thêíãªd fûê∑th i†: %s", 
u£r_¥og_∑th
);

348 
	`•rötf
(
ãmp
, "\n[ C⁄ãxà%d ]", 
i
);

349 
	`Âuts
(
ãmp
, 
f_ö
);

350 
	`•rötf
(
ãmp
, "\nExê%s\n", 
u£r_¥og_∑th
);

351 
	`Âuts
(
ãmp
, 
f_ö
);

352 
	`•rötf
(
ãmp
, "\nUid = %d\n", 
uid
);

353 
	`Âuts
(
ãmp
, 
f_ö
);

355 
c⁄figfûe
 = "configfile";

356 
	`f˛o£
(
f_ö
);

359 
	}
}

	@issue.c

20 
	~<m2s.h
>

23 
	$issue_sq
(
c‹e
, 
thªad
, 
qu™t
)

25 
u›_t
 *
°‹e
;

26 
 li°_t
 *
sq
 = 
THREAD
.sq;

29 
	` li°_hód
(
sq
);

30 !
	` li°_eﬁ
(
sq
Ë&& 
qu™t
) {

33 
°‹e
 = 
	` li°_gë
(
sq
);

34 
	`as£π
(
°‹e
->
Êags
 & 
FSTORE
);

37 i‡(
°‹e
->
ö_rob
)

39 i‡(!
	`ˇche_sy°em_ˇn_ac˚ss
(
c‹e
, 
thªad
, 
ˇche_köd_d©a
,

40 
ˇche_ac˚ss_köd_wrôe
, 
°‹e
->
mem_phaddr
))

44 
	`sq_ªmove
(
c‹e
, 
thªad
);

45 
	`ˇche_sy°em_wrôe
(
c‹e
, 
thªad
, 
ˇche_köd_d©a
,

46 
°‹e
->
mem_phaddr
, 
CORE
.
evítq
, store);

51 
°‹e
->
ö_evítq
 = 1;

52 
°‹e
->
issued
 = 1;

53 
°‹e
->
issue_whí
 = 
sim_cy˛e
;

56 
CORE
.
issued
[
°‹e
->
u›
]++;

57 
CORE
.
lsq_ªads
++;

58 
CORE
.
rf_öt_ªads
 +
°‹e
->
ph_öt_idï_cou¡
;

59 
CORE
.
rf_Â_ªads
 +
°‹e
->
ph_Â_idï_cou¡
;

60 
THREAD
.
issued
[
°‹e
->
u›
]++;

61 
THREAD
.
lsq_ªads
++;

62 
THREAD
.
rf_öt_ªads
 +
°‹e
->
ph_öt_idï_cou¡
;

63 
THREAD
.
rf_Â_ªads
 +
°‹e
->
ph_Â_idï_cou¡
;

64 
p
->
issued
[
°‹e
->
u›
]++;

65 
qu™t
--;

68 
	`esim_debug
("uopáction=\"update\", core=%d, seq=%llu,"

70 
°‹e
->
c‹e
, (Ë°‹e->
di_£q
);

72  
qu™t
;

73 
	}
}

76 
	$issue_lq
(
c‹e
, 
thªad
, 
qu™t
)

78 
 li°_t
 *
lq
 = 
THREAD
.lq;

79 
u›_t
 *
lﬂd
;

82 i‡(
esim_debug_fûe
)

83 
	`u›_ li°_check_if_ªady
(
lq
);

86 
	` li°_hód
(
lq
);

87 !
	` li°_eﬁ
(
lq
Ë&& 
qu™t
) {

91 
lﬂd
 = 
	` li°_gë
(
lq
);

92 i‡(!
lﬂd
->
ªady
 && !
	`rf_ªady
(load)) {

93 
	` li°_√xt
(
lq
);

96 
lﬂd
->
ªady
 = 1;

97 i‡(!
	`ˇche_sy°em_ˇn_ac˚ss
(
c‹e
, 
thªad
, 
ˇche_köd_d©a
,

98 
ˇche_ac˚ss_köd_ªad
, 
lﬂd
->
mem_phaddr
))

100 
	` li°_√xt
(
lq
);

106 
	`lq_ªmove
(
c‹e
, 
thªad
);

107 
	`ˇche_sy°em_ªad
(
c‹e
, 
thªad
, 
ˇche_köd_d©a
,

108 
lﬂd
->
mem_phaddr
, 
CORE
.
evítq
,Üoad);

113 
lﬂd
->
ö_evítq
 = 1;

114 
lﬂd
->
issued
 = 1;

115 
lﬂd
->
issue_whí
 = 
sim_cy˛e
;

118 
CORE
.
issued
[
lﬂd
->
u›
]++;

119 
CORE
.
lsq_ªads
++;

120 
CORE
.
rf_öt_ªads
 +
lﬂd
->
ph_öt_idï_cou¡
;

121 
CORE
.
rf_Â_ªads
 +
lﬂd
->
ph_Â_idï_cou¡
;

122 
THREAD
.
issued
[
lﬂd
->
u›
]++;

123 
THREAD
.
lsq_ªads
++;

124 
THREAD
.
rf_öt_ªads
 +
lﬂd
->
ph_öt_idï_cou¡
;

125 
THREAD
.
rf_Â_ªads
 +
lﬂd
->
ph_Â_idï_cou¡
;

126 
p
->
issued
[
lﬂd
->
u›
]++;

127 
qu™t
--;

130 
	`esim_debug
("uopáction=\"update\", core=%d, seq=%llu,"

132 
lﬂd
->
c‹e
, (Ëlﬂd->
di_£q
);

135  
qu™t
;

136 
	}
}

139 
	$issue_iq
(
c‹e
, 
thªad
, 
qu™t
)

141 
 li°_t
 *
iq
 = 
THREAD
.iq;

142 
u›_t
 *
u›
;

143 
œt
;

146 i‡(
esim_debug_fûe
)

147 
	`u›_ li°_check_if_ªady
(
iq
);

150 
	` li°_hód
(
iq
);

151 !
	` li°_eﬁ
(
iq
Ë&& 
qu™t
) {

154 
u›
 = 
	` li°_gë
(
iq
);

155 
	`as£π
(
	`u›_exi°s
(
u›
));

156 
	`as£π
(!(
u›
->
Êags
 & 
FMEM
));

157 i‡(!
u›
->
ªady
 && !
	`rf_ªady
(uop)) {

158 
	` li°_√xt
(
iq
);

161 
u›
->
ªady
 = 1;

165 i‡(!
u›
->
fu_˛ass
) {

166 
œt
 = 1;

168 
œt
 = 
	`fu_ª£rve
(
u›
);

169 i‡(!
œt
) {

170 
	` li°_√xt
(
iq
);

177 
	`iq_ªmove
(
c‹e
, 
thªad
);

180 
	`as£π
(!
u›
->
ö_evítq
);

181 
	`as£π
(
œt
 > 0);

182 
u›
->
issued
 = 1;

183 
u›
->
issue_whí
 = 
sim_cy˛e
;

184 
u›
->
whí
 = 
sim_cy˛e
 + 
œt
;

185 
	`evítq_ö£π
(
CORE
.
evítq
, 
u›
);

188 
CORE
.
issued
[
u›
->uop]++;

189 
CORE
.
iq_ªads
++;

190 
CORE
.
rf_öt_ªads
 +
u›
->
ph_öt_idï_cou¡
;

191 
CORE
.
rf_Â_ªads
 +
u›
->
ph_Â_idï_cou¡
;

192 
THREAD
.
issued
[
u›
->uop]++;

193 
THREAD
.
iq_ªads
++;

194 
THREAD
.
rf_öt_ªads
 +
u›
->
ph_öt_idï_cou¡
;

195 
THREAD
.
rf_Â_ªads
 +
u›
->
ph_Â_idï_cou¡
;

196 
p
->
issued
[
u›
->uop]++;

197 
qu™t
--;

200 
	`esim_debug
("uopáction=\"update\", core=%d, seq=%llu,"

202 
u›
->
c‹e
, (Ëu›->
di_£q
);

205  
qu™t
;

206 
	}
}

209 
	$issue_thªad_lsq
(
c‹e
, 
thªad
, 
qu™t
)

211 
qu™t
 = 
	`issue_lq
(
c‹e
, 
thªad
, quant);

212 
qu™t
 = 
	`issue_sq
(
c‹e
, 
thªad
, quant);

213  
qu™t
;

214 
	}
}

217 
	$issue_thªad_iq
(
c‹e
, 
thªad
, 
qu™t
)

219 
qu™t
 = 
	`issue_iq
(
c‹e
, 
thªad
, quant);

220  
qu™t
;

221 
	}
}

224 
	$issue_c‹e
(
c‹e
)

226 
skù
, 
qu™t
;

228 
p_issue_köd
) {

230 
p_issue_köd_sh¨ed
:

233 
qu™t
 = 
p_issue_width
;

234 
skù
 = 
p_thªads
;

236 
CORE
.
issue_cuºít
 = (CORE.issue_cuºíà+ 1Ë% 
p_thªads
;

237 
qu™t
 = 
	`issue_thªad_lsq
(
c‹e
, 
CORE
.
issue_cuºít
, quant);

238 
skù
--;

239 } 
skù
 && 
qu™t
);

242 
qu™t
 = 
p_issue_width
;

243 
skù
 = 
p_thªads
;

245 
CORE
.
issue_cuºít
 = (CORE.issue_cuºíà+ 1Ë% 
p_thªads
;

246 
qu™t
 = 
	`issue_thªad_iq
(
c‹e
, 
CORE
.
issue_cuºít
, quant);

247 
skù
--;

248 } 
skù
 && 
qu™t
);

252 
p_issue_köd_time¶i˚
:

255 
qu™t
 = 
p_issue_width
;

256 
skù
 = 
p_thªads
;

258 
CORE
.
issue_cuºít
 = (CORE.issue_cuºíà+ 1Ë% 
p_thªads
;

259 
qu™t
 = 
	`issue_thªad_lsq
(
c‹e
, 
CORE
.
issue_cuºít
, quant);

260 
skù
--;

261 } 
skù
 && 
qu™t
 =
p_issue_width
);

264 
qu™t
 = 
p_issue_width
;

265 
skù
 = 
p_thªads
;

267 
CORE
.
issue_cuºít
 = (CORE.issue_cuºíà+ 1Ë% 
p_thªads
;

268 
qu™t
 = 
	`issue_thªad_iq
(
c‹e
, 
CORE
.
issue_cuºít
, quant);

269 
skù
--;

270 } 
skù
 && 
qu™t
 =
p_issue_width
);

274 
	}
}

277 
	$p_issue
()

279 
c‹e
;

280 
p
->
°age
 = "issue";

281 
FOREACH_CORE


282 
	`issue_c‹e
(
c‹e
);

283 
	}
}

	@m2s-fast.c

21 
	~<›ti⁄s.h
>

22 
	~<sig«l.h
>

23 
	~<m2skî√l.h
>

27 #i‚de‡
VERSION


28 
	#VERSION
 ""

	)

33 *
	gsim_tôÀ
 = "";

34 *
	gc⁄figfûe
 = "";

35 *
	g˘xc⁄fig
 = "";

37 *
	g˘x_debug_fûe
 = "";

38 *
	gsysˇŒ_debug_fûe
 = "";

39 *
	g›í˛_debug_fûe
 = "";

40 *
	ggpu_iß_debug_fûe
 = "";

41 *
	gñf_debug_fûe
 = "";

42 *
	glﬂdî_debug_fûe
 = "";

43 *
	giß_ˇŒ_debug_fûe
 = "";

44 *
	giß_ö°_debug_fûe
 = "";

46 *
	gö°_°©_fûe
 = "";

47 *
	gö°_°›
 = "";

48 
uöt64_t
 
	gö°_ª£t
 = 0;

49 
uöt64_t
 
	gmax_cy˛es
 = 0;

50 
uöt64_t
 
	gmax_ö°
 = 0;

51 
uöt32_t
 
	gbªak_poöt
 = 0;

52 
uöt64_t
 
	gsim_cy˛e
 = 0;

53 
uöt64_t
 
	gsim_ö°
 = 0;

57 
	gsigöt_ª˚ived
 = 0;

61 
	$sim_ªg_›ti⁄s
()

63 
	`›t_ªg_°rög
("-tôÀ", "Simuœti⁄ÅôÀ", &
sim_tôÀ
);

64 
	`›t_ªg_°rög
("-c⁄fig", "m2s-Á° c⁄figuøti⁄ fûe", &
c⁄figfûe
);

65 
	`›t_ªg_°rög
("-˘xc⁄fig", "C⁄ãxàc⁄figuøti⁄ fûe", &
˘xc⁄fig
);

67 
	`›t_ªg_°rög
("-debug:˘x", "Debug inf‹m©i⁄ f‹ c⁄ãxà¸óti⁄ & sètu†upd©es", &
˘x_debug_fûe
);

68 
	`›t_ªg_°rög
("-debug:sysˇŒ", "Debug inf‹m©i⁄ f‹ sy°em cÆls", &
sysˇŒ_debug_fûe
);

69 
	`›t_ªg_°rög
("-debug:›í˛", "Debug inf‹m©i⁄ f‹ O≥nCLÖrogøms", &
›í˛_debug_fûe
);

70 
	`›t_ªg_°rög
("-debug:gpu_iß", "Debug inf‹m©i⁄ f‹ GPU in°ru˘i⁄s", &
gpu_iß_debug_fûe
);

71 
	`›t_ªg_°rög
("-debug:ñf", "Debug inf‹m©i⁄ fromÉl‡fûê™Æyzî", &
ñf_debug_fûe
);

72 
	`›t_ªg_°rög
("-debug:lﬂdî", "Debug inf‹m©i⁄ fromÖrogømÜﬂdî", &
lﬂdî_debug_fûe
);

73 
	`›t_ªg_°rög
("-debug:ˇŒ", "Debug inf‹m©i⁄ábouà¥o˚duª cÆls", &
iß_ˇŒ_debug_fûe
);

74 
	`›t_ªg_°rög
("-debug:ö°", "Debug inf‹m©i⁄ábouàexecuãd in°ru˘i⁄s", &
iß_ö°_debug_fûe
);

76 
	`›t_ªg_°rög
("-ö°_°©", "Fûêtÿdum∞ö°ru˘i⁄ sèts", &
ö°_°©_fûe
);

77 
	`›t_ªg_°rög
("-ö°_°›", "St› whíÉxecutög in°", &
ö°_°›
);

78 
	`›t_ªg_uöt64
("-ö°_ª£t", "Cy˛êtÿª£àö°ru˘i⁄ sèts", &
ö°_ª£t
);

79 
	`›t_ªg_uöt64
("-max_cy˛es", "Cy˛êtÿ°›Örogøm (0Úÿ°›)", &
max_cy˛es
);

80 
	`›t_ªg_uöt64
("-max_ö°", "MaximumÇumbî o‡ö°ru˘i⁄s", &
max_ö°
);

81 
	`›t_ªg_uöt32
("-bªak_poöt", "VÆuêf‹ÉùÅÿ°›", &
bªak_poöt
);

82 
	`›t_ªg_boﬁ
("-mem_ß„_mode", "Sa„ác˚s£†tÿmem‹y", &
mem_ß„_mode
);

84 
	`gk_ªg_›ti⁄s
();

85 
	}
}

89 
	$sim_sig«l_h™dÀr
(
signum
)

91 
FILE
 *
f
;

93 
signum
) {

95 
SIGINT
:

96 i‡(
sigöt_ª˚ived
)

97 
	`ab‹t
();

98 
sigöt_ª˚ived
 = 1;

99 
	`Ârötf
(
°dîr
, "SIGINTÑeceived\n");

102 
SIGABRT
:

103 
	`sig«l
(
SIGABRT
, 
SIG_DFL
);

104 
	`Ârötf
(
°dîr
, "cy˛ê%Œd:áb‹ãd\n", (Ë
sim_cy˛e
);

105 
f
 = 
	`›í_wrôe
(
ö°_°©_fûe
);

106 i‡(
f
)

107 
	`iß_ö°_°©_dump
(
f
);

108 
	`iß_dump
(
°dîr
);

109 
	`ke_dump
(
°dîr
);

110 
	`exô
(1);

113 
	}
}

116 
	$maö
(
¨gc
, **
¨gv
)

118 
uöt64_t
 
t
;

121 
¨gc
 = 2;

122 
¨gv
[0] = "myself";

123 
¨gv
[1] = "/home/prajakta/praj_multi2sim_RandD/guestos_multi2sim/mytest/hello";

124 
	`Ârötf
(
°dîr
,"\n WelcomeÅo guestos\n");

130 
	`›t_öô
();

131 
	`sim_ªg_›ti⁄s
();

139 
	`ke_öô
();

152 
	`ö°Æl_sy°emˇŒ
();

156 i‡(*
˘xc⁄fig
)

157 
	`ld_lﬂd_¥og_‰om_˘xc⁄fig
(
˘xc⁄fig
);

158 i‡(
¨gc
 > 1)

159 
	`ld_lﬂd_¥og_‰om_cmdlöe
(
¨gc
 - 1, 
¨gv
 + 1);

164 
	`sig«l
(
SIGINT
, &
sim_sig«l_h™dÀr
);

165 
	`sig«l
(
SIGABRT
, &
sim_sig«l_h™dÀr
);

166 !
sigöt_ª˚ived
) {

169 i‡(
bªak_poöt
 && 
ke
->
c⁄ãxt_li°_hód
->
ªgs
->
eù
 == break_point) {

170 
	`ªgs_dump
(
ke
->
c⁄ãxt_li°_hód
->
ªgs
, 
°dout
);

175 
	`ke_run
();

176 
sim_ö°
 +
ke
->
ru¬ög_cou¡
;

177 i‡(!
ke
->
c⁄ãxt_li°_hód
)

181 
sim_cy˛e
++;

182 i‡((
sim_cy˛e
 >
max_cy˛es
 && max_cycles) ||

183 (
sim_ö°
 >
max_ö°
 && max_inst))

185 
	`ªgs_dump
(
iß_ªgs
, 
°dout
);

186 
	`ke_dump
(
°dout
);

189 i‡(
sim_cy˛e
 =
ö°_ª£t
 && inst_reset)

190 
	`iß_ö°_°©_ª£t
();

192 i‡(*
ö°_°›
 && !
	`°rcmp
(
iß_ö°
.
f‹m©
, inst_stop))

193 
	`∑nic
("ö°ru˘i⁄ '%s' found", 
ö°_°›
);

229 
	`ke_d⁄e
();

232 
	`mh™dÀ_d⁄e
();

234 
	}
}

	@m2s-objdump.c

20 
	~<›ti⁄s.h
>

21 
	~<m2skî√l.h
>

25 
uöt32_t
 
	g°¨t_addªss
 = 0;

26 
uöt32_t
 
	g°›_addªss
 = 0;

30 
	$sim_ªg_›ti⁄s
()

32 
	`›t_ªg_uöt32
("-°¨t_addªss", "addªs†tÿ°¨àdump", &
°¨t_addªss
);

33 
	`›t_ªg_uöt32
("-°›_addªss", "addªs†tÿ°› dump", &
°›_addªss
);

34 
	}
}

37 
	$sim_dump_£˘i⁄
(*
buf
, 
uöt32_t
 
addr
, 
size
)

39 
uöt32_t
 
°¨t
, 
°›
, 
off£t
;

40 
x86_ö°_t
 
ö°
;

42 
°¨t
 = 
°¨t_addªss
 > 
addr
 ? start_address -áddr : 0;

43 i‡(!
°›_addªss
 || st›_addªs†>
addr
 + 
size
 - 1)

44 
°›
 = 
size
 - 1;

46 
°›
 = 
°›_addªss
 - 
addr
;

48 
off£t
 = 
°¨t
; off£à<
°›
; off£à+
ö°
.
size
) {

49 
	`x86_dißsm
(
buf
 + 
off£t
, 
addr
 + off£t, &
ö°
);

50 
	`¥ötf
("%x ", 
addr
 + 
off£t
);

51 i‡(
ö°
.
›code
 =
›_n⁄e
) {

52 
	`¥ötf
("???\n");

55 
	`x86_ö°_dump
(&
ö°
, 
°dout
);

56 
	`¥ötf
("\n");

58 
	}
}

61 
	$sim_dump
(*
fûe
)

63 
ñf_fûe_t
 *
ñf
;

64 *
buf
;

65 
uöt32_t
 
addr
, 
size
, 
Êags
;

66 *
«me
;

67 
i
;

70 
ñf
 = 
	`ñf_›í
(
fûe
);

71 i‡(!
ñf
)

72 
	`Áèl
("%s: c™nŸ o≥¿fûe", 
fûe
);

75 
i
 = 0; i < 
	`ñf_£˘i⁄_cou¡
(
ñf
); i++) {

76 
	`ñf_£˘i⁄_öfo
(
ñf
, 
i
, &
«me
, &
addr
, &
size
, &
Êags
);

77 i‡(!(
Êags
 & 
SHF_EXECINSTR
))

81 i‡(
°›_addªss
 && st›_addªs†< 
addr
)

83 i‡(
°¨t_addªss
 >
addr
 + 
size
)

87 
buf
 = 
	`ñf_£˘i⁄_ªad
(
ñf
, 
i
);

88 
	`sim_dump_£˘i⁄
(
buf
, 
addr
, 
size
);

89 
	`ñf_‰ì_buf„r
(
buf
);

91 
	}
}

94 
	$maö
(
¨gc
, **
¨gv
)

97 
	`Ârötf
(
°dîr
, "\nMulti2Sim. Executable file dumper (m2s-objdump)\n");

98 
	`Ârötf
(
°dîr
, "La° compû©i⁄: %†%s\n\n", 
__DATE__
, 
__TIME__
);

101 
	`›t_öô
();

102 
	`sim_ªg_›ti⁄s
();

103 
	`›t_check_›ti⁄s
(&
¨gc
, 
¨gv
);

104 
	`›t_¥öt_›ti⁄s
(
°dîr
);

106 i‡(
¨gc
 != 2) {

107 
	`Ârötf
(
°dîr
, "syntax: m2s-objdump [<options>] <file>\n");

108 
	`exô
(1);

111 
	`dißsm_öô
();

112 
	`sim_dump
(
¨gv
[1]);

113 
	`dißsm_d⁄e
();

115 
	`›t_d⁄e
();

117 
	}
}

	@m2s.c

20 
	~<m2s.h
>

24 #i‚de‡
VERSION


25 
	#VERSION
 ""

	)

30 
	gsigöt_ª˚ived
 = 0;

31 
	gsigu§_ª˚ived
 = 0;

32 
	gsigÆrm_öãrvÆ
 = 30;

33 
uöt64_t
 
	gœ°_sigÆrm_cy˛e
 = 0;

37 
uöt64_t
 
	gmax_cy˛es
 = 0;

38 
uöt64_t
 
	gmax_ö°
 = 0;

39 
uöt64_t
 
	gmax_time
 = 0;

40 
uöt64_t
 
	gÁ°fwd
;

41 *
	g˘xfûe
 = "";

42 *
	gc⁄figfûe
 = "";

43 *
	gsim_tôÀ
 = "";

45 *
	g˘x_debug_fûe_«me
 = "";

46 *
	gsysˇŒ_debug_fûe_«me
 = "";

47 *
	g›í˛_debug_fûe_«me
 = "";

48 *
	ggpu_iß_debug_fûe
 = "";

49 *
	glﬂdî_debug_fûe_«me
 = "";

50 *
	giß_ˇŒ_debug_fûe_«me
 = "";

51 *
	giß_ö°_debug_fûe_«me
 = "";

52 *
	gˇche_debug_fûe_«me
 = "";

53 *
	gesim_debug_fûe_«me
 = "";

54 *
	gîr‹_debug_fûe_«me
 = "";

58 
uöt64_t
 
	gsim_cy˛e
;

59 
uöt64_t
 
	gsim_ö°
;

63 
	gîr‹_debug_ˇãg‹y
;

68 
	$sim_ªg_›ti⁄s
()

70 
	`›t_ªg_°rög
("-tôÀ", "Simuœti⁄ÅôÀ", &
sim_tôÀ
);

71 
	`›t_ªg_°rög
("-c⁄fig", "Pro˚ss‹ c⁄figuøti⁄ fûe", &
c⁄figfûe
);

72 
	`›t_ªg_°rög
("-˘xc⁄fig", "C⁄ãxàc⁄figuøti⁄ fûe", &
˘xfûe
);

74 
	`›t_ªg_uöt64
("-max_cy˛es", "Cy˛êtÿ°›Örogøm (0Úÿ°›)", &
max_cy˛es
);

75 
	`›t_ªg_uöt64
("-max_ö°", "MaxÇumbî o‡ªtúìd in°ru˘i⁄†(0Úÿmax)", &
max_ö°
);

76 
	`›t_ªg_uöt64
("-max_time", "MaxÑu¬ögÅimê(ö sec⁄ds)", &
max_time
);

77 
	`›t_ªg_uöt64
("-Á°fwd", "Cy˛e†tÿru¿wôh fa° simuœti⁄", &
Á°fwd
);

79 
	`›t_ªg_°rög
("-debug:˘x", "Debug inf‹m©i⁄ f‹ c⁄ãxà¸óti⁄ & sètu†upd©es", &
˘x_debug_fûe_«me
);

80 
	`›t_ªg_°rög
("-debug:sysˇŒ", "Debug inf‹m©i⁄ f‹ sy°em cÆls", &
sysˇŒ_debug_fûe_«me
);

81 
	`›t_ªg_°rög
("-debug:›í˛", "Debug inf‹m©i⁄ f‹ O≥nCLÖrogøms", &
›í˛_debug_fûe_«me
);

82 
	`›t_ªg_°rög
("-debug:gpu_iß", "Debug inf‹m©i⁄ f‹ GPU in°ru˘i⁄s", &
gpu_iß_debug_fûe
);

83 
	`›t_ªg_°rög
("-debug:lﬂdî", "Debug inf‹m©i⁄ fromÖrogømÜﬂdî", &
lﬂdî_debug_fûe_«me
);

84 
	`›t_ªg_°rög
("-debug:ˇŒ", "Debug inf‹m©i⁄ábouà¥o˚duª cÆls", &
iß_ˇŒ_debug_fûe_«me
);

85 
	`›t_ªg_°rög
("-debug:ö°", "Debug inf‹m©i⁄ábouàexecuãd in°ru˘i⁄s", &
iß_ö°_debug_fûe_«me
);

86 
	`›t_ªg_°rög
("-debug:ˇche", "Debug inf‹m©i⁄ f‹ cachêsy°em", &
ˇche_debug_fûe_«me
);

87 
	`›t_ªg_°rög
("-debug:pùñöe", "Debug inf‹m©i⁄ f‹Öùñöe", &
esim_debug_fûe_«me
);

88 
	`›t_ªg_°rög
("-debug:îr‹", "Debug inf‹m©i⁄á·îÉº‹s", &
îr‹_debug_fûe_«me
);

90 
	`›t_ªg_°rög
("-ªp‹t:pùñöe", "Rï‹àf‹Öùñöê°©i°ics", &
p_ªp‹t_fûe
);

91 
	`›t_ªg_°rög
("-ªp‹t:ˇche", "Rï‹àf‹ cachêsy°em", &
ˇche_sy°em_ªp‹t_fûe
);

93 
	`gk_ªg_›ti⁄s
();

94 
	}
}

98 
	$sim_dump_log
()

100 
FILE
 *
f
;

101 
«me
[100];

104 
	`•rötf
(
«me
, "m2s.%d.%Œd", (Ë
	`gëpid
(), (Ë
sim_cy˛e
);

105 
f
 = 
	`f›í
(
«me
, "wt");

106 i‡(
f
) {

107 
	`p_¥öt_°©s
(
f
);

108 
	`p_dump
(
f
);

109 
	`f˛o£
(
f
);

113 
sigu§_ª˚ived
 = 0;

114 
	}
}

118 
	$sim_sig«l_h™dÀr
(
signum
)

120 
signum
) {

122 
SIGINT
:

123 i‡(
sigöt_ª˚ived
)

124 
	`ab‹t
();

125 
sigöt_ª˚ived
 = 1;

126 
	`p_dump
(
°dîr
);

127 
	`Ârötf
(
°dîr
, "SIGINTÑeceived\n");

130 
SIGALRM
:

131 i‡(
sim_cy˛e
 - 
œ°_sigÆrm_cy˛e
 == 0)

132 
	`∑nic
("simuœt‹ sèŒed i¿°agê%s", 
p
->
°age
);

133 
œ°_sigÆrm_cy˛e
 = 
sim_cy˛e
;

134 
	`Æ¨m
(
sigÆrm_öãrvÆ
);

137 
SIGABRT
:

138 
	`sig«l
(
SIGABRT
, 
SIG_DFL
);

139 i‡(
	`debug_°©us
(
îr‹_debug_ˇãg‹y
)) {

140 
	`p_¥öt_°©s
(
	`debug_fûe
(
îr‹_debug_ˇãg‹y
));

141 
	`p_dump
(
	`debug_fûe
(
îr‹_debug_ˇãg‹y
));

143 
	`exô
(1);

146 
SIGUSR2
:

147 
sigu§_ª˚ived
 = 1;

150 
	}
}

153 
	$maö
(
¨gc
, **
¨gv
)

156 
	`›t_öô
();

157 
	`sim_ªg_›ti⁄s
();

158 
	`p_ªg_›ti⁄s
();

159 
	`ˇche_sy°em_ªg_›ti⁄s
();

160 
	`›t_check_›ti⁄s
(&
¨gc
, 
¨gv
);

161 i‡(*
c⁄figfûe
)

162 
	`›t_check_c⁄fig
(
c⁄figfûe
);

165 
	`Ârötf
(
°dîr
, "\nMu…i2Sim %†- Mu…ic‹êMu…ôhªaded Pro˚ss‹ Simuœt‹\n",
VERSION
);

166 
	`Ârötf
(
°dîr
, "La° compû©i⁄: %†%s\n\n", 
__DATE__
, 
__TIME__
);

167 
	`›t_¥öt_›ti⁄s
(
°dîr
);

170 
	`u›_öô
();

171 
	`esim_öô
();

172 
	`√t_öô
();

173 
	`ˇche_sy°em_öô
(
p_c‹es
, 
p_thªads
);

174 
	`ke_öô
();

177 
	`debug_öô
();

178 
îr‹_debug_ˇãg‹y
 = 
	`debug_√w_ˇãg‹y
();

179 
	`debug_assign_fûe
(
˘x_debug_ˇãg‹y
, 
˘x_debug_fûe_«me
);

180 
	`debug_assign_fûe
(
sysˇŒ_debug_ˇãg‹y
, 
sysˇŒ_debug_fûe_«me
);

181 
	`debug_assign_fûe
(
›í˛_debug_ˇãg‹y
, 
›í˛_debug_fûe_«me
);

182 
	`debug_assign_fûe
(
gpu_iß_debug_ˇãg‹y
, 
gpu_iß_debug_fûe
);

183 
	`debug_assign_fûe
(
ld_debug_ˇãg‹y
, 
lﬂdî_debug_fûe_«me
);

184 
	`debug_assign_fûe
(
iß_ˇŒ_debug_ˇãg‹y
, 
iß_ˇŒ_debug_fûe_«me
);

185 
	`debug_assign_fûe
(
iß_ö°_debug_ˇãg‹y
, 
iß_ö°_debug_fûe_«me
);

186 
	`debug_assign_fûe
(
ˇche_debug_ˇãg‹y
, 
ˇche_debug_fûe_«me
);

187 
	`debug_assign_fûe
(
îr‹_debug_ˇãg‹y
, 
îr‹_debug_fûe_«me
);

188 
	`esim_debug_öô
(
esim_debug_fûe_«me
);

191 
	`p_öô
();

192 
	`p_lﬂd_¥ogs
(
¨gc
, 
¨gv
, 
˘xfûe
);

198 
	`p_Á°_f‹w¨d
(
Á°fwd
);

201 
	`sig«l
(
SIGINT
, &
sim_sig«l_h™dÀr
);

202 
	`sig«l
(
SIGABRT
, &
sim_sig«l_h™dÀr
);

203 
	`sig«l
(
SIGUSR1
, &
sim_sig«l_h™dÀr
);

204 
	`sig«l
(
SIGUSR2
, &
sim_sig«l_h™dÀr
);

205 
	`sig«l
(
SIGALRM
, &
sim_sig«l_h™dÀr
);

206 
	`Æ¨m
(
sigÆrm_öãrvÆ
);

208 
ke
->
föished_cou¡
 < ke->
c⁄ãxt_cou¡
) {

211 
sim_cy˛e
++;

214 
	`p_°ages
();

217 
	`ke_¥o˚ss_evíts
();

220 
	`esim_¥o˚ss_evíts
();

224 i‡(
sigöt_ª˚ived
)

226 i‡(
max_cy˛es
 && 
sim_cy˛e
 >= max_cycles)

228 i‡(
max_ö°
 && 
sim_ö°
 >= max_inst)

230 i‡(
max_time
 && !(
sim_cy˛e
 % 10000Ë&& 
	`ke_timî
() > max_time * 1000000)

234 i‡(
sigu§_ª˚ived
)

235 
	`sim_dump_log
();

237 
	`sig«l
(
SIGALRM
, 
SIG_IGN
);

238 
	`sig«l
(
SIGABRT
, 
SIG_DFL
);

241 
	`esim_≥ndög
(Ë&& 
esim_cy˛e
 < 
sim_cy˛e
 + (1<<20))

242 
	`esim_¥o˚ss_evíts
();

243 
	`esim_debug_d⁄e
();

246 
	`Ârötf
(
°dîr
, "\n");

247 
	`›t_d⁄e
();

248 
	`p_d⁄e
();

249 
	`ke_d⁄e
();

250 
	`u›_d⁄e
();

251 
	`ˇche_sy°em_d⁄e
();

252 
	`√t_d⁄e
();

253 
	`esim_d⁄e
();

254 
	`debug_d⁄e
();

255 
	`Ârötf
(
°dîr
, "\n");

256 
	`mh™dÀ_d⁄e
();

258 
	}
}

	@m2s.h

20 
	~<time.h
>

21 
	~<›ti⁄s.h
>

22 
	~<sig«l.h
>

23 
	~<li°.h
>

24 
	~< li°.h
>

25 
	~<ªpos.h
>

26 
	~<ˇchesy°em.h
>

27 
	~<m2skî√l.h
>

32 
uöt64_t
 
sim_cy˛e
;

33 
uöt64_t
 
sim_ö°
;

37 **
ívú⁄
;

41 
	#îr‹_debug
(...Ë
	`debug
(
îr‹_debug_ˇãg‹y
, 
__VA_ARGS__
)

	)

42 
îr‹_debug_ˇãg‹y
;

48 *
p_ªp‹t_fûe
;

49 
p_°age_time_°©s
;

50 
uöt32_t
 
p_c‹es
;

51 
uöt32_t
 
p_thªads
;

52 
uöt32_t
 
p_˝us
;

53 
uöt32_t
 
p_c⁄ãxt_qu™tum
;

54 
uöt32_t
 
p_thªad_qu™tum
;

55 
uöt32_t
 
p_thªad_swôch_≥«…y
;

58 
	ep_ªcovî_köd_íum
 {

59 
p_ªcovî_köd_wrôeback
 = 0,

60 
p_ªcovî_köd_commô


61 } 
p_ªcovî_köd
;

62 
uöt32_t
 
p_ªcovî_≥«…y
;

65 
	ep_„tch_köd_íum
 {

66 
p_„tch_köd_sh¨ed
 = 0,

67 
p_„tch_köd_time¶i˚
,

68 
p_„tch_köd_swôch⁄evít


69 } 
p_„tch_köd
;

72 
uöt32_t
 
p_decode_width
;

75 
	ep_di•©ch_köd_íum
 {

76 
p_di•©ch_köd_sh¨ed
 = 0,

77 
p_di•©ch_köd_time¶i˚
,

78 } 
p_di•©ch_köd
;

79 
uöt32_t
 
p_di•©ch_width
;

82 
	ep_issue_köd_íum
 {

83 
p_issue_köd_sh¨ed
 = 0,

84 
p_issue_köd_time¶i˚
,

85 } 
p_issue_köd
;

86 
uöt32_t
 
p_issue_width
;

89 
	ep_commô_köd_íum
 {

90 
p_commô_köd_sh¨ed
 = 0,

91 
p_commô_köd_time¶i˚


92 } 
p_commô_köd
;

93 
uöt32_t
 
p_commô_width
;

100 
	gmm_t
;

102 
mm_t
 *
mm_¸óã
();

103 
mm_‰ì
(
mm_t
 *
mm
);

104 
mm_å™¶©e
(
mm_t
 *
mm
, 
˘x
, 
uöt32_t
 
vé_addr
, uöt32_à*
phaddr
);

105 
mm_πøn¶©e
(
mm_t
 *
mm
, 
uöt32_t
 
phaddr
, *
˘x
, uöt32_à*
véaddr
);

112 
	edï_íum
 {

114 
	mDNONE
 = 0,

118 
	mDEAX
 = 0x01,

119 
	mDECX
 = 0x02,

120 
	mDEDX
 = 0x03,

121 
	mDEBX
 = 0x04,

122 
	mDESP
 = 0x05,

123 
	mDEBP
 = 0x06,

124 
	mDESI
 = 0x07,

125 
	mDEDI
 = 0x08,

127 
	mDES
 = 0x09,

128 
	mDCS
 = 0x0a,

129 
	mDSS
 = 0x0b,

130 
	mDDS
 = 0x0c,

131 
	mDFS
 = 0x0d,

132 
	mDGS
 = 0x0e,

134 
	mDZPS
 = 0x0f,

135 
	mDOF
 = 0x10,

136 
	mDCF
 = 0x11,

137 
	mDDF
 = 0x12,

139 
	mDAUX
 = 0x13,

140 
	mDAUX2
 = 0x14,

141 
	mDEA
 = 0x15,

142 
	mDDATA
 = 0x16,

144 
	mDEP_INT_FIRST
 = 
DEAX
,

145 
	mDEP_INT_LAST
 = 
DDATA
,

146 
	mDEP_INT_COUNT
 = 
DEP_INT_LAST
 - 
DEP_INT_FIRST
 + 1,

148 
	mDEP_FLAG_FIRST
 = 
DZPS
,

149 
	mDEP_FLAG_LAST
 = 
DDF
,

150 
	mDEP_FLAG_COUNT
 = 
DEP_FLAG_LAST
 - 
DEP_FLAG_FIRST
 + 1,

155 
	mDST0
 = 0x17,

156 
	mDST1
 = 0x18,

157 
	mDST2
 = 0x19,

158 
	mDST3
 = 0x1a,

159 
	mDST4
 = 0x1b,

160 
	mDST5
 = 0x1c,

161 
	mDST6
 = 0x1d,

162 
	mDST7
 = 0x1e,

163 
	mDFPST
 = 0x1f,

164 
	mDFPCW
 = 0x20,

165 
	mDFPAUX
 = 0x21,

167 
	mDEP_FP_FIRST
 = 
DST0
,

168 
	mDEP_FP_LAST
 = 
DFPAUX
,

169 
	mDEP_FP_COUNT
 = 
DEP_FP_LAST
 - 
DEP_FP_FIRST
 + 1,

171 
	mDEP_FP_STACK_FIRST
 = 
DST0
,

172 
	mDEP_FP_STACK_LAST
 = 
DST7
,

173 
	mDEP_FP_STACK_COUNT
 = 
DEP_FP_STACK_LAST
 - 
DEP_FP_STACK_FIRST
 + 1,

178 
	mDRM8
 = 0x100,

179 
	mDRM16
 = 0x101,

180 
	mDRM32
 = 0x102,

181 
	mDIR8
 = 0x200,

182 
	mDIR16
 = 0x201,

183 
	mDIR32
 = 0x202,

184 
	mDR8
 = 0x300,

185 
	mDR16
 = 0x301,

186 
	mDR32
 = 0x302,

187 
	mDSREG
 = 0x400,

188 
	mDMEM
 = 0x500,

189 
	mDEASEG
 = 0x501,

190 
	mDEABAS
 = 0x502,

191 
	mDEAIDX
 = 0x503,

192 
	mDSTI
 = 0x600,

193 
	mDFPOP
 = 0x601,

194 
	mDFPOP2
 = 0x602,

195 
	mDFPUSH
 = 0x603

198 
	#DEP_IS_INT_REG
(
dï
Ë((dïË>
DEP_INT_FIRST
 && (dïË<
DEP_INT_LAST
)

	)

199 
	#DEP_IS_FP_REG
(
dï
Ë((dïË>
DEP_FP_FIRST
 && (dïË<
DEP_FP_LAST
)

	)

200 
	#DEP_IS_FLAG
(
dï
Ë((dïË>
DEP_FLAG_FIRST
 && (dïË<
DEP_FLAG_LAST
)

	)

201 
	#DEP_IS_VALID
(
dï
Ë(
	`DEP_IS_INT_REG
(dïË|| 
	`DEP_IS_FP_REG
(dï))

	)

203 
	eu›_íum
 {

204 
	#UOP
(
_u›
, 
_fu
, 
_Êags
Ë
u›_
##_u›,

	)

205 
	~"u›1.d©
"

206 #unde‡
UOP


207 
	mu›_cou¡


210 
	efu_˛ass_íum
 {

211 
	mfu_n⁄e
 = 0,

212 
	mfu_öèdd
,

213 
	mfu_ötsub
,

214 
	mfu_ötmu…
,

215 
	mfu_ötdiv
,

216 
	mfu_efÁddr
,

217 
	mfu_logiˇl
,

219 
	mfu_Âsim∂e
,

220 
	mfu_Âadd
,

221 
	mfu_Âcomp
,

222 
	mfu_Âmu…
,

223 
	mfu_Âdiv
,

224 
	mfu_Âcom∂ex
,

226 
	mfu_cou¡


229 
	eu›_Êags_íum
 {

230 
	mFICOMP
 = 0x001,

231 
	mFLCOMP
 = 0x002,

232 
	mFFCOMP
 = 0x004,

233 
	mFMEM
 = 0x008,

234 
	mFLOAD
 = 0x010,

235 
	mFSTORE
 = 0x020,

236 
	mFCTRL
 = 0x040,

237 
	mFCALL
 = 0x080,

238 
	mFRET
 = 0x100,

239 
	mFCOND
 = 0x200

242 
	#IDEP_COUNT
 3

	)

243 
	#ODEP_COUNT
 4

	)

245 
	su›_t
 {

248 
	m«me
[40];

249 
u›_íum
 
	mu›
;

250 
˘x_t
 *
	m˘x
;

251 
	mc‹e
, 
	mthªad
;

252 
uöt64_t
 
	m£q
;

253 
uöt64_t
 
	mdi_£q
;

254 
uöt32_t
 
	meù
;

255 
uöt32_t
 
	m√ù
;

256 
uöt32_t
 
	m¥ed_√ù
;

257 
uöt32_t
 
	mèrgë_√ù
;

258 
	m•ecmode
;

259 
uöt64_t
 
	m„tch_ac˚ss
;

262 
	mm›_«me
[40];

263 
	mm›_ödex
;

264 
	mm›_cou¡
;

265 
	mm›_size
;

266 
uöt64_t
 
	mm›_£q
;

269 
	midï_cou¡
;

270 
	modï_cou¡
;

271 
	midï
[
IDEP_COUNT
];

272 
	modï
[
ODEP_COUNT
];

275 
	mph_öt_idï_cou¡
, 
	mph_Â_idï_cou¡
;

276 
	mph_öt_odï_cou¡
, 
	mph_Â_odï_cou¡
;

277 
	mph_idï
[
IDEP_COUNT
];

278 
	mph_odï
[
ODEP_COUNT
];

279 
	mph_oodï
[
ODEP_COUNT
];

282 
	m„tch_tˇche
;

285 
	mfu_˛ass
;

286 
	mÊags
;

289 
	mö_„tchq
 : 1;

290 
	mö_u›q
 : 1;

291 
	mö_iq
 : 1;

292 
	mö_lq
 : 1;

293 
	mö_sq
 : 1;

294 
	mö_evítq
 : 1;

295 
	mö_rob
 : 1;

298 
	mªady
;

299 
	missued
;

300 
	mcom∂ëed
;

303 
uöt32_t
 
	mmem_véaddr
;

304 
uöt32_t
 
	mmem_phaddr
;

307 
uöt64_t
 
	mwhí
;

308 
uöt64_t
 
	missue_åy_whí
;

309 
uöt64_t
 
	missue_whí
;

312 
	m¥ed
;

313 
	mbimod_ödex
, 
	mbimod_¥ed
;

314 
	mtwﬁevñ_bht_ödex
, 
	mtwﬁevñ_pht_row
, 
	mtwﬁevñ_pht_cﬁ
, 
	mtwﬁevñ_¥ed
;

315 
	mchoi˚_ödex
, 
	mchoi˚_¥ed
;

318 
u›_öô
();

319 
u›_d⁄e
();

321 
u›_li°_dump
(
li°_t
 *
u›_li°
, 
FILE
 *
f
);

322 
u›_ li°_dump
(
 li°_t
 *
u›_li°
, 
FILE
 *
f
);

323 
u›_ li°_check_if_ªady
(
 li°_t
 *
u›_li°
);

324 
u›_t
 *
u›_decode
(
li°_t
 *
li°
);

326 
u›_‰ì_if_nŸ_queued
(
u›_t
 *
u›
);

327 
u›_dump_buf
(
u›_t
 *
u›
, *
buf
, 
size
);

328 
u›_dump
(
u›_t
 *
u›
, 
FILE
 *
f
);

329 
u›_exi°s
(
u›_t
 *
u›
);

336 
	#FU_RES_MAX
 10

	)

338 
	sfu_t
 {

339 
uöt64_t
 
	mcy˛e_whí_‰ì
[
fu_cou¡
][
FU_RES_MAX
];

340 
uöt64_t
 
	mac˚s£s
[
fu_cou¡
];

341 
uöt64_t
 
	mdíõd
[
fu_cou¡
];

342 
uöt64_t
 
	mwaôög_time
[
fu_cou¡
];

345 
fu_ªg_›ti⁄s
();

346 
fu_öô
();

347 
fu_d⁄e
();

349 
fu_ª£rve
(
u›_t
 *
u›
);

350 
fu_ªÀa£
(
c‹e
);

357 
uöt32_t
 
„tchq_size
;

359 
„tchq_ªg_›ti⁄s
();

360 
„tchq_öô
();

361 
„tchq_d⁄e
();

363 
„tchq_ªcovî
(
c‹e
, 
thªad
);

364 
u›_t
 *
„tchq_ªmove
(
c‹e
, 
thªad
, 
ödex
);

371 
uöt32_t
 
u›q_size
;

373 
u›q_ªg_›ti⁄s
();

374 
u›q_öô
();

375 
u›q_d⁄e
();

377 
u›q_ªcovî
(
c‹e
, 
thªad
);

384 
uöt32_t
 
rob_size
;

385 
	erob_köd_íum
 {

386 
rob_köd_¥iv©e
 = 0,

387 
rob_köd_sh¨ed


388 } 
rob_köd
;

390 
rob_ªg_›ti⁄s
();

391 
rob_öô
();

392 
rob_d⁄e
();

393 
rob_dump
(
c‹e
, 
FILE
 *
f
);

395 
rob_ˇn_íqueue
(
u›_t
 *
u›
);

396 
rob_íqueue
(
u›_t
 *
u›
);

397 
rob_ˇn_dequeue
(
c‹e
, 
thªad
);

398 
u›_t
 *
rob_hód
(
c‹e
, 
thªad
);

399 
rob_ªmove_hód
(
c‹e
, 
thªad
);

400 
u›_t
 *
rob_èû
(
c‹e
, 
thªad
);

401 
rob_ªmove_èû
(
c‹e
, 
thªad
);

402 
u›_t
 *
rob_gë
(
c‹e
, 
thªad
, 
ödex
);

409 
uöt32_t
 
iq_size
;

410 
	eiq_köd_íum
 {

411 
iq_köd_sh¨ed
 = 0,

412 
iq_köd_¥iv©e


413 } 
iq_köd
;

416 
iq_ªg_›ti⁄s
();

417 
iq_öô
();

418 
iq_d⁄e
();

420 
iq_ˇn_ö£π
(
u›_t
 *
u›
);

421 
iq_ö£π
(
u›_t
 *
u›
);

422 
iq_ªmove
(
c‹e
, 
thªad
);

423 
iq_ªcovî
(
c‹e
, 
thªad
);

430 
uöt32_t
 
lsq_size
;

432 
	elsq_köd_íum
 {

433 
lsq_köd_sh¨ed
 = 0,

434 
lsq_köd_¥iv©e


435 } 
lsq_köd
;

437 
lsq_ªg_›ti⁄s
();

438 
lsq_öô
();

439 
lsq_d⁄e
();

441 
lsq_ˇn_ö£π
(
u›_t
 *
u›
);

442 
lsq_ö£π
(
u›_t
 *
u›
);

443 
lsq_ªcovî
(
c‹e
, 
thªad
);

445 
lq_ªmove
(
c‹e
, 
thªad
);

446 
sq_ªmove
(
c‹e
, 
thªad
);

453 
evítq_öô
();

454 
evítq_d⁄e
();

456 
evítq_l⁄gœt
(
c‹e
, 
thªad
);

457 
evítq_ˇchemiss
(
c‹e
, 
thªad
);

458 
evítq_ö£π
(
 li°_t
 *
evítq
, 
u›_t
 *
u›
);

459 
u›_t
 *
evítq_exåa˘
(
 li°_t
 *
evítq
);

460 
evítq_ªcovî
(
c‹e
, 
thªad
);

466 
	#RF_MIN_INT_SIZE
 (
DEP_INT_COUNT
 + 
ODEP_COUNT
)

	)

467 
	#RF_MIN_FP_SIZE
 (
DEP_FP_COUNT
 + 
ODEP_COUNT
)

	)

469 
uöt32_t
 
rf_öt_size
;

470 
uöt32_t
 
rf_Â_size
;

471 
	erf_köd_íum
 {

472 
rf_köd_sh¨ed
 = 0,

473 
rf_köd_¥iv©e


474 } 
rf_köd
;

476 
	sphªg_t
 {

477 
	m≥ndög
;

478 
	mbusy
;

481 
	srf_t
 {

484 
	möt_øt
[
DEP_INT_COUNT
];

485 
phªg_t
 *
	möt_phªg
;

486 
	möt_phªg_cou¡
;

487 *
	möt_‰ì_phªg
;

488 
	möt_‰ì_phªg_cou¡
;

491 
	mÂ_t›_of_°ack
;

492 
	mÂ_øt
[
DEP_FP_COUNT
];

493 
phªg_t
 *
	mÂ_phªg
;

494 
	mÂ_phªg_cou¡
;

495 *
	mÂ_‰ì_phªg
;

496 
	mÂ_‰ì_phªg_cou¡
;

499 
rf_ªg_›ti⁄s
();

500 
rf_öô
();

501 
rf_d⁄e
();

503 
rf_t
 *
rf_¸óã
(
öt_size
, 
Â_size
);

504 
rf_‰ì
(
rf_t
 *
rf
);

506 
rf_dump
(
c‹e
, 
thªad
, 
FILE
 *
f
);

507 
rf_cou¡_dïs
(
u›_t
 *
u›
);

508 
rf_ˇn_ª«me
(
u›_t
 *
u›
);

509 
rf_ª«me
(
u›_t
 *
u›
);

510 
rf_ªady
(
u›_t
 *
u›
);

511 
rf_wrôe
(
u›_t
 *
u›
);

512 
rf_undo
(
u›_t
 *
u›
);

513 
rf_commô
(
u›_t
 *
u›
);

514 
rf_check_öãgrôy
(
c‹e
, 
thªad
);

521 
	gb¥ed_t
;

523 
b¥ed_ªg_›ti⁄s
();

524 
b¥ed_öô
();

525 
b¥ed_d⁄e
();

527 
b¥ed_t
 *
b¥ed_¸óã
();

528 
b¥ed_‰ì
(
b¥ed_t
 *
b¥ed
);

529 
b¥ed_lookup
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
);

530 
b¥ed_lookup_mu…ùÀ
(
b¥ed_t
 *
b¥ed
, 
uöt32_t
 
eù
, 
cou¡
);

531 
b¥ed_upd©e
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
);

533 
uöt32_t
 
b¥ed_btb_lookup
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
);

534 
b¥ed_btb_upd©e
(
b¥ed_t
 *
b¥ed
, 
u›_t
 *
u›
);

535 
uöt32_t
 
b¥ed_btb_√xt_bønch
(
b¥ed_t
 *
b¥ed
, uöt32_à
eù
, uöt32_à
bsize
);

542 
	#TCACHE_ENTRY_SIZE
 ((
tˇche_íåy_t
Ë+ (
uöt32_t
Ë* 
tˇche_åa˚_size
)

	)

543 
	#TCACHE_ENTRY
(
SET
, 
WAY
Ë((
tˇche_íåy_t
 *Ë(((*Ë
tˇche
->
íåy
Ë+ 
TCACHE_ENTRY_SIZE
 * ((SETË* 
tˇche_assoc
 + (WAY))))

	)

545 
	stˇche_íåy_t
 {

546 
	mcou¡î
;

547 
uöt32_t
 
	mèg
;

548 
	mu›_cou¡
, 
	mm›_cou¡
;

549 
	mbønch_mask
, 
	mbønch_Êags
, 
	mbønch_cou¡
;

550 
uöt32_t
 
	mÁŒ_through
;

551 
uöt32_t
 
	mèrgë
;

556 
uöt32_t
 
	mm›_¨øy
[0];

559 
	stˇche_t
 {

562 
tˇche_íåy_t
 *
	míåy
;

563 
tˇche_íåy_t
 *
	mãmp
;

566 
	m«me
[20];

567 
uöt64_t
 
	mac˚s£s
;

568 
uöt64_t
 
	mhôs
;

569 
uöt64_t
 
	mcommôãd
;

570 
uöt64_t
 
	msquashed
;

571 
uöt64_t
 
	måa˚_Àngth_acc
;

572 
uöt64_t
 
	måa˚_Àngth_cou¡
;

576 
tˇche_¥e£¡
;

577 
uöt32_t
 
tˇche_åa˚_size
;

578 
uöt32_t
 
tˇche_bønch_max
;

579 
uöt32_t
 
tˇche_queue_size
;

581 
	gtˇche_t
;

583 
tˇche_ªg_›ti⁄s
();

584 
tˇche_dump_ªp‹t
(
tˇche_t
 *
tˇche
, 
FILE
 *
f
);

585 
tˇche_öô
();

586 
tˇche_d⁄e
();

588 
tˇche_t
 *
tˇche_¸óã
();

589 
tˇche_‰ì
(
tˇche_t
 *
tˇche
);

590 
tˇche_√w_u›
(
tˇche_t
 *
tˇche
, 
u›_t
 *
u›
);

591 
tˇche_lookup
(
tˇche_t
 *
tˇche
, 
uöt32_t
 
eù
, 
¥ed
,

592 *
±r_m›_cou¡
, 
uöt32_t
 **
±r_m›_¨øy
, uöt32_à*
±r_√ù
);

598 
	e±ø˚_°age_íum
 {

599 
	m±ø˚_„tch
 = 0,

600 
	m±ø˚_di•©ch
,

601 
	m±ø˚_issue
,

602 
	m±ø˚_executi⁄
,

603 
	m±ø˚_mem‹y
,

604 
	m±ø˚_wrôeback
,

605 
	m±ø˚_commô


608 
±ø˚_öô
();

609 
±ø˚_d⁄e
();

610 
±ø˚_ªg_›ti⁄s
();

612 
±ø˚_√w_u›
(
u›_t
 *
u›
);

613 
±ø˚_íd_u›
(
u›_t
 *
u›
);

614 
±ø˚_√w_°age
(
u›_t
 *
u›
, 
±ø˚_°age_íum
 
°age
);

615 
±ø˚_√w_cy˛e
();

624 
uöt64_t
 
°age_time_„tch
;

625 
uöt64_t
 
°age_time_di•©ch
;

626 
uöt64_t
 
°age_time_issue
;

627 
uöt64_t
 
°age_time_wrôeback
;

628 
uöt64_t
 
°age_time_commô
;

629 
uöt64_t
 
°age_time_ª°
;

632 
	#CORE
 (
p
->
c‹e
[c‹e])

	)

633 
	#THREAD
 (
p
->
c‹e
[c‹e].
thªad
[thªad])

	)

634 
	#ICORE
(
I
Ë(
p
->
c‹e
[(I)])

	)

635 
	#ITHREAD
(
I
Ë(
p
->
c‹e
[c‹e].
thªad
[(I)])

	)

636 
	#FOREACH_CORE
 
c‹e
 = 0; c‹ê< 
p_c‹es
; c‹e++)

	)

637 
	#FOREACH_THREAD
 
thªad
 = 0;Åhªad < 
p_thªads
;Åhªad++)

	)

641 
	edi_°Æl_íum
 {

642 
	mdi_°Æl_u£d
 = 0,

643 
	mdi_°Æl_•ec
,

644 
	mdi_°Æl_u›q
,

645 
	mdi_°Æl_rob
,

646 
	mdi_°Æl_iq
,

647 
	mdi_°Æl_lsq
,

648 
	mdi_°Æl_ª«me
,

649 
	mdi_°Æl_˘x
,

650 
	mdi_°Æl_max


655 
	s¥o˚ss‹_thªad_t
 {

657 
˘x_t
 *
	m˘x
;

658 
	mœ°_Æloc_pid
;

661 
	mrob_cou¡
;

662 
	mrob_À·_bound
;

663 
	mrob_right_bound
;

664 
	mrob_hód
;

665 
	mrob_èû
;

668 
	miq_cou¡
;

669 
	mlsq_cou¡
;

670 
	mrf_öt_cou¡
;

671 
	mrf_Â_cou¡
;

674 
li°_t
 *
	m„tchq
;

675 
li°_t
 *
	mu›q
;

676 
 li°_t
 *
	miq
;

677 
 li°_t
 *
	mlq
;

678 
 li°_t
 *
	msq
;

679 
b¥ed_t
 *
	mb¥ed
;

680 
tˇche_t
 *
	mtˇche
;

681 
rf_t
 *
	mrf
;

684 
uöt32_t
 
	m„tch_eù
, 
	m„tch_√ù
;

685 
	m„tchq_occ
;

686 
	mtˇcheq_occ
;

687 
	m„tch_°Æl
;

688 
	m„tch_bsize
;

689 
uöt32_t
 
	m„tch_block
;

690 
uöt64_t
 
	m„tch_ac˚ss
;

693 
uöt64_t
 
	m„tched
;

694 
uöt64_t
 
	mdi•©ched
[
u›_cou¡
];

695 
uöt64_t
 
	missued
[
u›_cou¡
];

696 
uöt64_t
 
	mcommôãd
[
u›_cou¡
];

697 
uöt64_t
 
	msquashed
;

698 
uöt64_t
 
	mbønches
;

699 
uöt64_t
 
	mmi•ªd
;

700 
uöt64_t
 
	mœ°_commô_cy˛e
;

703 
uöt64_t
 
	mrob_occu∑ncy
;

704 
uöt64_t
 
	mrob_fuŒ
;

705 
uöt64_t
 
	mrob_ªads
;

706 
uöt64_t
 
	mrob_wrôes
;

708 
uöt64_t
 
	miq_occu∑ncy
;

709 
uöt64_t
 
	miq_fuŒ
;

710 
uöt64_t
 
	miq_ªads
;

711 
uöt64_t
 
	miq_wrôes
;

712 
uöt64_t
 
	miq_wakeup_ac˚s£s
;

714 
uöt64_t
 
	mlsq_occu∑ncy
;

715 
uöt64_t
 
	mlsq_fuŒ
;

716 
uöt64_t
 
	mlsq_ªads
;

717 
uöt64_t
 
	mlsq_wrôes
;

718 
uöt64_t
 
	mlsq_wakeup_ac˚s£s
;

720 
uöt64_t
 
	mrf_öt_occu∑ncy
;

721 
uöt64_t
 
	mrf_öt_fuŒ
;

722 
uöt64_t
 
	mrf_öt_ªads
;

723 
uöt64_t
 
	mrf_öt_wrôes
;

725 
uöt64_t
 
	mrf_Â_occu∑ncy
;

726 
uöt64_t
 
	mrf_Â_fuŒ
;

727 
uöt64_t
 
	mrf_Â_ªads
;

728 
uöt64_t
 
	mrf_Â_wrôes
;

730 
uöt64_t
 
	møt_öt_ªads
;

731 
uöt64_t
 
	møt_öt_wrôes
;

732 
uöt64_t
 
	møt_Â_ªads
;

733 
uöt64_t
 
	møt_Â_wrôes
;

735 
uöt64_t
 
	mbtb_ªads
;

736 
uöt64_t
 
	mbtb_wrôes
;

741 
	s¥o˚ss‹_c‹e_t
 {

744 
¥o˚ss‹_thªad_t
 *
	mthªad
;

747 
 li°_t
 *
	mevítq
;

748 
fu_t
 *
	mfu
;

751 
uöt64_t
 
	mdi_£q
;

752 
	miq_cou¡
;

753 
	mlsq_cou¡
;

754 
	mrf_öt_cou¡
;

755 
	mrf_Â_cou¡
;

758 
li°_t
 *
	mrob
;

759 
	mrob_cou¡
;

760 
	mrob_hód
;

761 
	mrob_èû
;

764 
	m„tch_cuºít
;

765 
öt64_t
 
	m„tch_swôch
;

766 
	mdecode_cuºít
;

767 
	mdi•©ch_cuºít
;

768 
	missue_cuºít
;

769 
	mcommô_cuºít
;

772 
uöt64_t
 
	mdi_°Æl
[
di_°Æl_max
];

773 
uöt64_t
 
	mdi•©ched
[
u›_cou¡
];

774 
uöt64_t
 
	missued
[
u›_cou¡
];

775 
uöt64_t
 
	mcommôãd
[
u›_cou¡
];

776 
uöt64_t
 
	msquashed
;

777 
uöt64_t
 
	mbønches
;

778 
uöt64_t
 
	mmi•ªd
;

781 
uöt64_t
 
	mrob_occu∑ncy
;

782 
uöt64_t
 
	mrob_fuŒ
;

783 
uöt64_t
 
	mrob_ªads
;

784 
uöt64_t
 
	mrob_wrôes
;

786 
uöt64_t
 
	miq_occu∑ncy
;

787 
uöt64_t
 
	miq_fuŒ
;

788 
uöt64_t
 
	miq_ªads
;

789 
uöt64_t
 
	miq_wrôes
;

790 
uöt64_t
 
	miq_wakeup_ac˚s£s
;

792 
uöt64_t
 
	mlsq_occu∑ncy
;

793 
uöt64_t
 
	mlsq_fuŒ
;

794 
uöt64_t
 
	mlsq_ªads
;

795 
uöt64_t
 
	mlsq_wrôes
;

796 
uöt64_t
 
	mlsq_wakeup_ac˚s£s
;

798 
uöt64_t
 
	mrf_öt_occu∑ncy
;

799 
uöt64_t
 
	mrf_öt_fuŒ
;

800 
uöt64_t
 
	mrf_öt_ªads
;

801 
uöt64_t
 
	mrf_öt_wrôes
;

803 
uöt64_t
 
	mrf_Â_occu∑ncy
;

804 
uöt64_t
 
	mrf_Â_fuŒ
;

805 
uöt64_t
 
	mrf_Â_ªads
;

806 
uöt64_t
 
	mrf_Â_wrôes
;

811 
	s¥o˚ss‹_t
 {

814 
¥o˚ss‹_c‹e_t
 *
	mc‹e
;

817 
uöt64_t
 
	m£q
;

818 *
	m°age
;

821 
uöt64_t
 
	m˘x_Æloc_ﬁde°
;

822 
	m˘x_dóŒoc_sig«ls
;

825 
mm_t
 *
	mmm
;

828 
uöt64_t
 
	m„tched
;

829 
uöt64_t
 
	mdi•©ched
[
u›_cou¡
];

830 
uöt64_t
 
	missued
[
u›_cou¡
];

831 
uöt64_t
 
	mcommôãd
[
u›_cou¡
];

832 
uöt64_t
 
	msquashed
;

833 
uöt64_t
 
	mbønches
;

834 
uöt64_t
 
	mmi•ªd
;

835 
	mtime
;

838 
uöt64_t
 
	mœ°_commôãd
;

839 
uöt64_t
 
	mœ°_dump
;

845 
¥o˚ss‹_t
 *
p
;

849 
p_ªg_›ti⁄s
();

850 
p_¥öt_°©s
(
FILE
 *
f
);

851 
p_öô
();

852 
p_d⁄e
();

853 
p_lﬂd_¥ogs
(
¨gc
, **
¨gv
, *
˘xfûe
);

854 
p_dump
(
FILE
 *
f
);

855 
p_upd©e_occu∑ncy_°©s
();

856 
uöt32_t
 
p_éb_addªss
(
˘x
, uöt32_à
vaddr
);

857 
p_Á°_f‹w¨d
(
uöt64_t
 
cy˛es
);

859 
p_pùñöe_em±y
(
c‹e
, 
thªad
);

860 
p_m≠_c⁄ãxt
(
c‹e
, 
thªad
, 
˘x_t
 *
˘x
);

861 
p_unm≠_c⁄ãxt
(
c‹e
, 
thªad
);

862 
p_°©ic_scheduÀ
();

863 
p_dy«mic_scheduÀ
();

865 
p_°ages
();

866 
p_„tch
();

867 
p_decode
();

868 
p_di•©ch
();

869 
p_issue
();

870 
p_wrôeback
();

871 
p_commô
();

872 
p_ªcovî
(
c‹e
, 
thªad
);

	@processor.c

20 
	~<m2s.h
>

24 
¥o˚ss‹_t
 *
	gp
;

28 
	gp_°age_time_°©s
 = 0;

29 
	gp_occu∑ncy_°©s
 = 0;

30 
uöt32_t
 
	gp_c‹es
 = 1;

31 
uöt32_t
 
	gp_thªads
 = 1;

32 
uöt32_t
 
	gp_˝us
 = 1;

33 
uöt32_t
 
	gp_c⁄ãxt_qu™tum
 = 100000;

34 
	gp_c⁄ãxt_swôch
 = 1;

35 
uöt32_t
 
	gp_thªad_qu™tum
 = 1000;

36 
uöt32_t
 
	gp_thªad_swôch_≥«…y
 = 0;

37 *
	gp_ªp‹t_fûe
 = "";

39 
p_ªcovî_köd_íum
 
	gp_ªcovî_köd
 = 
p_ªcovî_köd_wrôeback
;

40 
uöt32_t
 
	gp_ªcovî_≥«…y
 = 0;

42 
p_„tch_köd_íum
 
	gp_„tch_köd
 = 
p_„tch_köd_time¶i˚
;

44 
uöt32_t
 
	gp_decode_width
 = 4;

46 
p_di•©ch_köd_íum
 
	gp_di•©ch_köd
 = 
p_di•©ch_köd_time¶i˚
;

47 
uöt32_t
 
	gp_di•©ch_width
 = 4;

49 
p_issue_köd_íum
 
	gp_issue_köd
 = 
p_issue_köd_time¶i˚
;

50 
uöt32_t
 
	gp_issue_width
 = 4;

52 
p_commô_köd_íum
 
	gp_commô_köd
 = 
p_commô_köd_sh¨ed
;

53 
uöt32_t
 
	gp_commô_width
 = 4;

60 
	$p_ªg_›ti⁄s
()

62 *
p_ªcovî_köd_m≠
[] = { "writeback", "commit" };

63 *
p_„tch_köd_m≠
[] = { "shared", "timeslice", "switchonevent" };

64 *
p_di•©ch_köd_m≠
[] = { "shared", "timeslice" };

65 *
p_issue_köd_m≠
[] = { "shared", "timeslice" };

66 *
p_commô_köd_m≠
[] = { "shared", "timeslice" };

68 
	`›t_ªg_uöt32
("-c‹es", "numbî o‡¥o˚ss‹ c‹es", &
p_c‹es
);

69 
	`›t_ªg_uöt32
("-thªads", "numbî o‡thªad†≥∏c‹e", &
p_thªads
);

71 
	`›t_ªg_boﬁ
("-context_switch", "allow context switchesánd scheduling",

72 &
p_c⁄ãxt_swôch
);

73 
	`›t_ªg_uöt32
("-context_quantum", "quantum forá context before context switch",

74 &
p_c⁄ãxt_qu™tum
);

76 
	`›t_ªg_boﬁ
("-stage_time_stats", "measureÅime for stages",

77 &
p_°age_time_°©s
);

78 
	`›t_ªg_boﬁ
("-occupancy_stats", "include occupancy stats inÅheÖipelineÑeport",

79 &
p_occu∑ncy_°©s
);

81 
	`›t_ªg_íum
("-recover_kind", "whenÅoÑecover {writeback|commit}",

82 (*Ë&
p_ªcovî_köd
, 
p_ªcovî_köd_m≠
, 2);

83 
	`›t_ªg_uöt32
("-recover_penalty", "cyclesÅo stall fetcháfterÑecover",

84 &
p_ªcovî_≥«…y
);

86 
	`›t_ªg_uöt32
("-thread_quantum", "thread quantum in cycles for switch-on-event fetch",

87 &
p_thªad_qu™tum
);

88 
	`›t_ªg_uöt32
("-thread_switch_penalty", "for switch-on-event fetch",

89 &
p_thªad_swôch_≥«…y
);

90 
	`›t_ªg_íum
("-fetch_kind", "fetchÖolicy {shared|timeslice|switchonevent}",

91 (*Ë&
p_„tch_köd
, 
p_„tch_köd_m≠
, 3);

93 
	`›t_ªg_uöt32
("-decode_width", "decode width",

94 &
p_decode_width
);

96 
	`›t_ªg_íum
("-dispatch_kind", "dispatch stage sharing {shared|timeslice}",

97 (*Ë&
p_di•©ch_köd
, 
p_di•©ch_köd_m≠
, 2);

98 
	`›t_ªg_uöt32
("-dispatch_width", "dispatch width (for shared/timeslice dispatch)",

99 &
p_di•©ch_width
);

101 
	`›t_ªg_íum
("-issue_kind", "issue stage sharing {shared|timeslice}",

102 (*Ë&
p_issue_köd
, 
p_issue_köd_m≠
, 2);

103 
	`›t_ªg_uöt32
("-issue_width", "issuêwidth (f‹ sh¨ed/time¶i˚ issue)", &
p_issue_width
);

105 
	`›t_ªg_íum
("-commit_kind", "commit stage sharing {shared|timeslice}",

106 (*Ë&
p_commô_köd
, 
p_commô_köd_m≠
, 2);

107 
	`›t_ªg_uöt32
("-commô_width", "commô dïth (ö in°r/thªad/cy˛e)", &
p_commô_width
);

110 
	`b¥ed_ªg_›ti⁄s
();

111 
	`tˇche_ªg_›ti⁄s
();

112 
	`„tchq_ªg_›ti⁄s
();

113 
	`u›q_ªg_›ti⁄s
();

114 
	`rob_ªg_›ti⁄s
();

115 
	`rf_ªg_›ti⁄s
();

116 
	`iq_ªg_›ti⁄s
();

117 
	`lsq_ªg_›ti⁄s
();

118 
	`fu_ªg_›ti⁄s
();

119 
	}
}

122 
	$p_dump_u›_ªp‹t
(
FILE
 *
f
, 
uöt64_t
 *
u›_°©s
, *
¥efix
, 
≥ak_ùc
)

124 
uöt64_t
 
icomp
 = 0;

125 
uöt64_t
 
lcomp
 = 0;

126 
uöt64_t
 
fcomp
 = 0;

127 
uöt64_t
 
mem
 = 0;

128 
uöt64_t
 
˘æ
 = 0;

129 
uöt64_t
 
tŸÆ
 = 0;

131 
	#UOP
(
_u›
, 
_fu
, 
_Êags
) \

132 
	`Ârötf
(
f
, "%s.U›." #_u› " = %Œd\n", 
¥efix
, (Ë
u›_°©s
[
u›_
##
_u›
]); \

133 i‡((
_Êags
Ë& 
FICOMP
Ë
icomp
 +
u›_°©s
[
u›_
##
_u›
]; \

134 i‡((
_Êags
Ë& 
FLCOMP
Ë
lcomp
 +
u›_°©s
[
u›_
##
_u›
]; \

135 i‡((
_Êags
Ë& 
FFCOMP
Ë
fcomp
 +
u›_°©s
[
u›_
##
_u›
]; \

136 i‡((
_Êags
Ë& 
FMEM
Ë
mem
 +
u›_°©s
[
u›_
##
_u›
]; \

137 i‡((
_Êags
Ë& 
FCTRL
Ë
˘æ
 +
u›_°©s
[
u›_
##
_u›
]; \

138 
tŸÆ
 +
u›_°©s
[
u›_
##
_u›
];

	)

139 
	~"u›1.d©
"

140 #unde‡
UOP


142 
	`Ârötf
(
f
, "%s.Sim∂eI¡egî = %Œd\n", 
¥efix
,

143 (Ë(
icomp
 - 
u›_°©s
[
u›_mu…
] - u›_°©s[
u›_div
]));

144 
	`Ârötf
(
f
, "%s.Com∂exI¡egî = %Œd\n", 
¥efix
,

145 (Ë(
u›_°©s
[
u›_mu…
] + u›_°©s[
u›_div
]));

146 
	`Ârötf
(
f
, "%s.I¡egî = %Œd\n", 
¥efix
, (Ë
icomp
);

147 
	`Ârötf
(
f
, "%s.Logiˇ»%Œd\n", 
¥efix
, (Ë
lcomp
);

148 
	`Ârötf
(
f
, "%s.FlﬂtögPoöà%Œd\n", 
¥efix
, (Ë
fcomp
);

149 
	`Ârötf
(
f
, "%s.Mem‹y = %Œd\n", 
¥efix
, (Ë
mem
);

150 
	`Ârötf
(
f
, "%s.Cå»%Œd\n", 
¥efix
, (Ë
˘æ
);

151 
	`Ârötf
(
f
, "%s.WndSwôch = %Œd\n", 
¥efix
, ()

152 (
u›_°©s
[
u›_ˇŒ
] + u›_°©s[
u›_ªt
]));

153 
	`Ârötf
(
f
, "%s.TŸÆ = %Œd\n", 
¥efix
, (Ë
tŸÆ
);

154 
	`Ârötf
(
f
, "%s.IPC = %.4g\n", 
¥efix
, 
sim_cy˛e
 ? (Ë
tŸÆ
 / sim_cycle : 0.0);

155 
	`Ârötf
(
f
, "%s.DutyCy˛ê%.4g\n", 
¥efix
, 
sim_cy˛e
 && 
≥ak_ùc
 ?

156 (Ë
tŸÆ
 / 
sim_cy˛e
 / 
≥ak_ùc
 : 0.0);

157 
	`Ârötf
(
f
, "\n");

158 
	}
}

161 
	#DUMP_FU_STAT
(
NAME
, 
ITEM
) { \

162 
	`Ârötf
(
f
, "fu." #NAME ".Ac˚s£†%Œd\n", (Ë
CORE
.
fu
->
ac˚s£s
[
ITEM
]); \

163 
	`Ârötf
(
f
, "fu." #NAME ".Díõd = %Œd\n", (Ë
CORE
.
fu
->
díõd
[
ITEM
]); \

164 
	`Ârötf
(
f
, "fu." #NAME ".WaôögTimê%.4g\n", 
CORE
.
fu
->
ac˚s£s
[
ITEM
] ? \

165 (Ë
CORE
.
fu
->
waôög_time
[
ITEM
] / CORE.fu->
ac˚s£s
[ITEM] : 0.0); \

166 }

	)

168 
	#DUMP_DISPATCH_STAT
(
NAME
) { \

169 
	`Ârötf
(
f
, "Di•©ch.SèŒ." #NAME " = %Œd\n", (Ë
CORE
.
di_°Æl
[
di_°Æl_
##
NAME
]); \

170 }

	)

172 
	#DUMP_CORE_STRUCT_STATS
(
NAME
, 
ITEM
) { \

173 
	`Ârötf
(
f
, #NAME ".Sizê%d\n", (Ë
ITEM
##
_size
 * 
p_thªads
); \

174 i‡(
p_occu∑ncy_°©s
) \

175 
	`Ârötf
(
f
, #NAME ".Occu∑ncy = %.2f\n", 
sim_cy˛e
 ? (Ë
CORE
.
ITEM
##
_occu∑ncy
 / sim_cycle : 0.0); \

176 
	`Ârötf
(
f
, #NAME ".FuŒ = %Œd\n", (Ë
CORE
.
ITEM
##
_fuŒ
); \

177 
	`Ârötf
(
f
, #NAME ".Ród†%Œd\n", (Ë
CORE
.
ITEM
##
_ªads
); \

178 
	`Ârötf
(
f
, #NAME ".Wrôe†%Œd\n", (Ë
CORE
.
ITEM
##
_wrôes
); \

179 }

	)

181 
	#DUMP_THREAD_STRUCT_STATS
(
NAME
, 
ITEM
) { \

182 
	`Ârötf
(
f
, #NAME ".Sizê%d\n", (Ë
ITEM
##
_size
); \

183 i‡(
p_occu∑ncy_°©s
) \

184 
	`Ârötf
(
f
, #NAME ".Occu∑ncy = %.2f\n", 
sim_cy˛e
 ? (Ë
THREAD
.
ITEM
##
_occu∑ncy
 / sim_cycle : 0.0); \

185 
	`Ârötf
(
f
, #NAME ".FuŒ = %Œd\n", (Ë
THREAD
.
ITEM
##
_fuŒ
); \

186 
	`Ârötf
(
f
, #NAME ".Ród†%Œd\n", (Ë
THREAD
.
ITEM
##
_ªads
); \

187 
	`Ârötf
(
f
, #NAME ".Wrôe†%Œd\n", (Ë
THREAD
.
ITEM
##
_wrôes
); \

188 }

	)

190 
	$p_dump_ªp‹t
()

192 
FILE
 *
f
;

193 
c‹e
, 
thªad
;

194 
uöt64_t
 
now
 = 
	`ke_timî
();

197 
f
 = 
	`›í_wrôe
(
p_ªp‹t_fûe
);

198 i‡(!
f
)

202 
	`Ârötf
(
f
, "; Global statistics\n");

203 
	`Ârötf
(
f
, "[ global ]\n\n");

204 
	`Ârötf
(
f
, "Cy˛e†%Œd\n", (Ë
sim_cy˛e
);

205 
	`Ârötf
(
f
, "Timê%.1f\n", (Ë
now
 / 1000000);

206 
	`Ârötf
(
f
, "Cy˛esPîSec⁄d = %.0f\n", 
now
 ? (Ë
sim_cy˛e
 /Çow * 1000000 : 0.0);

207 
	`Ârötf
(
f
, "Mem‹yU£d = %lu\n", (Ë
mem_m≠≥d_•a˚
);

208 
	`Ârötf
(
f
, "Mem‹yU£dMax = %lu\n", (Ë
mem_max_m≠≥d_•a˚
);

209 
	`Ârötf
(
f
, "\n");

212 
	`Ârötf
(
f
, "; Dispatch stage\n");

213 
	`p_dump_u›_ªp‹t
(
f
, 
p
->
di•©ched
, "Di•©ch", 
p_di•©ch_width
);

216 
	`Ârötf
(
f
, "; Issue stage\n");

217 
	`p_dump_u›_ªp‹t
(
f
, 
p
->
issued
, "Issue", 
p_issue_width
);

220 
	`Ârötf
(
f
, "; Commit stage\n");

221 
	`p_dump_u›_ªp‹t
(
f
, 
p
->
commôãd
, "Commô", 
p_commô_width
);

224 
	`Ârötf
(
f
, "; Committed branches\n");

225 
	`Ârötf
(
f
, "; Branches - Number of committed control uops\n");

226 
	`Ârötf
(
f
, "; Squashed - Number of mispredicted uops squashed fromÅhe ROB\n");

227 
	`Ârötf
(
f
, "; Mispred - Number of mispredicted branches inÅhe correctÖath\n");

228 
	`Ârötf
(
f
, "; PredAcc - Predictionáccuracy\n");

229 
	`Ârötf
(
f
, "Commô.Bønche†%Œd\n", (Ë
p
->
bønches
);

230 
	`Ârötf
(
f
, "Commô.Squashed = %Œd\n", (Ë
p
->
squashed
);

231 
	`Ârötf
(
f
, "Commô.Mi•ªd = %Œd\n", (Ë
p
->
mi•ªd
);

232 
	`Ârötf
(
f
, "Commô.PªdAc¯%.4g\n", 
p
->
bønches
 ?

233 (Ë(
p
->
bønches
 -Ö->
mi•ªd
) /Ö->branches : 0.0);

234 
	`Ârötf
(
f
, "\n");

237 
FOREACH_CORE
 {

240 
	`Ârötf
(
f
, "\n; Sèti°ic†f‹ c‹ê%d\n", 
c‹e
);

241 
	`Ârötf
(
f
, "[ c%d ]\n\n", 
c‹e
);

244 
	`Ârötf
(
f
, "; Functional unitÖool\n");

245 
	`Ârötf
(
f
, "; Accesses - Number of uops issuedÅoá f.u.\n");

246 
	`Ârötf
(
f
, "; Denied - Number ofÑequests denied dueÅo busy f.u.\n");

247 
	`Ârötf
(
f
, "; WaitingTime - AverageÇumber of waiting cyclesÅoÑeserve f.u.\n");

248 
	`DUMP_FU_STAT
(
I¡Add
, 
fu_öèdd
);

249 
	`DUMP_FU_STAT
(
I¡Sub
, 
fu_ötsub
);

250 
	`DUMP_FU_STAT
(
I¡Mu…
, 
fu_ötmu…
);

251 
	`DUMP_FU_STAT
(
I¡Div
, 
fu_ötdiv
);

252 
	`DUMP_FU_STAT
(
EfÁddr
, 
fu_efÁddr
);

253 
	`DUMP_FU_STAT
(
Logiˇl
, 
fu_logiˇl
);

254 
	`DUMP_FU_STAT
(
FPSim∂e
, 
fu_Âsim∂e
);

255 
	`DUMP_FU_STAT
(
FPAdd
, 
fu_Âadd
);

256 
	`DUMP_FU_STAT
(
FPComp
, 
fu_Âcomp
);

257 
	`DUMP_FU_STAT
(
FPMu…
, 
fu_Âmu…
);

258 
	`DUMP_FU_STAT
(
FPDiv
, 
fu_Âdiv
);

259 
	`DUMP_FU_STAT
(
FPCom∂ex
, 
fu_Âcom∂ex
);

260 
	`Ârötf
(
f
, "\n");

263 i‡(
p_di•©ch_köd
 =
p_di•©ch_köd_time¶i˚
) {

264 
	`Ârötf
(
f
, "; Dispatch slots usage (sum = cycles * dispatch width)\n");

265 
	`Ârötf
(
f
, "; used - dispatch slot was used byáÇon-spec uop\n");

266 
	`Ârötf
(
f
, "; spec - used byá mispeculated uop\n");

267 
	`Ârötf
(
f
, "; ctx -Ço contextállocatedÅoÅhread\n");

268 
	`Ârötf
(
f
, "; uopq,rob,iq,lsq,rename -Ço space in structure\n");

269 
	`DUMP_DISPATCH_STAT
(
u£d
);

270 
	`DUMP_DISPATCH_STAT
(
•ec
);

271 
	`DUMP_DISPATCH_STAT
(
u›q
);

272 
	`DUMP_DISPATCH_STAT
(
rob
);

273 
	`DUMP_DISPATCH_STAT
(
iq
);

274 
	`DUMP_DISPATCH_STAT
(
lsq
);

275 
	`DUMP_DISPATCH_STAT
(
ª«me
);

276 
	`DUMP_DISPATCH_STAT
(
˘x
);

277 
	`Ârötf
(
f
, "\n");

281 
	`Ârötf
(
f
, "; Dispatch stage\n");

282 
	`p_dump_u›_ªp‹t
(
f
, 
CORE
.
di•©ched
, "Di•©ch", 
p_di•©ch_width
);

285 
	`Ârötf
(
f
, "; Issue stage\n");

286 
	`p_dump_u›_ªp‹t
(
f
, 
CORE
.
issued
, "Issue", 
p_issue_width
);

289 
	`Ârötf
(
f
, "; Commit stage\n");

290 
	`p_dump_u›_ªp‹t
(
f
, 
CORE
.
commôãd
, "Commô", 
p_commô_width
);

293 
	`Ârötf
(
f
, "; Committed branches\n");

294 
	`Ârötf
(
f
, "Commô.Bønche†%Œd\n", (Ë
CORE
.
bønches
);

295 
	`Ârötf
(
f
, "Commô.Squashed = %Œd\n", (Ë
CORE
.
squashed
);

296 
	`Ârötf
(
f
, "Commô.Mi•ªd = %Œd\n", (Ë
CORE
.
mi•ªd
);

297 
	`Ârötf
(
f
, "Commô.PªdAc¯%.4g\n", 
CORE
.
bønches
 ?

298 (Ë(
CORE
.
bønches
 - CORE.
mi•ªd
) / CORE.branches : 0.0);

299 
	`Ârötf
(
f
, "\n");

302 
	`Ârötf
(
f
, "; Structure statistics (reorder buffer, instruction queue,\n");

303 
	`Ârötf
(
f
, ";Üoad-store queue,ánd integer/floating-pointÑegister file)\n");

304 
	`Ârötf
(
f
, "; Size - Available size\n");

305 
	`Ârötf
(
f
, "; Occupancy - AverageÇumber of occupiedÉntries\n");

306 
	`Ârötf
(
f
, "; Full - Number of cycles whenÅhe structure was full\n");

307 
	`Ârötf
(
f
, "; Reads, Writes - AccessesÅoÅhe structure\n");

308 i‡(
rob_köd
 =
rob_köd_sh¨ed
)

309 
	`DUMP_CORE_STRUCT_STATS
(
ROB
, 
rob
);

310 i‡(
iq_köd
 =
iq_köd_sh¨ed
) {

311 
	`DUMP_CORE_STRUCT_STATS
(
IQ
, 
iq
);

312 
	`Ârötf
(
f
, "IQ.WakeupAc˚s£†%Œd\n", (Ë
CORE
.
iq_wakeup_ac˚s£s
);

314 i‡(
lsq_köd
 =
lsq_köd_sh¨ed
)

315 
	`DUMP_CORE_STRUCT_STATS
(
LSQ
, 
lsq
);

316 i‡(
rf_köd
 =
rf_köd_sh¨ed
) {

317 
	`DUMP_CORE_STRUCT_STATS
(
RF_I¡
, 
rf_öt
);

318 
	`DUMP_CORE_STRUCT_STATS
(
RF_Fp
, 
rf_Â
);

320 
	`Ârötf
(
f
, "\n");

323 
FOREACH_THREAD
 {

324 
	`Ârötf
(
f
, "\n; Sèti°ic†f‹ c‹ê%d -Åhªad %d\n", 
c‹e
, 
thªad
);

325 
	`Ârötf
(
f
, "[ c%dt%d ]\n\n", 
c‹e
, 
thªad
);

328 
	`Ârötf
(
f
, "; Dispatch stage\n");

329 
	`p_dump_u›_ªp‹t
(
f
, 
THREAD
.
di•©ched
, "Di•©ch", 
p_di•©ch_width
);

332 
	`Ârötf
(
f
, "; Issue stage\n");

333 
	`p_dump_u›_ªp‹t
(
f
, 
THREAD
.
issued
, "Issue", 
p_issue_width
);

336 
	`Ârötf
(
f
, "; Commit stage\n");

337 
	`p_dump_u›_ªp‹t
(
f
, 
THREAD
.
commôãd
, "Commô", 
p_commô_width
);

340 
	`Ârötf
(
f
, "; Committed branches\n");

341 
	`Ârötf
(
f
, "Commô.Bønche†%Œd\n", (Ë
THREAD
.
bønches
);

342 
	`Ârötf
(
f
, "Commô.Squashed = %Œd\n", (Ë
THREAD
.
squashed
);

343 
	`Ârötf
(
f
, "Commô.Mi•ªd = %Œd\n", (Ë
THREAD
.
mi•ªd
);

344 
	`Ârötf
(
f
, "Commô.PªdAc¯%.4g\n", 
THREAD
.
bønches
 ?

345 (Ë(
THREAD
.
bønches
 - THREAD.
mi•ªd
) / THREAD.branches : 0.0);

346 
	`Ârötf
(
f
, "\n");

349 
	`Ârötf
(
f
, "; Structure statistics (reorder buffer, instruction queue,Üoad-store queue,\n");

350 
	`Ârötf
(
f
, "; integer/floating-pointÑegister file,ándÑenamingÅable)\n");

351 i‡(
rob_köd
 =
rob_köd_¥iv©e
)

352 
	`DUMP_THREAD_STRUCT_STATS
(
ROB
, 
rob
);

353 i‡(
iq_köd
 =
iq_köd_¥iv©e
) {

354 
	`DUMP_THREAD_STRUCT_STATS
(
IQ
, 
iq
);

355 
	`Ârötf
(
f
, "IQ.WakeupAc˚s£†%Œd\n", (Ë
THREAD
.
iq_wakeup_ac˚s£s
);

357 i‡(
lsq_köd
 =
lsq_köd_¥iv©e
)

358 
	`DUMP_THREAD_STRUCT_STATS
(
LSQ
, 
lsq
);

359 i‡(
rf_köd
 =
rf_köd_¥iv©e
) {

360 
	`DUMP_THREAD_STRUCT_STATS
(
RF_I¡
, 
rf_öt
);

361 
	`DUMP_THREAD_STRUCT_STATS
(
RF_Fp
, 
rf_Â
);

363 
	`Ârötf
(
f
, "RAT.I¡Ród†%Œd\n", (Ë
THREAD
.
øt_öt_ªads
);

364 
	`Ârötf
(
f
, "RAT.I¡Wrôe†%Œd\n", (Ë
THREAD
.
øt_öt_wrôes
);

365 
	`Ârötf
(
f
, "RAT.FpRód†%Œd\n", (Ë
THREAD
.
øt_Â_ªads
);

366 
	`Ârötf
(
f
, "RAT.FpWrôe†%Œd\n", (Ë
THREAD
.
øt_Â_wrôes
);

367 
	`Ârötf
(
f
, "BTB.Ród†%Œd\n", (Ë
THREAD
.
btb_ªads
);

368 
	`Ârötf
(
f
, "BTB.Wrôe†%Œd\n", (Ë
THREAD
.
btb_wrôes
);

369 
	`Ârötf
(
f
, "\n");

372 i‡(
THREAD
.
tˇche
)

373 
	`tˇche_dump_ªp‹t
(
THREAD
.
tˇche
, 
f
);

378 
	`f˛o£
(
f
);

379 
	}
}

382 
	$p_¥öt_°©s
(
FILE
 *
f
)

384 
uöt64_t
 
now
 = 
	`ke_timî
();

387 
	`Ârötf
(
f
, "sim.cycles %lld # Simulation cycles\n",

388 (Ë
sim_cy˛e
);

389 
	`Ârötf
(
f
, "sim.inst %lld # Total committed instructions\n",

390 (Ë
sim_ö°
);

391 
	`Ârötf
(
f
, "sim.ipc %.4g # Global IPC\n",

392 
sim_cy˛e
 ? (Ë
sim_ö°
 / sim_cycle : 0);

393 
	`Ârötf
(
f
, "sim.predacc %.4g # BranchÖredictionáccuracy\n",

394 
p
->
bønches
 ? (Ë’->bønche†-Ö->
mi•ªd
) /Ö->branches : 0.0);

395 
	`Ârötf
(
f
, "sim.time %.1f # SimulationÅime in seconds\n",

396 (Ë
now
 / 1000000);

397 
	`Ârötf
(
f
, "sim.cps %.0f # Cycles simulatedÖer second\n",

398 
now
 ? (Ë
sim_cy˛e
 /Çow * 1000000 : 0.0);

399 
	`Ârötf
(
f
, "sim.contexts %d # MaximumÇumber of contextsÑunning concurrently\n",

400 
ke
->
ru¬ög_max
);

401 
	`Ârötf
(
f
, "sim.memory %lu # Physical memory used by benchmarks\n",

402 
mem_m≠≥d_•a˚
);

403 
	`Ârötf
(
f
, "sim.memory_max %lu # MaximumÖhysical memory used by benchmarks\n",

404 
mem_max_m≠≥d_•a˚
);

407 i‡(
p_°age_time_°©s
 && 
sim_cy˛e
) {

408 
	`Ârötf
(
f
, "stage_time.fetch %.3f # Time for stage in us/cycle\n",

409 (Ë
°age_time_„tch
 / 
sim_cy˛e
);

410 
	`Ârötf
(
f
, "stage_time.dispatch %.3f\n",

411 (Ë
°age_time_di•©ch
 / 
sim_cy˛e
);

412 
	`Ârötf
(
f
, "stage_time.issue %.3f\n",

413 (Ë
°age_time_issue
 / 
sim_cy˛e
);

414 
	`Ârötf
(
f
, "stage_time.writeback %.3f\n",

415 (Ë
°age_time_wrôeback
 / 
sim_cy˛e
);

416 
	`Ârötf
(
f
, "stage_time.commit %.3f\n",

417 (Ë
°age_time_commô
 / 
sim_cy˛e
);

418 
	`Ârötf
(
f
, "stage_time.rest %.3f\n",

419 (Ë
°age_time_ª°
 / 
sim_cy˛e
);

423 
	`p_dump_ªp‹t
();

424 
	}
}

427 
	$p_thªad_öô
(
c‹e
, 
thªad
)

430 
THREAD
.
„tch_bsize
 = 
	`ˇche_sy°em_block_size
(
c‹e
, 
thªad
,

431 
ˇche_köd_ö°
);

432 
	}
}

435 
	$p_c‹e_öô
(
c‹e
)

437 
thªad
;

438 
CORE
.
thªad
 = 
	`ˇŒoc
(
p_thªads
, (
¥o˚ss‹_thªad_t
));

439 
FOREACH_THREAD


440 
	`p_thªad_öô
(
c‹e
, 
thªad
);

441 
	}
}

445 
	$p_öô
()

447 
c‹e
;

450 
p_˝us
 = 
p_c‹es
 * 
p_thªads
;

451 
p
 = 
	`ˇŒoc
(1, (
¥o˚ss‹_t
));

452 
p
->
c‹e
 = 
	`ˇŒoc
(
p_c‹es
, (
¥o˚ss‹_c‹e_t
));

453 
FOREACH_CORE


454 
	`p_c‹e_öô
(
c‹e
);

456 
	`rf_öô
();

457 
	`b¥ed_öô
();

458 
	`tˇche_öô
();

459 
	`„tchq_öô
();

460 
	`u›q_öô
();

461 
	`rob_öô
();

462 
	`iq_öô
();

463 
	`lsq_öô
();

464 
	`evítq_öô
();

465 
	`fu_öô
();

466 
	}
}

470 
	$p_d⁄e
()

472 
c‹e
;

475 
	`p_¥öt_°©s
(
°dîr
);

478 
	`„tchq_d⁄e
();

479 
	`u›q_d⁄e
();

480 
	`rob_d⁄e
();

481 
	`iq_d⁄e
();

482 
	`lsq_d⁄e
();

483 
	`evítq_d⁄e
();

484 
	`b¥ed_d⁄e
();

485 
	`tˇche_d⁄e
();

486 
	`rf_d⁄e
();

487 
	`fu_d⁄e
();

490 
FOREACH_CORE


491 
	`‰ì
(
CORE
.
thªad
);

492 
	`‰ì
(
p
->
c‹e
);

493 
	`‰ì
(
p
);

494 
	}
}

499 
	$p_lﬂd_¥ogs
(
¨gc
, **
¨gv
, *
˘xfûe
)

501 i‡(
¨gc
 > 1)

502 
	`ld_lﬂd_¥og_‰om_cmdlöe
(
¨gc
 - 1, 
¨gv
 + 1);

503 i‡(*
˘xfûe
)

504 
	`ld_lﬂd_¥og_‰om_˘xc⁄fig
(
˘xfûe
);

505 
	}
}

508 
	$p_dump
(
FILE
 *
f
)

510 
c‹e
, 
thªad
;

513 
	`Ârötf
(
f
, "\n");

514 
	`Ârötf
(
f
, "sim.œ°_dum∞ %Œd # Cy˛êo‡œ° dump\n", (Ë
p
->
œ°_dump
);

515 
	`Ârötf
(
f
, "sim.ùc_œ°_dum∞ %.4g # IPC sö˚Üa° dump\n", 
sim_cy˛e
 - 
p
->
œ°_dump
 > 0 ?

516 (Ë(
sim_ö°
 - 
p
->
œ°_commôãd
Ë/ (
sim_cy˛e
 -Ö->
œ°_dump
) : 0);

517 
	`Ârötf
(
f
, "\n");

520 
FOREACH_CORE
 {

521 
	`Ârötf
(
f
, "C‹ê%d:\n", 
c‹e
);

523 
	`Ârötf
(
f
, "eventq:\n");

524 
	`u›_ li°_dump
(
CORE
.
evítq
, 
f
);

525 
	`Ârötf
(
f
, "rob:\n");

526 
	`rob_dump
(
c‹e
, 
f
);

528 
FOREACH_THREAD
 {

529 
	`Ârötf
(
f
, "Thªad %d:\n", 
thªad
);

531 
	`Ârötf
(
f
, "fetch queue:\n");

532 
	`u›_li°_dump
(
THREAD
.
„tchq
, 
f
);

533 
	`Ârötf
(
f
, "uop queue:\n");

534 
	`u›_li°_dump
(
THREAD
.
u›q
, 
f
);

535 
	`Ârötf
(
f
, "iq:\n");

536 
	`u›_ li°_dump
(
THREAD
.
iq
, 
f
);

537 
	`Ârötf
(
f
, "lq:\n");

538 
	`u›_ li°_dump
(
THREAD
.
lq
, 
f
);

539 
	`Ârötf
(
f
, "sq:\n");

540 
	`u›_ li°_dump
(
THREAD
.
sq
, 
f
);

541 
	`rf_dump
(
c‹e
, 
thªad
, 
f
);

542 i‡(
THREAD
.
˘x
) {

543 
	`Ârötf
(
f
, "m≠≥d c⁄ãxt: %d\n", 
THREAD
.
˘x
->
pid
);

544 
	`˘x_dump
(
THREAD
.
˘x
, 
f
);

547 
	`Ârötf
(
f
, "\n");

552 
p
->
œ°_dump
 = 
sim_cy˛e
;

553 
p
->
œ°_commôãd
 = 
sim_ö°
;

554 
	}
}

557 
	#UPDATE_THREAD_OCCUPANCY_STATS
(
ITEM
) { \

558 
THREAD
.
ITEM
##
_occu∑ncy
 +THREAD.ITEM##
_cou¡
; \

559 i‡(
THREAD
.
ITEM
##
_cou¡
 =ITEM##
_size
) \

560 
THREAD
.
ITEM
##
_fuŒ
++; \

561 }

	)

564 
	#UPDATE_CORE_OCCUPANCY_STATS
(
ITEM
) { \

565 
CORE
.
ITEM
##
_occu∑ncy
 +CORE.ITEM##
_cou¡
; \

566 i‡(
CORE
.
ITEM
##
_cou¡
 =ITEM##
_size
 * 
p_thªads
) \

567 
CORE
.
ITEM
##
_fuŒ
++; \

568 }

	)

571 
	$p_upd©e_occu∑ncy_°©s
()

573 
c‹e
, 
thªad
;

575 
FOREACH_CORE
 {

578 i‡(
rob_köd
 =
rob_köd_sh¨ed
)

579 
	`UPDATE_CORE_OCCUPANCY_STATS
(
rob
);

580 i‡(
iq_köd
 =
iq_köd_sh¨ed
)

581 
	`UPDATE_CORE_OCCUPANCY_STATS
(
iq
);

582 i‡(
lsq_köd
 =
lsq_köd_sh¨ed
)

583 
	`UPDATE_CORE_OCCUPANCY_STATS
(
lsq
);

584 i‡(
rf_köd
 =
rf_köd_sh¨ed
) {

585 
	`UPDATE_CORE_OCCUPANCY_STATS
(
rf_öt
);

586 
	`UPDATE_CORE_OCCUPANCY_STATS
(
rf_Â
);

590 
FOREACH_THREAD
 {

591 i‡(
rob_köd
 =
rob_köd_¥iv©e
)

592 
	`UPDATE_THREAD_OCCUPANCY_STATS
(
rob
);

593 i‡(
iq_köd
 =
iq_köd_¥iv©e
)

594 
	`UPDATE_THREAD_OCCUPANCY_STATS
(
iq
);

595 i‡(
lsq_köd
 =
lsq_köd_¥iv©e
)

596 
	`UPDATE_THREAD_OCCUPANCY_STATS
(
lsq
);

597 i‡(
rf_köd
 =
rf_köd_¥iv©e
) {

598 
	`UPDATE_THREAD_OCCUPANCY_STATS
(
rf_öt
);

599 
	`UPDATE_THREAD_OCCUPANCY_STATS
(
rf_Â
);

603 
	}
}

606 
uöt64_t
 
	g°age_time_„tch
;

607 
uöt64_t
 
	g°age_time_decode
;

608 
uöt64_t
 
	g°age_time_di•©ch
;

609 
uöt64_t
 
	g°age_time_issue
;

610 
uöt64_t
 
	g°age_time_wrôeback
;

611 
uöt64_t
 
	g°age_time_commô
;

612 
uöt64_t
 
	g°age_time_ª°
;

613 
uöt64_t
 
	g°age_time_°¨t
;

615 
	#STAGE
(
«me
) \

616 
p_
##
	`«me
(); \

617 i‡(
p_°age_time_°©s
) { \

618 
uöt64_t
 
íd
 = 
	`ke_timî
(); \

619 
°age_time_
##
«me
 +
íd
 - 
°age_time_°¨t
; \

620 
°age_time_°¨t
 = 
íd
; }

	)

621 
	$p_°ages
()

624 i‡(!
p_c⁄ãxt_swôch
 && 
ke
->
c⁄ãxt_ªscheduÀ
) {

625 
	`p_°©ic_scheduÀ
();

626 
ke
->
c⁄ãxt_ªscheduÀ
 = 0;

631 i‡(
p_c⁄ãxt_swôch
 && !
p
->
˘x_dóŒoc_sig«ls
 &&

632 (
ke
->
c⁄ãxt_ªscheduÀ
 || 
p
->
˘x_Æloc_ﬁde°
 + 
p_c⁄ãxt_qu™tum
 <
sim_cy˛e
))

634 
	`p_dy«mic_scheduÀ
();

635 
ke
->
c⁄ãxt_ªscheduÀ
 = 0;

639 i‡(
p_°age_time_°©s
) {

640 
uöt64_t
 
íd
 = 
	`ke_timî
();

641 i‡(
°age_time_°¨t
)

642 
°age_time_ª°
 +
íd
 - 
°age_time_°¨t
;

643 
°age_time_°¨t
 = 
íd
;

647 
	`STAGE
(
commô
);

648 
	`STAGE
(
wrôeback
);

649 
	`STAGE
(
issue
);

650 
	`STAGE
(
di•©ch
);

651 
	`STAGE
(
decode
);

652 
	`STAGE
(
„tch
);

655 i‡(
p_occu∑ncy_°©s
)

656 
	`p_upd©e_occu∑ncy_°©s
();

657 
	}
}

658 #unde‡
STAGE


662 
	$p_Á°_f‹w¨d
(
uöt64_t
 
cy˛es
)

664 
c‹e
, 
thªad
;

667 
cy˛es
 && 
ke
->
c⁄ãxt_li°_hód
) {

668 
	`ke_run
();

669 
cy˛es
--;

674 
FOREACH_CORE
 
FOREACH_THREAD
 {

675 i‡(
THREAD
.
˘x
 && 
	`˘x_gë_°©us
(THREAD.˘x, 
˘x_föished
)) {

676 
	`ke_li°_ªmove
(
ke_li°_föished
, 
THREAD
.
˘x
);

677 
	`˘x_‰ì
(
THREAD
.
˘x
);

678 
THREAD
.
˘x
 = 
NULL
;

681 
	}
}

687 
uöt32_t
 
	$p_éb_addªss
(
˘x
, 
uöt32_t
 
vaddr
)

689 
	`as£π
(
˘x
 >0 && ctx < 
p_c‹es
 * 
p_thªads
);

690  (
vaddr
 >> 
MEM_LOGPAGESIZE
Ë* 
p_c‹es
 * 
p_thªads
 + 
˘x
;

691 
	}
}

	@queues.c

20 
	~<m2s.h
>

27 
uöt32_t
 
	g„tchq_size
 = 64;

30 
	$„tchq_ªg_›ti⁄s
()

32 
	`›t_ªg_uöt32
("-„tchq_size", "„tch queuêsizêö byãs", &
„tchq_size
);

33 
	}
}

36 
	$„tchq_öô
()

38 
c‹e
, 
thªad
;

39 
FOREACH_CORE
 
FOREACH_THREAD


40 
THREAD
.
„tchq
 = 
	`li°_¸óã
(
„tchq_size
);

41 
	}
}

44 
	$„tchq_d⁄e
()

46 
c‹e
, 
thªad
;

47 
li°_t
 *
„tchq
;

48 
u›_t
 *
u›
;

50 
FOREACH_CORE
 
FOREACH_THREAD
 {

51 
„tchq
 = 
THREAD
.fetchq;

52 
	`li°_cou¡
(
„tchq
)) {

53 
u›
 = 
	`li°_ªmove_©
(
„tchq
, 0);

54 
u›
->
ö_„tchq
 = 0;

55 
	`u›_‰ì_if_nŸ_queued
(
u›
);

57 
	`li°_‰ì
(
„tchq
);

59 
	}
}

62 
u›_t
 *
	$„tchq_ªmove
(
c‹e
, 
thªad
, 
ödex
)

64 
li°_t
 *
„tchq
 = 
THREAD
.fetchq;

65 
u›_t
 *
u›
;

66 
	`as£π
(
ödex
 >0 && index < 
	`li°_cou¡
(
„tchq
));

67 
u›
 = 
	`li°_ªmove_©
(
„tchq
, 
ödex
);

68 
u›
->
ö_„tchq
 = 0;

69 i‡(!
u›
->
„tch_tˇche
 && !u›->
m›_ödex
) {

70 
THREAD
.
„tchq_occ
 -
u›
->
m›_size
;

71 
	`as£π
(
THREAD
.
„tchq_occ
 >= 0);

73 i‡(
u›
->
„tch_tˇche
) {

74 
THREAD
.
tˇcheq_occ
--;

75 
	`as£π
(
THREAD
.
tˇcheq_occ
 >= 0);

77 i‡(!
	`li°_cou¡
(
„tchq
)) {

78 
	`as£π
(!
THREAD
.
„tchq_occ
);

79 
	`as£π
(!
THREAD
.
tˇcheq_occ
);

81  
u›
;

82 
	}
}

85 
	$„tchq_ªcovî
(
c‹e
, 
thªad
)

87 
li°_t
 *
„tchq
 = 
THREAD
.fetchq;

88 
u›_t
 *
u›
;

90 
	`li°_cou¡
(
„tchq
)) {

91 
u›
 = 
	`li°_gë
(
„tchq
, 
	`li°_cou¡
(fetchq) - 1);

92 
	`as£π
(
u›
->
thªad
 ==Åhread);

93 i‡(!
u›
->
•ecmode
)

95 
u›
 = 
	`„tchq_ªmove
(
c‹e
, 
thªad
, 
	`li°_cou¡
(
„tchq
) - 1);

96 
	`u›_‰ì_if_nŸ_queued
(
u›
);

98 
	}
}

105 
uöt32_t
 
	gu›q_size
 = 32;

108 
	$u›q_ªg_›ti⁄s
()

110 
	`›t_ªg_uöt32
("-u›q_size", "u› queuêsizêö mi¸oö°ru˘i⁄s", &
u›q_size
);

111 
	}
}

114 
	$u›q_öô
()

116 
c‹e
, 
thªad
;

117 
FOREACH_CORE
 
FOREACH_THREAD


118 
THREAD
.
u›q
 = 
	`li°_¸óã
(
u›q_size
);

119 
	}
}

122 
	$u›q_d⁄e
()

124 
c‹e
, 
thªad
;

125 
li°_t
 *
u›q
;

126 
u›_t
 *
u›
;

128 
FOREACH_CORE
 
FOREACH_THREAD
 {

129 
u›q
 = 
THREAD
.uopq;

130 
	`li°_cou¡
(
u›q
)) {

131 
u›
 = 
	`li°_ªmove_©
(
u›q
, 0);

132 
u›
->
ö_u›q
 = 0;

133 
	`u›_‰ì_if_nŸ_queued
(
u›
);

135 
	`li°_‰ì
(
u›q
);

137 
	}
}

140 
	$u›q_ªcovî
(
c‹e
, 
thªad
)

142 
li°_t
 *
u›q
 = 
THREAD
.uopq;

143 
u›_t
 *
u›
;

145 
	`li°_cou¡
(
u›q
)) {

146 
u›
 = 
	`li°_gë
(
u›q
, 
	`li°_cou¡
(uopq) - 1);

147 
	`as£π
(
u›
->
thªad
 ==Åhread);

148 i‡(!
u›
->
•ecmode
)

150 
	`li°_ªmove_©
(
u›q
, 
	`li°_cou¡
(uopq) - 1);

151 
u›
->
ö_u›q
 = 0;

152 
	`u›_‰ì_if_nŸ_queued
(
u›
);

154 
	}
}

161 
uöt32_t
 
	giq_size
 = 40;

162 
iq_köd_íum
 
	giq_köd
 = 
iq_köd_¥iv©e
;

165 
	$iq_ªg_›ti⁄s
()

167 *
iq_köd_m≠
[] = { "shared", "private" };

168 
	`›t_ªg_íum
("-iq_kind", "instruction queue kind {shared|private}",

169 (*Ë&
iq_köd
, 
iq_köd_m≠
, 2);

170 
	`›t_ªg_uöt32
("-iq_size", "instruction queue sizeÖerÅhread",

171 &
iq_size
);

172 
	}
}

175 
	$iq_öô
()

177 
c‹e
, 
thªad
;

178 
FOREACH_CORE
 
FOREACH_THREAD


179 
THREAD
.
iq
 = 
	` li°_¸óã
();

180 
	}
}

183 
	$iq_d⁄e
()

185 
 li°_t
 *
iq
;

186 
u›_t
 *
u›
;

187 
c‹e
, 
thªad
;

188 
FOREACH_CORE
 
FOREACH_THREAD
 {

189 
iq
 = 
THREAD
.iq;

190 
	` li°_hód
(
iq
);

191 
	` li°_cou¡
(
iq
)) {

192 
u›
 = 
	` li°_gë
(
iq
);

193 
u›
->
ö_iq
 = 0;

194 
	` li°_ªmove
(
iq
);

195 
	`u›_‰ì_if_nŸ_queued
(
u›
);

197 
	` li°_‰ì
(
iq
);

199 
	}
}

202 
	$iq_ˇn_ö£π
(
u›_t
 *
u›
)

204 
c‹e
 = 
u›
->core;

205 
thªad
 = 
u›
->thread;

206 
cou¡
, 
size
;

208 
size
 = 
iq_köd
 =
iq_köd_¥iv©e
 ? 
iq_size
 : iq_sizê* 
p_thªads
;

209 
cou¡
 = 
iq_köd
 =
iq_köd_¥iv©e
 ? 
THREAD
.
iq_cou¡
 : 
CORE
.iq_count;

210  
cou¡
 < 
size
;

211 
	}
}

216 
	$iq_ö£π
(
u›_t
 *
u›
)

218 
c‹e
 = 
u›
->core;

219 
thªad
 = 
u›
->thread;

220 
 li°_t
 *
iq
 = 
THREAD
.iq;

222 
	`as£π
(!
u›
->
ö_iq
);

223 
	` li°_out
(
iq
);

224 
	` li°_ö£π
(
iq
, 
u›
);

225 
u›
->
ö_iq
 = 1;

227 
CORE
.
iq_cou¡
++;

228 
THREAD
.
iq_cou¡
++;

229 
	}
}

234 
	$iq_ªmove
(
c‹e
, 
thªad
)

236 
 li°_t
 *
iq
 = 
THREAD
.iq;

237 
u›_t
 *
u›
;

239 
u›
 = 
	` li°_gë
(
iq
);

240 
	`as£π
(
	`u›_exi°s
(
u›
));

241 
	` li°_ªmove
(
iq
);

242 
u›
->
ö_iq
 = 0;

244 
	`as£π
(
CORE
.
iq_cou¡
 && 
THREAD
.iq_count);

245 
CORE
.
iq_cou¡
--;

246 
THREAD
.
iq_cou¡
--;

247 
	}
}

251 
	$iq_ªcovî
(
c‹e
, 
thªad
)

253 
 li°_t
 *
iq
 = 
THREAD
.iq;

254 
u›_t
 *
u›
;

256 
	` li°_hód
(
iq
);

257 !
	` li°_eﬁ
(
iq
)) {

258 
u›
 = 
	` li°_gë
(
iq
);

259 i‡(
u›
->
•ecmode
) {

260 
	`iq_ªmove
(
c‹e
, 
thªad
);

261 
	`u›_‰ì_if_nŸ_queued
(
u›
);

264 
	` li°_√xt
(
iq
);

266 
	}
}

273 
uöt32_t
 
	glsq_size
 = 20;

274 
lsq_köd_íum
 
	glsq_köd
 = 
lsq_köd_¥iv©e
;

277 
	$lsq_ªg_›ti⁄s
()

279 *
lsq_köd_m≠
[] = { "shared", "private" };

280 
	`›t_ªg_íum
("-lsq_kind", "load/store queue kind {shared|private}",

281 (*Ë&
lsq_köd
, 
lsq_köd_m≠
, 2);

282 
	`›t_ªg_uöt32
("-lsq_size", "load/store queue sizeÖerÅhread",

283 &
lsq_size
);

284 
	}
}

287 
	$lsq_öô
()

289 
c‹e
, 
thªad
;

290 
FOREACH_CORE
 
FOREACH_THREAD
 {

291 
THREAD
.
lq
 = 
	` li°_¸óã
();

292 
THREAD
.
sq
 = 
	` li°_¸óã
();

294 
	}
}

297 
	$lsq_d⁄e
()

299 
 li°_t
 *
lq
, *
sq
;

300 
u›_t
 *
u›
;

301 
c‹e
, 
thªad
;

304 
FOREACH_CORE
 
FOREACH_THREAD
 {

305 
lq
 = 
THREAD
.lq;

306 
	` li°_hód
(
lq
);

307 
	` li°_cou¡
(
lq
)) {

308 
u›
 = 
	` li°_gë
(
lq
);

309 
u›
->
ö_lq
 = 0;

310 
	` li°_ªmove
(
lq
);

311 
	`u›_‰ì_if_nŸ_queued
(
u›
);

313 
	` li°_‰ì
(
lq
);

317 
FOREACH_CORE
 
FOREACH_THREAD
 {

318 
sq
 = 
THREAD
.sq;

319 
	` li°_hód
(
sq
);

320 
	` li°_cou¡
(
sq
)) {

321 
u›
 = 
	` li°_gë
(
sq
);

322 
u›
->
ö_sq
 = 0;

323 
	` li°_ªmove
(
sq
);

324 
	`u›_‰ì_if_nŸ_queued
(
u›
);

326 
	` li°_‰ì
(
sq
);

328 
	}
}

331 
	$lsq_ˇn_ö£π
(
u›_t
 *
u›
)

333 
c‹e
 = 
u›
->core;

334 
thªad
 = 
u›
->thread;

335 
cou¡
, 
size
;

337 
size
 = 
lsq_köd
 =
lsq_köd_¥iv©e
 ? 
lsq_size
 :Üsq_sizê* 
p_thªads
;

338 
cou¡
 = 
lsq_köd
 =
lsq_köd_¥iv©e
 ? 
THREAD
.
lsq_cou¡
 : 
CORE
.lsq_count;

339  
cou¡
 < 
size
;

340 
	}
}

344 
	$lsq_ö£π
(
u›_t
 *
u›
)

346 
c‹e
 = 
u›
->core;

347 
thªad
 = 
u›
->thread;

348 
 li°_t
 *
lq
 = 
THREAD
.lq;

349 
 li°_t
 *
sq
 = 
THREAD
.sq;

351 
	`as£π
(!
u›
->
ö_lq
 && !u›->
ö_sq
);

352 
	`as£π
((
u›
->
Êags
 & 
FLOAD
Ë|| (u›->Êag†& 
FSTORE
));

353 i‡(
u›
->
Êags
 & 
FLOAD
) {

354 
	` li°_out
(
lq
);

355 
	` li°_ö£π
(
lq
, 
u›
);

356 
u›
->
ö_lq
 = 1;

358 
	` li°_out
(
sq
);

359 
	` li°_ö£π
(
sq
, 
u›
);

360 
u›
->
ö_sq
 = 1;

362 
CORE
.
lsq_cou¡
++;

363 
THREAD
.
lsq_cou¡
++;

364 
	}
}

369 
	$lsq_ªcovî
(
c‹e
, 
thªad
)

371 
 li°_t
 *
lq
 = 
THREAD
.lq;

372 
 li°_t
 *
sq
 = 
THREAD
.sq;

373 
u›_t
 *
u›
;

376 
	` li°_hód
(
lq
);

377 !
	` li°_eﬁ
(
lq
)) {

378 
u›
 = 
	` li°_gë
(
lq
);

379 i‡(
u›
->
•ecmode
) {

380 
	`lq_ªmove
(
c‹e
, 
thªad
);

381 
	`u›_‰ì_if_nŸ_queued
(
u›
);

384 
	` li°_√xt
(
lq
);

388 
	` li°_hód
(
sq
);

389 !
	` li°_eﬁ
(
sq
)) {

390 
u›
 = 
	` li°_gë
(
sq
);

391 i‡(
u›
->
•ecmode
) {

392 
	`sq_ªmove
(
c‹e
, 
thªad
);

393 
	`u›_‰ì_if_nŸ_queued
(
u›
);

396 
	` li°_√xt
(
sq
);

398 
	}
}

403 
	$lq_ªmove
(
c‹e
, 
thªad
)

405 
 li°_t
 *
lq
 = 
THREAD
.lq;

406 
u›_t
 *
u›
;

408 
u›
 = 
	` li°_gë
(
lq
);

409 
	`as£π
(
	`u›_exi°s
(
u›
));

410 
	` li°_ªmove
(
lq
);

411 
u›
->
ö_lq
 = 0;

413 
	`as£π
(
CORE
.
lsq_cou¡
 && 
THREAD
.lsq_count);

414 
CORE
.
lsq_cou¡
--;

415 
THREAD
.
lsq_cou¡
--;

416 
	}
}

420 
	$sq_ªmove
(
c‹e
, 
thªad
)

422 
 li°_t
 *
sq
 = 
THREAD
.sq;

423 
u›_t
 *
u›
;

425 
u›
 = 
	` li°_gë
(
sq
);

426 
	`as£π
(
	`u›_exi°s
(
u›
));

427 
	`as£π
(
u›
->
ö_sq
);

428 
	` li°_ªmove
(
sq
);

429 
u›
->
ö_sq
 = 0;

431 
	`as£π
(
CORE
.
lsq_cou¡
 && 
THREAD
.lsq_count);

432 
CORE
.
lsq_cou¡
--;

433 
THREAD
.
lsq_cou¡
--;

434 
	}
}

441 
	$evítq_öô
()

443 
c‹e
;

444 
FOREACH_CORE


445 
CORE
.
evítq
 = 
	` li°_¸óã
();

446 
	}
}

449 
	$evítq_d⁄e
()

451 
c‹e
;

452 
FOREACH_CORE
 {

453 
	` li°_cou¡
(
CORE
.
evítq
))

454 
	`u›_‰ì_if_nŸ_queued
(
	`evítq_exåa˘
(
CORE
.
evítq
));

455 
	` li°_‰ì
(
CORE
.
evítq
);

457 
	}
}

460 
	$evítq_com∑ª
(c⁄° *
ôem1
, c⁄° *
ôem2
)

462 c⁄° 
u›_t
 *
u›1
 = 
ôem1
;

463 c⁄° 
u›_t
 *
u›2
 = 
ôem2
;

464  
u›1
->
whí
 !
u›2
->when ? uop1->when - uop2->when

465 : 
u›1
->
£q
 - 
u›2
->seq;

466 
	}
}

469 
	$evítq_l⁄gœt
(
c‹e
, 
thªad
)

471 
 li°_t
 *
evítq
 = 
CORE
.eventq;

472 
u›_t
 *
u›
;

474 
	` li°_hód
(
evítq
); !
	` li°_eﬁ
”vítq); 
	` li°_√xt
(eventq)) {

475 
u›
 = 
	` li°_gë
(
evítq
);

476 i‡(
u›
->
thªad
 !=Åhread)

478 i‡(
sim_cy˛e
 - 
u›
->
issue_whí
 > 20)

482 
	}
}

485 
	$evítq_ˇchemiss
(
c‹e
, 
thªad
)

487 
 li°_t
 *
evítq
 = 
CORE
.eventq;

488 
u›_t
 *
u›
;

490 
	` li°_hód
(
evítq
); !
	` li°_eﬁ
”vítq); 
	` li°_√xt
(eventq)) {

491 
u›
 = 
	` li°_gë
(
evítq
);

492 i‡(
u›
->
thªad
 !thªad || !(u›->
Êags
 & 
FLOAD
))

494 i‡(
sim_cy˛e
 - 
u›
->
issue_whí
 > 5)

498 
	}
}

501 
	$evítq_ö£π
(
 li°_t
 *
evítq
, 
u›_t
 *
u›
)

503 
u›_t
 *
ôem
;

504 
	`as£π
(!
u›
->
ö_evítq
);

505 
	` li°_hód
(
evítq
);

507 
ôem
 = 
	` li°_gë
(
evítq
);

508 i‡(!
ôem
 || 
	`evítq_com∑ª
(
u›
, item) < 0)

510 
	` li°_√xt
(
evítq
);

512 
	` li°_ö£π
(
evítq
, 
u›
);

513 
u›
->
ö_evítq
 = 1;

514 
	}
}

517 
u›_t
 *
	$evítq_exåa˘
(
 li°_t
 *
evítq
)

519 
u›_t
 *
u›
;

520 i‡(!
	` li°_cou¡
(
evítq
))

521  
NULL
;

522 
	` li°_hód
(
evítq
);

523 
u›
 = 
	` li°_gë
(
evítq
);

524 
	`as£π
(
	`u›_exi°s
(
u›
));

525 
	`as£π
(
u›
->
ö_evítq
);

526 
	` li°_ªmove
(
evítq
);

527 
u›
->
ö_evítq
 = 0;

528  
u›
;

529 
	}
}

532 
	$evítq_ªcovî
(
c‹e
, 
thªad
)

534 
 li°_t
 *
evítq
 = 
CORE
.eventq;

535 
u›_t
 *
u›
;

537 
	` li°_hód
(
evítq
);

538 !
	` li°_eﬁ
(
evítq
)) {

539 
u›
 = 
	` li°_gë
(
evítq
);

540 i‡(
u›
->
thªad
 =thªad && u›->
•ecmode
) {

541 
	` li°_ªmove
(
evítq
);

542 
u›
->
ö_evítq
 = 0;

543 
	`u›_‰ì_if_nŸ_queued
(
u›
);

546 
	` li°_√xt
(
evítq
);

548 
	}
}

	@recover.c

20 
	~<m2s.h
>

23 
	$p_ªcovî
(
c‹e
, 
thªad
)

25 
u›_t
 *
u›
;

28 
	`„tchq_ªcovî
(
c‹e
, 
thªad
);

29 
	`u›q_ªcovî
(
c‹e
, 
thªad
);

30 
	`iq_ªcovî
(
c‹e
, 
thªad
);

31 
	`lsq_ªcovî
(
c‹e
, 
thªad
);

32 
	`evítq_ªcovî
(
c‹e
, 
thªad
);

39 
u›
 = 
	`rob_èû
(
c‹e
, 
thªad
);

40 i‡(!
u›
)

45 
	`as£π
(
u›
->
c‹e
 == core);

46 
	`as£π
(
u›
->
thªad
 ==Åhread);

47 i‡(!
u›
->
•ecmode
)

51 i‡(
u›
->
„tch_tˇche
)

52 
THREAD
.
tˇche
->
squashed
++;

53 
THREAD
.
squashed
++;

54 
CORE
.
squashed
++;

55 
p
->
squashed
++;

58 i‡(!
u›
->
com∂ëed
)

59 
	`rf_wrôe
(
u›
);

60 
	`rf_undo
(
u›
);

63 
	`esim_debug
("uopáction=\"squash\", core=%d, seq=%llu\n",

64 
u›
->
c‹e
, (Ëu›->
di_£q
);

67 
	`rob_ªmove_èû
(
c‹e
, 
thªad
);

71 i‡(
	`˘x_gë_°©us
(
THREAD
.
˘x
, 
˘x_•ecmode
))

72 
	`˘x_ªcovî
(
THREAD
.
˘x
);

75 
THREAD
.
„tch_°Æl
 = 
	`MAX
(THREAD.„tch_°Æl, 
p_ªcovî_≥«…y
);

76 
THREAD
.
„tch_√ù
 = THREAD.
˘x
->
ªgs
->
eù
;

77 
	}
}

	@rf.c

20 
	~<m2s.h
>

25 
uöt32_t
 
	grf_öt_size
 = 80;

26 
uöt32_t
 
	grf_Â_size
 = 40;

27 
rf_köd_íum
 
	grf_köd
 = 
rf_köd_¥iv©e
;

34 
uöt32_t
 
	grf_öt_loˇl_size
;

35 
uöt32_t
 
	grf_Â_loˇl_size
;

39 
	$rf_öt_ª˛aim
(
c‹e
, 
thªad
)

41 
phªg
;

42 
rf_t
 *
rf
 = 
THREAD
.rf;

45 
	`as£π
(
rf
->
öt_‰ì_phªg_cou¡
 > 0);

46 
phªg
 = 
rf
->
öt_‰ì_phªg
[rf->
öt_‰ì_phªg_cou¡
 - 1];

47 
rf
->
öt_‰ì_phªg_cou¡
--;

48 
CORE
.
rf_öt_cou¡
++;

49 
THREAD
.
rf_öt_cou¡
++;

50 
	`as£π
(!
rf
->
öt_phªg
[
phªg
].
busy
);

51 
	`as£π
(!
rf
->
öt_phªg
[
phªg
].
≥ndög
);

52  
phªg
;

53 
	}
}

57 
	$rf_Â_ª˛aim
(
c‹e
, 
thªad
)

59 
phªg
;

60 
rf_t
 *
rf
 = 
THREAD
.rf;

63 
	`as£π
(
rf
->
Â_‰ì_phªg_cou¡
 > 0);

64 
phªg
 = 
rf
->
Â_‰ì_phªg
[rf->
Â_‰ì_phªg_cou¡
 - 1];

65 
rf
->
Â_‰ì_phªg_cou¡
--;

66 
CORE
.
rf_Â_cou¡
++;

67 
THREAD
.
rf_Â_cou¡
++;

68 
	`as£π
(!
rf
->
Â_phªg
[
phªg
].
busy
);

69 
	`as£π
(!
rf
->
Â_phªg
[
phªg
].
≥ndög
);

70  
phªg
;

71 
	}
}

79 
	$rf_ªg_›ti⁄s
()

81 *
rf_köd_m≠
[] = { "shared", "private" };

82 
	`›t_ªg_íum
("-rf_kind", "physicalÑegister file {shared|private}",

83 (*Ë&
rf_köd
, 
rf_köd_m≠
, 2);

84 
	`›t_ªg_uöt32
("-rf_int_size", "integerÖhysicalÑegister file sizeÖerÅhread",

85 &
rf_öt_size
);

86 
	`›t_ªg_uöt32
("-rf_fp_size", "floating-pointÖhysicalÑegister file sizeÖerÅhread",

87 &
rf_Â_size
);

88 
	}
}

91 
	$rf_öô_thªad
(
c‹e
, 
thªad
)

93 
dï
, 
phªg
, 
Âhªg
;

94 
rf_t
 *
rf
 = 
THREAD
.rf;

99 
Âhªg
 = -1;

100 
dï
 = 0; dï < 
DEP_INT_COUNT
; dep++) {

101 i‡(
	`DEP_IS_FLAG
(
dï
 + 
DEP_INT_FIRST
)) {

102 
	`as£π
(
Âhªg
 >= 0);

103 
phªg
 = 
Âhªg
;

105 
phªg
 = 
	`rf_öt_ª˛aim
(
c‹e
, 
thªad
);

106 
Âhªg
 = 
phªg
;

108 
rf
->
öt_phªg
[
phªg
].
busy
++;

109 
rf
->
öt_øt
[
dï
] = 
phªg
;

113 
dï
 = 0; dï < 
DEP_FP_COUNT
; dep++) {

114 
phªg
 = 
	`rf_Â_ª˛aim
(
c‹e
, 
thªad
);

115 
rf
->
Â_phªg
[
phªg
].
busy
++;

116 
rf
->
Â_øt
[
dï
] = 
phªg
;

118 
	}
}

121 
	$rf_öô
()

123 
c‹e
, 
thªad
;

126 i‡(
rf_öt_size
 < 
RF_MIN_INT_SIZE
)

127 
	`Áèl
("rf_öt_sizêmu° bê©Üó° %d", 
RF_MIN_INT_SIZE
);

128 i‡(
rf_Â_size
 < 
RF_MIN_FP_SIZE
)

129 
	`Áèl
("rf_Â_sizêmu° bê©Üó° %d", 
RF_MIN_FP_SIZE
);

132 i‡(
rf_köd
 =
rf_köd_¥iv©e
) {

133 
rf_öt_loˇl_size
 = 
rf_öt_size
;

134 
rf_Â_loˇl_size
 = 
rf_Â_size
;

136 
rf_öt_loˇl_size
 = 
rf_öt_size
 * 
p_thªads
;

137 
rf_Â_loˇl_size
 = 
rf_Â_size
 * 
p_thªads
;

141 
FOREACH_CORE
 
FOREACH_THREAD
 {

142 
THREAD
.
rf
 = 
	`rf_¸óã
(
rf_öt_loˇl_size
, 
rf_Â_loˇl_size
);

143 
	`rf_öô_thªad
(
c‹e
, 
thªad
);

145 
	}
}

148 
	$rf_d⁄e
()

150 
c‹e
, 
thªad
;

151 
FOREACH_CORE
 
FOREACH_THREAD


152 
	`rf_‰ì
(
THREAD
.
rf
);

153 
	}
}

156 
rf_t
 *
	$rf_¸óã
(
öt_size
, 
Â_size
)

158 
rf_t
 *
rf
;

159 
phªg
;

162 
rf
 = 
	`ˇŒoc
(1, (
rf_t
));

165 
rf
->
öt_phªg_cou¡
 = 
öt_size
;

166 
rf
->
öt_phªg
 = 
	`ˇŒoc
(
öt_size
, (
phªg_t
));

167 
rf
->
öt_‰ì_phªg
 = 
	`ˇŒoc
(
öt_size
, ());

168 
rf
->
öt_‰ì_phªg_cou¡
 = 
öt_size
;

169 
phªg
 = 0;Öhªg < 
öt_size
;Öhreg++)

170 
rf
->
öt_‰ì_phªg
[
phªg
] =Öhreg;

173 
rf
->
Â_phªg_cou¡
 = 
Â_size
;

174 
rf
->
Â_phªg
 = 
	`ˇŒoc
(
Â_size
, (
phªg_t
));

175 
rf
->
Â_‰ì_phªg
 = 
	`ˇŒoc
(
Â_size
, ());

176 
rf
->
Â_‰ì_phªg_cou¡
 = 
Â_size
;

177 
phªg
 = 0;Öhªg < 
Â_size
;Öhreg++)

178 
rf
->
Â_‰ì_phªg
[
phªg
] =Öhreg;

181  
rf
;

182 
	}
}

185 
	$rf_‰ì
(
rf_t
 *
rf
)

187 
	`‰ì
(
rf
->
öt_phªg
);

188 
	`‰ì
(
rf
->
öt_‰ì_phªg
);

189 
	`‰ì
(
rf
->
Â_phªg
);

190 
	`‰ì
(
rf
->
Â_‰ì_phªg
);

191 
	`‰ì
(
rf
);

192 
	}
}

195 
	$rf_dump
(
c‹e
, 
thªad
, 
FILE
 *
f
)

197 
i
;

200 
	`Ârötf
(
f
, "I¡egîÑegi°î fûê© c‹ê%d,Åhªad %d\n", 
c‹e
, 
thªad
);

201 
	`Ârötf
(
f
, "Format is [busy,Öending], * = free\n");

202 
i
 = 0; i < 
rf_öt_loˇl_size
; i++) {

203 
	`Ârötf
(
f
, " %3d%c[%d-%d]", 
i
, 
THREAD
.
rf
->
öt_phªg
[i].
busy
 ? ' ' : '*',

204 
THREAD
.
rf
->
öt_phªg
[
i
].
busy
,

205 
THREAD
.
rf
->
öt_phªg
[
i
].
≥ndög
);

206 i‡(
i
 % 5 =4 && i !
rf_öt_loˇl_size
 - 1)

207 
	`Ârötf
(
f
, "\n");

210 
	`Ârötf
(
f
, "\nIteger Register Aliasing Table:\n");

211 
i
 = 
DEP_INT_FIRST
; i <
DEP_INT_LAST
; i++) {

212 
	`Ârötf
(
f
, " %2d->%-3d", 
i
, 
THREAD
.
rf
->
öt_øt
[ò- 
DEP_INT_FIRST
]);

213 i‡((
i
 - 
DEP_INT_FIRST
) % 8 == 7)

214 
	`Ârötf
(
f
, "\n");

217 
	`Ârötf
(
f
, "\n");

218 
	`Ârötf
(
f
, "int_free_phreg_count %d # Number of free integerÑegisters\n",

219 
THREAD
.
rf
->
öt_‰ì_phªg_cou¡
);

220 
	`Ârötf
(
f
, "\n");

223 
	`Ârötf
(
f
, "Flﬂtög-poöàªgi°î fûê© c‹ê%d,Åhªad %d\n", 
c‹e
, 
thªad
);

224 
	`Ârötf
(
f
, "Format is [busy,Öending], * = free\n");

225 
i
 = 0; i < 
rf_Â_loˇl_size
; i++) {

226 
	`Ârötf
(
f
, " %3d%c[%d-%d]", 
i
, 
THREAD
.
rf
->
Â_phªg
[i].
busy
 ? ' ' : '*',

227 
THREAD
.
rf
->
Â_phªg
[
i
].
busy
,

228 
THREAD
.
rf
->
Â_phªg
[
i
].
≥ndög
);

229 i‡(
i
 % 5 =4 && i !
rf_Â_loˇl_size
 - 1)

230 
	`Ârötf
(
f
, "\n");

233 
	`Ârötf
(
f
, "\nIteger Register Aliasing Table:\n");

234 
i
 = 
DEP_FP_FIRST
; i <
DEP_FP_LAST
; i++) {

235 
	`Ârötf
(
f
, " %2d->%-3d", 
i
, 
THREAD
.
rf
->
Â_øt
[ò- 
DEP_FP_FIRST
]);

236 i‡((
i
 - 
DEP_FP_FIRST
) % 8 == 7)

237 
	`Ârötf
(
f
, "\n");

240 
	`Ârötf
(
f
, "\n");

241 
	`Ârötf
(
f
, "fp_free_phreg_count %d # Number of free floating-pointÑegisters\n",

242 
THREAD
.
rf
->
Â_‰ì_phªg_cou¡
);

243 
	`Ârötf
(
f
, "\n");

244 
	}
}

252 
	$rf_cou¡_dïs
(
u›_t
 *
u›
)

254 
dï
, 
l‹eg
;

255 
öt_cou¡
, 
Â_cou¡
, 
Êag_cou¡
;

258 
u›
->
idï_cou¡
 = 0;

259 
u›
->
odï_cou¡
 = 0;

260 
u›
->
ph_öt_idï_cou¡
 = 0;

261 
u›
->
ph_Â_idï_cou¡
 = 0;

262 
u›
->
ph_öt_odï_cou¡
 = 0;

263 
u›
->
ph_Â_odï_cou¡
 = 0;

266 
öt_cou¡
 = 
Â_cou¡
 = 
Êag_cou¡
 = 0;

267 
dï
 = 0; dï < 
ODEP_COUNT
; dep++) {

268 
l‹eg
 = 
u›
->
odï
[
dï
];

269 i‡(
	`DEP_IS_FLAG
(
l‹eg
))

270 
Êag_cou¡
++;

271 i‡(
	`DEP_IS_INT_REG
(
l‹eg
))

272 
öt_cou¡
++;

273 i‡(
	`DEP_IS_FP_REG
(
l‹eg
))

274 
Â_cou¡
++;

276 
u›
->
odï_cou¡
 = 
Êag_cou¡
 + 
öt_cou¡
 + 
Â_cou¡
;

277 
u›
->
ph_öt_odï_cou¡
 = 
Êag_cou¡
 && !
öt_cou¡
 ? 1 : int_count;

278 
u›
->
ph_Â_odï_cou¡
 = 
Â_cou¡
;

281 
öt_cou¡
 = 
Â_cou¡
 = 
Êag_cou¡
 = 0;

282 
dï
 = 0; dï < 
IDEP_COUNT
; dep++) {

283 
l‹eg
 = 
u›
->
idï
[
dï
];

284 i‡(
	`DEP_IS_FLAG
(
l‹eg
))

285 
Êag_cou¡
++;

286 i‡(
	`DEP_IS_INT_REG
(
l‹eg
))

287 
öt_cou¡
++;

288 i‡(
	`DEP_IS_FP_REG
(
l‹eg
))

289 
Â_cou¡
++;

291 
u›
->
idï_cou¡
 = 
Êag_cou¡
 + 
öt_cou¡
 + 
Â_cou¡
;

292 
u›
->
ph_öt_idï_cou¡
 = 
Êag_cou¡
 + 
öt_cou¡
;

293 
u›
->
ph_Â_idï_cou¡
 = 
Â_cou¡
;

294 
	}
}

298 
	$rf_ˇn_ª«me
(
u›_t
 *
u›
)

300 
c‹e
 = 
u›
->core;

301 
thªad
 = 
u›
->thread;

304 i‡(
rf_köd
 =
rf_köd_¥iv©e
) {

305 i‡(
THREAD
.
rf_öt_cou¡
 + 
u›
->
ph_öt_odï_cou¡
 > 
rf_öt_loˇl_size
)

307 i‡(
THREAD
.
rf_Â_cou¡
 + 
u›
->
ph_Â_odï_cou¡
 > 
rf_Â_loˇl_size
)

310 i‡(
CORE
.
rf_öt_cou¡
 + 
u›
->
ph_öt_odï_cou¡
 > 
rf_öt_loˇl_size
)

312 i‡(
CORE
.
rf_Â_cou¡
 + 
u›
->
ph_Â_odï_cou¡
 > 
rf_Â_loˇl_size
)

318 
	}
}

321 
	$rf_ª«me
(
u›_t
 *
u›
)

323 
dï
;

324 
l‹eg
, 
°ªg
, 
phªg
, 
›hªg
;

325 
Êag_phªg
, 
Êag_cou¡
;

326 
c‹e
 = 
u›
->core;

327 
thªad
 = 
u›
->thread;

328 
rf_t
 *
rf
 = 
THREAD
.rf;

331 
dï
 = 0; dï < 
IDEP_COUNT
; dep++) {

332 
l‹eg
 = 
u›
->
idï
[
dï
];

333 i‡(
	`DEP_IS_INT_REG
(
l‹eg
)) {

334 
phªg
 = 
rf
->
öt_øt
[
l‹eg
 - 
DEP_INT_FIRST
];

335 
u›
->
ph_idï
[
dï
] = 
phªg
;

336 
THREAD
.
øt_öt_ªads
++;

337 } i‡(
	`DEP_IS_FP_REG
(
l‹eg
)) {

340 
°ªg
 = (
l‹eg
 - 
DEP_FP_FIRST
 + 
rf
->
Â_t›_of_°ack
) % 8 + DEP_FP_FIRST;

341 
	`as£π
(
	`DEP_IS_FP_REG
(
°ªg
));

344 
phªg
 = 
rf
->
Â_øt
[
°ªg
 - 
DEP_FP_FIRST
];

345 
u›
->
ph_idï
[
dï
] = 
phªg
;

346 
THREAD
.
øt_Â_ªads
++;

349 
u›
->
ph_idï
[
dï
] = -1;

354 
Êag_phªg
 = -1;

355 
Êag_cou¡
 = 0;

356 
dï
 = 0; dï < 
ODEP_COUNT
; dep++) {

357 
l‹eg
 = 
u›
->
odï
[
dï
];

358 i‡(
	`DEP_IS_FLAG
(
l‹eg
)) {

361 
Êag_cou¡
++;

363 } i‡(
	`DEP_IS_INT_REG
(
l‹eg
)) {

366 
phªg
 = 
	`rf_öt_ª˛aim
(
c‹e
, 
thªad
);

367 
rf
->
öt_phªg
[
phªg
].
busy
++;

368 
rf
->
öt_phªg
[
phªg
].
≥ndög
 = 1;

369 
›hªg
 = 
rf
->
öt_øt
[
l‹eg
 - 
DEP_INT_FIRST
];

370 i‡(
Êag_phªg
 < 0)

371 
Êag_phªg
 = 
phªg
;

374 
u›
->
ph_odï
[
dï
] = 
phªg
;

375 
u›
->
ph_oodï
[
dï
] = 
›hªg
;

376 
rf
->
öt_øt
[
l‹eg
 - 
DEP_INT_FIRST
] = 
phªg
;

377 
THREAD
.
øt_öt_wrôes
++;

379 } i‡(
	`DEP_IS_FP_REG
(
l‹eg
)) {

382 
°ªg
 = (
l‹eg
 - 
DEP_FP_FIRST
 + 
rf
->
Â_t›_of_°ack
) % 8 + DEP_FP_FIRST;

383 
	`as£π
(
	`DEP_IS_FP_REG
(
°ªg
));

386 
phªg
 = 
	`rf_Â_ª˛aim
(
c‹e
, 
thªad
);

387 
rf
->
Â_phªg
[
phªg
].
busy
++;

388 
rf
->
Â_phªg
[
phªg
].
≥ndög
 = 1;

389 
›hªg
 = 
rf
->
Â_øt
[
°ªg
 - 
DEP_FP_FIRST
];

392 
u›
->
ph_odï
[
dï
] = 
phªg
;

393 
u›
->
ph_oodï
[
dï
] = 
›hªg
;

394 
rf
->
Â_øt
[
°ªg
 - 
DEP_FP_FIRST
] = 
phªg
;

395 
THREAD
.
øt_Â_wrôes
++;

397 } i‡(
l‹eg
 =
DFPOP
) {

400 
rf
->
Â_t›_of_°ack
 = (rf->fp_top_of_stack + 1) % 8;

402 } i‡(
l‹eg
 =
DFPOP2
) {

405 
rf
->
Â_t›_of_°ack
 = (rf->fp_top_of_stack + 2) % 8;

407 } i‡(
l‹eg
 =
DFPUSH
) {

410 
rf
->
Â_t›_of_°ack
 = (rf->fp_top_of_stack + 7) % 8;

415 
u›
->
ph_odï
[
dï
] = -1;

416 
u›
->
ph_oodï
[
dï
] = -1;

421 i‡(
Êag_cou¡
 > 0) {

422 i‡(
Êag_phªg
 < 0)

423 
Êag_phªg
 = 
	`rf_öt_ª˛aim
(
c‹e
, 
thªad
);

424 
dï
 = 0; dï < 
ODEP_COUNT
; dep++) {

425 
l‹eg
 = 
u›
->
odï
[
dï
];

426 i‡(!
	`DEP_IS_FLAG
(
l‹eg
))

428 
rf
->
öt_phªg
[
Êag_phªg
].
busy
++;

429 
rf
->
öt_phªg
[
Êag_phªg
].
≥ndög
 = 1;

430 
›hªg
 = 
rf
->
öt_øt
[
l‹eg
 - 
DEP_INT_FIRST
];

431 
u›
->
ph_oodï
[
dï
] = 
›hªg
;

432 
u›
->
ph_odï
[
dï
] = 
Êag_phªg
;

433 
rf
->
öt_øt
[
l‹eg
 - 
DEP_INT_FIRST
] = 
Êag_phªg
;

436 
	}
}

440 
	$rf_ªady
(
u›_t
 *
u›
)

442 
l‹eg
, 
phªg
, 
dï
;

443 
c‹e
 = 
u›
->core;

444 
thªad
 = 
u›
->thread;

445 
rf_t
 *
rf
 = 
THREAD
.rf;

447 
dï
 = 0; dï < 
IDEP_COUNT
; dep++) {

448 
l‹eg
 = 
u›
->
idï
[
dï
];

449 
phªg
 = 
u›
->
ph_idï
[
dï
];

450 i‡(
	`DEP_IS_INT_REG
(
l‹eg
Ë&& 
rf
->
öt_phªg
[
phªg
].
≥ndög
)

452 i‡(
	`DEP_IS_FP_REG
(
l‹eg
Ë&& 
rf
->
Â_phªg
[
phªg
].
≥ndög
)

456 
	}
}

459 
	$rf_wrôe
(
u›_t
 *
u›
)

461 
dï
, 
l‹eg
, 
phªg
;

462 
c‹e
 = 
u›
->core;

463 
thªad
 = 
u›
->thread;

464 
rf_t
 *
rf
 = 
THREAD
.rf;

466 
dï
 = 0; dï < 
ODEP_COUNT
; dep++) {

467 
l‹eg
 = 
u›
->
odï
[
dï
];

468 
phªg
 = 
u›
->
ph_odï
[
dï
];

469 i‡(
	`DEP_IS_INT_REG
(
l‹eg
))

470 
rf
->
öt_phªg
[
phªg
].
≥ndög
 = 0;

471 i‡(
	`DEP_IS_FP_REG
(
l‹eg
))

472 
rf
->
Â_phªg
[
phªg
].
≥ndög
 = 0;

474 
	}
}

477 
	$rf_undo
(
u›_t
 *
u›
)

479 
dï
, 
l‹eg
, 
°ªg
, 
phªg
, 
›hªg
;

480 
c‹e
 = 
u›
->core;

481 
thªad
 = 
u›
->thread;

482 
rf_t
 *
rf
 = 
THREAD
.rf;

486 
	`as£π
(
u›
->
•ecmode
);

487 
dï
 = 
ODEP_COUNT
 - 1; dep >= 0; dep--) {

488 
l‹eg
 = 
u›
->
odï
[
dï
];

489 
phªg
 = 
u›
->
ph_odï
[
dï
];

490 
›hªg
 = 
u›
->
ph_oodï
[
dï
];

491 i‡(
	`DEP_IS_INT_REG
(
l‹eg
)) {

494 
	`as£π
(
rf
->
öt_phªg
[
phªg
].
busy
 > 0);

495 
	`as£π
(!
rf
->
öt_phªg
[
phªg
].
≥ndög
);

496 
rf
->
öt_phªg
[
phªg
].
busy
--;

497 i‡(!
rf
->
öt_phªg
[
phªg
].
busy
) {

498 
	`as£π
(
rf
->
öt_‰ì_phªg_cou¡
 < 
rf_öt_loˇl_size
);

499 
	`as£π
(
CORE
.
rf_öt_cou¡
 > 0 && 
THREAD
.rf_int_count > 0);

500 
rf
->
öt_‰ì_phªg
[rf->
öt_‰ì_phªg_cou¡
] = 
phªg
;

501 
rf
->
öt_‰ì_phªg_cou¡
++;

502 
CORE
.
rf_öt_cou¡
--;

503 
THREAD
.
rf_öt_cou¡
--;

507 
rf
->
öt_øt
[
l‹eg
 - 
DEP_INT_FIRST
] = 
›hªg
;

508 
	`as£π
(
rf
->
öt_phªg
[
›hªg
].
busy
);

510 } i‡(
	`DEP_IS_FP_REG
(
l‹eg
)) {

513 
°ªg
 = (
l‹eg
 - 
DEP_FP_FIRST
 + 
rf
->
Â_t›_of_°ack
) % 8 + DEP_FP_FIRST;

514 
	`as£π
(
	`DEP_IS_FP_REG
(
°ªg
));

517 
	`as£π
(
rf
->
Â_phªg
[
phªg
].
busy
 > 0);

518 
	`as£π
(!
rf
->
Â_phªg
[
phªg
].
≥ndög
);

519 
rf
->
Â_phªg
[
phªg
].
busy
--;

520 i‡(!
rf
->
Â_phªg
[
phªg
].
busy
) {

521 
	`as£π
(
rf
->
Â_‰ì_phªg_cou¡
 < 
rf_Â_loˇl_size
);

522 
	`as£π
(
CORE
.
rf_Â_cou¡
 > 0 && 
THREAD
.rf_fp_count > 0);

523 
rf
->
Â_‰ì_phªg
[rf->
Â_‰ì_phªg_cou¡
] = 
phªg
;

524 
rf
->
Â_‰ì_phªg_cou¡
++;

525 
CORE
.
rf_Â_cou¡
--;

526 
THREAD
.
rf_Â_cou¡
--;

530 
rf
->
Â_øt
[
°ªg
 - 
DEP_FP_FIRST
] = 
›hªg
;

531 
	`as£π
(
rf
->
Â_phªg
[
›hªg
].
busy
);

533 } i‡(
l‹eg
 =
DFPOP
) {

536 
rf
->
Â_t›_of_°ack
 = (rf->fp_top_of_stack + 7) % 8;

538 } i‡(
l‹eg
 =
DFPOP2
) {

541 
rf
->
Â_t›_of_°ack
 = (rf->fp_top_of_stack + 6) % 8;

543 } i‡(
l‹eg
 =
DFPUSH
) {

546 
rf
->
Â_t›_of_°ack
 = (rf->fp_top_of_stack + 1) % 8;

551 
	`as£π
(
phªg
 == -1);

552 
	`as£π
(
›hªg
 == -1);

555 
	}
}

558 
	$rf_commô
(
u›_t
 *
u›
)

560 
dï
, 
l‹eg
, 
phªg
, 
›hªg
;

561 
c‹e
 = 
u›
->core;

562 
thªad
 = 
u›
->thread;

563 
rf_t
 *
rf
 = 
THREAD
.rf;

565 
	`as£π
(!
u›
->
•ecmode
);

566 
dï
 = 0; dï < 
ODEP_COUNT
; dep++) {

567 
l‹eg
 = 
u›
->
odï
[
dï
];

568 
phªg
 = 
u›
->
ph_odï
[
dï
];

569 
›hªg
 = 
u›
->
ph_oodï
[
dï
];

571 i‡(
	`DEP_IS_INT_REG
(
l‹eg
)) {

574 
	`as£π
(
rf
->
öt_phªg
[
›hªg
].
busy
 > 0);

575 
rf
->
öt_phªg
[
›hªg
].
busy
--;

576 i‡(!
rf
->
öt_phªg
[
›hªg
].
busy
) {

577 
	`as£π
(!
rf
->
öt_phªg
[
›hªg
].
≥ndög
);

578 
	`as£π
(
rf
->
öt_‰ì_phªg_cou¡
 < 
rf_öt_loˇl_size
);

579 
	`as£π
(
CORE
.
rf_öt_cou¡
 > 0 && 
THREAD
.rf_int_count > 0);

580 
rf
->
öt_‰ì_phªg
[rf->
öt_‰ì_phªg_cou¡
] = 
›hªg
;

581 
rf
->
öt_‰ì_phªg_cou¡
++;

582 
CORE
.
rf_öt_cou¡
--;

583 
THREAD
.
rf_öt_cou¡
--;

586 } i‡(
	`DEP_IS_FP_REG
(
l‹eg
)) {

589 
	`as£π
(
rf
->
Â_phªg
[
›hªg
].
busy
 > 0);

590 
rf
->
Â_phªg
[
›hªg
].
busy
--;

591 i‡(!
rf
->
Â_phªg
[
›hªg
].
busy
) {

592 
	`as£π
(!
rf
->
Â_phªg
[
›hªg
].
≥ndög
);

593 
	`as£π
(
rf
->
Â_‰ì_phªg_cou¡
 < 
rf_Â_loˇl_size
);

594 
	`as£π
(
CORE
.
rf_Â_cou¡
 > 0 && 
THREAD
.rf_fp_count > 0);

595 
rf
->
Â_‰ì_phªg
[rf->
Â_‰ì_phªg_cou¡
] = 
›hªg
;

596 
rf
->
Â_‰ì_phªg_cou¡
++;

597 
CORE
.
rf_Â_cou¡
--;

598 
THREAD
.
rf_Â_cou¡
--;

601 } i‡(
l‹eg
 =
DFPUSH
 ||Ü‹eg =
DFPOP
 ||Ü‹eg =
DFPOP2
) {

608 
	`as£π
(
phªg
 == -1);

609 
	`as£π
(
›hªg
 == -1);

612 
	}
}

615 
	$rf_check_öãgrôy
(
c‹e
, 
thªad
)

617 
rf_t
 *
rf
 = 
THREAD
.rf;

618 
u›_t
 *
u›
;

619 
l‹eg
, 
phªg
, 
›hªg
, 
dï
, 
i
;

622 
i
 = 0; i < 
rf
->
öt_‰ì_phªg_cou¡
; i++) {

623 
phªg
 = 
rf
->
öt_‰ì_phªg
[
i
];

624 
	`as£π
(!
rf
->
öt_phªg
[
phªg
].
busy
);

625 
	`as£π
(!
rf
->
öt_phªg
[
phªg
].
≥ndög
);

627 
i
 = 0; i < 
rf
->
Â_‰ì_phªg_cou¡
; i++) {

628 
phªg
 = 
rf
->
Â_‰ì_phªg
[
i
];

629 
	`as£π
(!
rf
->
Â_phªg
[
phªg
].
busy
);

630 
	`as£π
(!
rf
->
Â_phªg
[
phªg
].
≥ndög
);

634 
l‹eg
 = 
DEP_INT_FIRST
;Ü‹eg <
DEP_INT_LAST
;Üoreg++) {

635 
phªg
 = 
rf
->
öt_øt
[
l‹eg
 - 
DEP_INT_FIRST
];

636 
	`as£π
(
rf
->
öt_phªg
[
phªg
].
busy
);

638 
l‹eg
 = 
DEP_FP_FIRST
;Ü‹eg <
DEP_FP_LAST
;Üoreg++) {

639 
phªg
 = 
rf
->
Â_øt
[
l‹eg
 - 
DEP_FP_FIRST
];

640 
	`as£π
(
rf
->
Â_phªg
[
phªg
].
busy
);

645 
i
 = 0; i < 
THREAD
.
rob_cou¡
; i++) {

646 
u›
 = 
	`rob_gë
(
c‹e
, 
thªad
, 
i
);

647 
	`as£π
(
u›
);

648 
dï
 = 0; dï < 
ODEP_COUNT
; dep++) {

649 
l‹eg
 = 
u›
->
odï
[
dï
];

650 
phªg
 = 
u›
->
ph_odï
[
dï
];

651 
›hªg
 = 
u›
->
ph_oodï
[
dï
];

652 i‡(
	`DEP_IS_INT_REG
(
l‹eg
)) {

653 
	`as£π
(
rf
->
öt_phªg
[
phªg
].
busy
);

654 
	`as£π
(
rf
->
öt_phªg
[
›hªg
].
busy
);

655 } i‡(
	`DEP_IS_FP_REG
(
l‹eg
)) {

656 
	`as£π
(
rf
->
Â_phªg
[
phªg
].
busy
);

657 
	`as£π
(
rf
->
Â_phªg
[
›hªg
].
busy
);

659 
	`as£π
(
phªg
 == -1);

660 
	`as£π
(
›hªg
 == -1);

664 
	}
}

	@rob.c

20 
	~<m2s.h
>

26 
uöt32_t
 
	grob_size
 = 64;

27 
rob_köd_íum
 
	grob_köd
 = 
rob_köd_¥iv©e
;

28 
	gtŸÆ_rob_size
 = 0;

35 
	$rob_åim
(
c‹e
)

37 
idx
;

38 
u›_t
 *
u›
;

41 
CORE
.
rob_cou¡
) {

42 
u›
 = 
	`li°_gë
(
CORE
.
rob
, CORE.
rob_hód
);

43 i‡(
u›
)

45 
CORE
.
rob_hód
 = CORE.rob_hód =
tŸÆ_rob_size
 - 1 ?

46 0 : 
CORE
.
rob_hód
 + 1;

47 
CORE
.
rob_cou¡
--;

51 
CORE
.
rob_cou¡
) {

52 
idx
 = 
CORE
.
rob_èû
 ? CORE.rob_èû - 1 : 
tŸÆ_rob_size
 - 1;

53 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
idx
);

54 i‡(
u›
)

56 
CORE
.
rob_èû
 = 
idx
;

57 
CORE
.
rob_cou¡
--;

59 
	}
}

66 
	$rob_ªg_›ti⁄s
()

68 *
rob_köd_m≠
[] = { "private", "shared" };

69 
	`›t_ªg_íum
("-rob_kind", "reorder buffer sharing {private|shared}",

70 (*Ë&
rob_köd
, 
rob_köd_m≠
, 2);

71 
	`›t_ªg_uöt32
("-rob_size", "reorder buffer sizeÖerÅhread",

72 &
rob_size
);

73 
	}
}

76 
	$rob_öô
()

78 
c‹e
, 
thªad
;

79 
i
;

81 
rob_köd
) {

83 
rob_köd_¥iv©e
:

86 
FOREACH_CORE
 
FOREACH_THREAD
 {

87 
THREAD
.
rob_À·_bound
 = 
thªad
 * 
rob_size
;

88 
THREAD
.
rob_right_bound
 = (
thªad
 + 1Ë* 
rob_size
 - 1;

89 
THREAD
.
rob_hód
 = THREAD.
rob_À·_bound
;

90 
THREAD
.
rob_èû
 = THREAD.
rob_À·_bound
;

95 
rob_köd_sh¨ed
:

100 
tŸÆ_rob_size
 = 
rob_size
 * 
p_thªads
;

101 
FOREACH_CORE
 {

102 
CORE
.
rob
 = 
	`li°_¸óã
(
tŸÆ_rob_size
);

103 
i
 = 0; i < 
tŸÆ_rob_size
; i++)

104 
	`li°_add
(
CORE
.
rob
, 
NULL
);

106 
	}
}

109 
	$rob_d⁄e
()

111 
c‹e
, 
i
;

112 
u›_t
 *
u›
;

114 
rob_köd
) {

115 
rob_köd_¥iv©e
:

118 
rob_köd_sh¨ed
:

122 
FOREACH_CORE
 {

123 
	`as£π
(
	`li°_cou¡
(
CORE
.
rob
Ë=
tŸÆ_rob_size
);

124 
i
 = 0; i < 
tŸÆ_rob_size
; i++) {

125 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
i
);

126 i‡(
u›
) {

127 
u›
->
ö_rob
 = 0;

128 
	`u›_‰ì_if_nŸ_queued
(
u›
);

131 
	`li°_‰ì
(
CORE
.
rob
);

133 
	}
}

136 
	$rob_ˇn_íqueue
(
u›_t
 *
u›
)

138 
c‹e
 = 
u›
->core;

139 
thªad
 = 
u›
->thread;

141 
rob_köd
) {

142 
rob_köd_¥iv©e
:

143 i‡(
THREAD
.
rob_cou¡
 < 
rob_size
)

147 
rob_köd_sh¨ed
:

148 
	`rob_åim
(
c‹e
);

149 i‡(
CORE
.
rob_cou¡
 < 
tŸÆ_rob_size
)

154 
	}
}

157 
	$rob_íqueue
(
u›_t
 *
u›
)

159 
c‹e
 = 
u›
->core;

160 
thªad
 = 
u›
->thread;

162 
rob_köd
) {

163 
rob_köd_¥iv©e
:

164 
	`as£π
(
THREAD
.
rob_cou¡
 < 
rob_size
);

165 
	`as£π
(!
	`li°_gë
(
CORE
.
rob
, 
THREAD
.
rob_èû
));

166 
	`li°_£t
(
CORE
.
rob
, 
THREAD
.
rob_èû
, 
u›
);

167 
THREAD
.
rob_èû
 = THREAD.rob_èû =THREAD.
rob_right_bound
 ?

168 
THREAD
.
rob_À·_bound
 : THREAD.
rob_èû
 + 1;

169 
THREAD
.
rob_cou¡
++;

172 
rob_köd_sh¨ed
:

173 
	`rob_åim
(
c‹e
);

174 
	`as£π
(
CORE
.
rob_cou¡
 < 
tŸÆ_rob_size
);

175 
	`as£π
(!
	`li°_gë
(
CORE
.
rob
, CORE.
rob_èû
));

176 
	`li°_£t
(
CORE
.
rob
, CORE.
rob_èû
, 
u›
);

177 
CORE
.
rob_èû
 = CORE.rob_èû =
tŸÆ_rob_size
 - 1 ?

178 0 : 
CORE
.
rob_èû
 + 1;

179 
CORE
.
rob_cou¡
++;

180 
THREAD
.
rob_cou¡
++;

185 
u›
->
ö_rob
 = 1;

186 
	}
}

189 
	$rob_ˇn_dequeue
(
c‹e
, 
thªad
)

191 
u›_t
 *
u›
;

193 
rob_köd
) {

194 
rob_köd_¥iv©e
:

195 i‡(
THREAD
.
rob_cou¡
 > 0)

199 
rob_köd_sh¨ed
:

200 
	`rob_åim
(
c‹e
);

201 i‡(!
CORE
.
rob_cou¡
)

203 
u›
 = 
	`li°_gë
(
CORE
.
rob
, CORE.
rob_hód
);

204 
	`as£π
(
	`u›_exi°s
(
u›
));

205 
	`as£π
(
u›
->
c‹e
 == core);

206 i‡(
u›
->
thªad
 ==Åhread)

211 
	}
}

214 
u›_t
 *
	$rob_hód
(
c‹e
, 
thªad
)

216 
u›_t
 *
u›
;

217 
idx
, 
i
;

219 
rob_köd
) {

220 
rob_köd_¥iv©e
:

221 i‡(
THREAD
.
rob_cou¡
 > 0) {

222 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
THREAD
.
rob_hód
);

223  
u›
;

227 
rob_köd_sh¨ed
:

228 
	`rob_åim
(
c‹e
);

229 i‡(!
THREAD
.
rob_cou¡
)

230  
NULL
;

231 
i
 = 0; i < 
CORE
.
rob_cou¡
; i++) {

232 
idx
 = (
CORE
.
rob_hód
 + 
i
Ë% 
tŸÆ_rob_size
;

233 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
idx
);

234 i‡(
u›
 && u›->
thªad
 ==Åhread)

235  
u›
;

237 
	`∑nic
("rob_head:Ço head found");

240  
NULL
;

241 
	}
}

244 
	$rob_ªmove_hód
(
c‹e
, 
thªad
)

246 
u›_t
 *
u›
 = 
NULL
;

247 
idx
, 
i
;

249 
rob_köd
) {

250 
rob_köd_¥iv©e
:

251 
	`as£π
(
THREAD
.
rob_cou¡
 > 0);

252 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
THREAD
.
rob_hód
);

253 
	`as£π
(
	`u›_exi°s
(
u›
));

254 
	`as£π
(
u›
->
c‹e
 =c‹ê&& u›->
thªad
 ==Åhread);

255 
	`li°_£t
(
CORE
.
rob
, 
THREAD
.
rob_hód
, 
NULL
);

256 
THREAD
.
rob_hód
 = THREAD.rob_hód =THREAD.
rob_right_bound
 ?

257 
THREAD
.
rob_À·_bound
 : THREAD.
rob_hód
 + 1;

258 
THREAD
.
rob_cou¡
--;

261 
rob_köd_sh¨ed
:

262 
	`rob_åim
(
c‹e
);

263 
	`as£π
(
THREAD
.
rob_cou¡
);

264 
i
 = 0; i < 
CORE
.
rob_cou¡
; i++) {

265 
idx
 = (
CORE
.
rob_hód
 + 
i
Ë% 
tŸÆ_rob_size
;

266 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
idx
);

267 i‡(
u›
 && u›->
thªad
 ==Åhread) {

268 
	`li°_£t
(
CORE
.
rob
, 
idx
, 
NULL
);

269 
THREAD
.
rob_cou¡
--;

277 
u›
->
ö_rob
 = 0;

278 
	`u›_‰ì_if_nŸ_queued
(
u›
);

279 
	}
}

282 
u›_t
 *
	$rob_èû
(
c‹e
, 
thªad
)

284 
u›_t
 *
u›
;

285 
idx
, 
i
;

287 
rob_köd
) {

288 
rob_köd_¥iv©e
:

289 i‡(
THREAD
.
rob_cou¡
 > 0) {

290 
idx
 = 
THREAD
.
rob_èû
 =THREAD.
rob_À·_bound
 ?

291 
THREAD
.
rob_right_bound
 : THREAD.
rob_èû
 - 1;

292 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
idx
);

293  
u›
;

297 
rob_köd_sh¨ed
:

298 
	`rob_åim
(
c‹e
);

299 i‡(!
THREAD
.
rob_cou¡
)

300  
NULL
;

301 
i
 = 
CORE
.
rob_cou¡
 - 1; i >= 0; i--) {

302 
idx
 = (
CORE
.
rob_hód
 + 
i
Ë% 
tŸÆ_rob_size
;

303 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
idx
);

304 i‡(
u›
 && u›->
thªad
 ==Åhread)

305  
u›
;

307 
	`∑nic
("rob_tail:ÇoÅail found");

310  
NULL
;

311 
	}
}

314 
u›_t
 *
	$rob_gë
(
c‹e
, 
thªad
, 
ödex
)

316 
u›_t
 *
u›
;

319 i‡(
ödex
 < 0 || index >
THREAD
.
rob_cou¡
)

320  
NULL
;

322 
rob_köd
) {

323 
rob_köd_¥iv©e
:

324 
ödex
 +
THREAD
.
rob_hód
;

325 i‡(
ödex
 > 
THREAD
.
rob_right_bound
)

326 
ödex
 = index - 
THREAD
.
rob_right_bound
 + THREAD.
rob_À·_bound
 - 1;

327 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
ödex
);

328 
	`as£π
(
u›
);

329  
u›
;

331 
rob_köd_sh¨ed
:

332 
	`rob_åim
(
c‹e
);

333 
ödex
 = (
CORE
.
rob_hód
 + indexË% 
tŸÆ_rob_size
;

334 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
ödex
);

335 
	`as£π
(
u›
);

336  
u›
;

338  
NULL
;

339 
	}
}

342 
	$rob_ªmove_èû
(
c‹e
, 
thªad
)

344 
u›_t
 *
u›
 = 
NULL
;

345 
idx
, 
i
;

347 
rob_köd
) {

348 
rob_köd_¥iv©e
:

349 
	`as£π
(
THREAD
.
rob_cou¡
 > 0);

350 
idx
 = 
THREAD
.
rob_èû
 =THREAD.
rob_À·_bound
 ?

351 
THREAD
.
rob_right_bound
 : THREAD.
rob_èû
 - 1;

352 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
idx
);

353 
	`as£π
(
	`u›_exi°s
(
u›
));

354 
	`as£π
(
u›
->
c‹e
 =c‹ê&& u›->
thªad
 ==Åhread);

355 
	`li°_£t
(
CORE
.
rob
, 
idx
, 
NULL
);

356 
THREAD
.
rob_èû
 = 
idx
;

357 
THREAD
.
rob_cou¡
--;

360 
rob_köd_sh¨ed
:

361 
	`rob_åim
(
c‹e
);

362 
	`as£π
(
THREAD
.
rob_cou¡
);

363 
i
 = 
CORE
.
rob_cou¡
 - 1; i >= 0; i--) {

364 
idx
 = (
CORE
.
rob_hód
 + 
i
Ë% 
tŸÆ_rob_size
;

365 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
idx
);

366 i‡(
u›
 && u›->
thªad
 ==Åhread) {

367 
	`li°_£t
(
CORE
.
rob
, 
idx
, 
NULL
);

368 
THREAD
.
rob_cou¡
--;

376 
u›
->
ö_rob
 = 0;

377 
	`u›_‰ì_if_nŸ_queued
(
u›
);

378 
	}
}

381 
	$rob_dump
(
c‹e
, 
FILE
 *
f
)

383 
thªad
, 
i
;

384 
u›_t
 *
u›
;

386 
rob_köd
) {

387 
rob_köd_¥iv©e
:

388 
FOREACH_THREAD
 {

389 
	`Ârötf
(
f
, "Ñob forÅhread %d (entries %dÅo %d), count=%d, size=%d\n",

390 
thªad
, 
THREAD
.
rob_À·_bound
, THREAD.
rob_right_bound
,

391 
THREAD
.
rob_cou¡
, 
rob_size
);

392 
i
 = 
THREAD
.
rob_À·_bound
; i <THREAD.
rob_right_bound
; i++) {

393 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
i
);

394 
	`Ârötf
(
f
, " %c%c ",

395 
i
 =
THREAD
.
rob_hód
 ? 'H' : ' ',

396 
i
 =
THREAD
.
rob_èû
 ? 'T' : ' ');

397 i‡(
u›
)

398 
	`u›_dump
(
u›
, 
f
), 
	`Ârötf
(f, "\n");

400 
	`Ârötf
(
f
, "-\n");

405 
rob_köd_sh¨ed
:

406 
	`rob_åim
(
c‹e
);

407 
i
 = 0; i < 
tŸÆ_rob_size
; i++) {

408 
u›
 = 
	`li°_gë
(
CORE
.
rob
, 
i
);

409 
	`Ârötf
(
f
, " %c%c ",

410 
i
 =
CORE
.
rob_hód
 ? 'H' : ' ',

411 
i
 =
CORE
.
rob_èû
 ? 'T' : ' ');

412 i‡(
u›
)

413 
	`u›_dump
(
u›
, 
f
), 
	`Ârötf
(f, "\n");

415 
	`Ârötf
(
f
, "-\n");

419 
	}
}

	@sched.c

20 
	~<m2s.h
>

23 
	$p_pùñöe_em±y
(
c‹e
, 
thªad
)

25  !
THREAD
.
rob_cou¡
 && !
	`li°_cou¡
(THREAD.
„tchq
) &&

26 !
	`li°_cou¡
(
THREAD
.
u›q
);

27 
	}
}

36 
	$p_c⁄ãxt_to_˝u
(
˘x_t
 *
˘x
)

38 
˝u
, 
‰ì_˝u
;

39 
c‹e
, 
thªad
;

40 
	`as£π
(!
	`˘x_gë_°©us
(
˘x
, 
˘x_Æloc
));

41 
	`as£π
(
ke
->
Æloc_cou¡
 <
p_˝us
);

44 i‡(
ke
->
Æloc_cou¡
 =
p_˝us
)

49 i‡(
˘x
->
Æloc_whí
 && !
p
->
c‹e
[˘x->
Æloc_c‹e
].
thªad
[˘x->
Æloc_thªad
].ctx)

50  
˘x
->
Æloc_c‹e
 * 
p_thªads
 + ctx->
Æloc_thªad
;

54 
‰ì_˝u
 = -1;

55 
˝u
 = 0; cpu < 
p_˝us
; cpu++) {

56 
c‹e
 = 
˝u
 / 
p_thªads
;

57 
thªad
 = 
˝u
 % 
p_thªads
;

58 i‡(!
THREAD
.
˘x
 && 
‰ì_˝u
 < 0)

59 
‰ì_˝u
 = 
˝u
;

60 i‡(!
THREAD
.
œ°_Æloc_pid
)

61  
˝u
;

63 
	`as£π
(
‰ì_˝u
 >= 0);

64  
‰ì_˝u
;

65 
	}
}

68 
	$p_m≠_c⁄ãxt
(
c‹e
, 
thªad
, 
˘x_t
 *
˘x
)

70 
	`as£π
(!
THREAD
.
˘x
);

71 
	`as£π
(!
	`˘x_gë_°©us
(
˘x
, 
˘x_Æloc
));

72 
	`as£π
(
ke
->
Æloc_cou¡
 < 
p_˝us
);

73 
	`as£π
(!
˘x
->
dóŒoc_sig«l
);

75 
THREAD
.
˘x
 = ctx;

76 
THREAD
.
œ°_Æloc_pid
 = 
˘x
->
pid
;

77 
THREAD
.
„tch_√ù
 = 
˘x
->
ªgs
->
eù
;

79 
	`˘x_£t_°©us
(
˘x
, 
˘x_Æloc
);

80 
˘x
->
Æloc_c‹e
 = 
c‹e
;

81 
˘x
->
Æloc_thªad
 = 
thªad
;

82 
˘x
->
Æloc_whí
 = 
sim_cy˛e
;

84 
	`˘x_debug
("cycle %lld: ctx %dállocatedÅo c%dt%d\n",

85 (Ë
sim_cy˛e
, 
˘x
->
pid
, 
c‹e
, 
thªad
);

86 
	}
}

89 
	$p_unm≠_c⁄ãxt
(
c‹e
, 
thªad
)

91 
˘x_t
 *
˘x
 = 
THREAD
.ctx;

93 
	`as£π
(
˘x
);

94 
	`as£π
(
	`˘x_gë_°©us
(
˘x
, 
˘x_Æloc
));

95 
	`as£π
(!
	`˘x_gë_°©us
(
˘x
, 
˘x_•ecmode
));

96 
	`as£π
(!
THREAD
.
rob_cou¡
);

97 
	`as£π
(
˘x
->
dóŒoc_sig«l
);

98 
	`as£π
(
p
->
˘x_dóŒoc_sig«ls
 > 0);

100 
THREAD
.
˘x
 = 
NULL
;

101 
THREAD
.
„tch_√ù
 = 0;

103 
	`˘x_˛ór_°©us
(
˘x
, 
˘x_Æloc
);

104 
˘x
->
dóŒoc_whí
 = 
sim_cy˛e
;

105 
˘x
->
dóŒoc_sig«l
 = 0;

106 
p
->
˘x_dóŒoc_sig«ls
--;

108 
	`˘x_debug
("cycle %lld: ctx %dÉvicted from c%dt%d\n",

109 (Ë
sim_cy˛e
, 
˘x
->
pid
, 
c‹e
, 
thªad
);

112 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_föished
))

113 
	`˘x_‰ì
(
˘x
);

114 
	}
}

121 
	$p_unm≠_c⁄ãxt_sig«l
(
˘x_t
 *
˘x
)

123 
c‹e
, 
thªad
;

125 
	`as£π
(
˘x
);

126 
	`as£π
(
	`˘x_gë_°©us
(
˘x
, 
˘x_Æloc
));

127 
	`as£π
(!
˘x
->
dóŒoc_sig«l
);

128 
	`as£π
(
p
->
˘x_dóŒoc_sig«ls
 < 
p_˝us
);

130 
˘x
->
dóŒoc_sig«l
 = 1;

131 
p
->
˘x_dóŒoc_sig«ls
++;

132 
c‹e
 = 
˘x
->
Æloc_c‹e
;

133 
thªad
 = 
˘x
->
Æloc_thªad
;

134 
	`˘x_debug
("cycle %lld: ctx %dÑeceivesÉviction signal from c%dt%d\n",

135 (Ë
sim_cy˛e
, 
˘x
->
pid
, 
c‹e
, 
thªad
);

136 i‡(
	`p_pùñöe_em±y
(
c‹e
, 
thªad
))

137 
	`p_unm≠_c⁄ãxt
(
c‹e
, 
thªad
);

139 
	}
}

142 
	$p_°©ic_scheduÀ
()

144 
˘x_t
 *
˘x
;

145 
˝u
;

147 
	`˘x_debug
("cycle %lld: static scheduler called\n",

148 (Ë
sim_cy˛e
);

151 
	`as£π
(
ke
->
Æloc_cou¡
 <ke->
c⁄ãxt_cou¡
);

152 i‡(
ke
->
Æloc_cou¡
 =ke->
c⁄ãxt_cou¡
)

156 
˘x
 = 
ke
->
c⁄ãxt_li°_hód
; ctx; ctx = ctx->
c⁄ãxt_√xt
) {

159 i‡(
	`˘x_gë_°©us
(
˘x
, 
˘x_Æloc
))

164 
˝u
 = 
	`p_c⁄ãxt_to_˝u
(
˘x
);

165 i‡(
˝u
 < 0)

166 
	`Áèl
("no cpu free for context %d; increaseÇumber of cores/threads"

167 " o∏a˘iv©êthêc⁄ãxàscheduÀr.", 
˘x
->
pid
);

170 
	`p_m≠_c⁄ãxt
(
˝u
 / 
p_thªads
, cpu %Ö_thªads, 
˘x
);

172 
	}
}

175 
	$p_dy«mic_scheduÀ
()

177 
˘x_t
 *
˘x
, *
found_˘x
;

178 
˝u
;

180 
	`˘x_debug
("cycle %lld: scheduler called\n",

181 (Ë
sim_cy˛e
);

184 
˘x
 = 
ke
->
Æloc_li°_hód
; ctx; ctx = ctx->
Æloc_√xt
)

185 i‡(!
˘x
->
dóŒoc_sig«l
 && !
	`˘x_gë_°©us
(˘x, 
˘x_ru¬ög
))

186 
	`p_unm≠_c⁄ãxt_sig«l
(
˘x
);

190 i‡(
ke
->
Æloc_cou¡
 =ke->
ru¬ög_cou¡
) {

191 
p
->
˘x_Æloc_ﬁde°
 = 
sim_cy˛e
;

192 
˘x
 = 
ke
->
Æloc_li°_hód
; ctx; ctx = ctx->
Æloc_√xt
)

193 
˘x
->
Æloc_whí
 = 
sim_cy˛e
;

199 i‡(!
p
->
˘x_dóŒoc_sig«ls
 &&Ö->
˘x_Æloc_ﬁde°
 + 
p_c⁄ãxt_qu™tum
 <
sim_cy˛e
) {

200 
found_˘x
 = 
NULL
;

201 
˘x
 = 
ke
->
Æloc_li°_hód
; ctx; ctx = ctx->
Æloc_√xt
)

202 i‡(!
found_˘x
 || 
˘x
->
Æloc_whí
 < found_ctx->alloc_when)

203 
found_˘x
 = 
˘x
;

204 i‡(
found_˘x
)

205 
	`p_unm≠_c⁄ãxt_sig«l
(
found_˘x
);

209 
ke
->
Æloc_cou¡
 < ke->
ru¬ög_cou¡
 && ke->Æloc_cou¡ < 
p_˝us
) {

212 
found_˘x
 = 
NULL
;

213 
˘x
 = 
ke
->
ru¬ög_li°_hód
; ctx; ctx = ctx->
ru¬ög_√xt
)

214 i‡(!
	`˘x_gë_°©us
(
˘x
, 
˘x_Æloc
Ë&& (!
found_˘x
 || ctx->
dóŒoc_whí
 < found_ctx->dealloc_when))

215 
found_˘x
 = 
˘x
;

216 i‡(!
found_˘x
)

218 
˘x
 = 
found_˘x
;

221 
˝u
 = 
	`p_c⁄ãxt_to_˝u
(
˘x
);

222 
	`as£π
(
˝u
 >0 && cpu < 
p_˝us
);

223 
	`p_m≠_c⁄ãxt
(
˝u
 / 
p_thªads
, cpu %Ö_thªads, 
˘x
);

227 
p
->
˘x_Æloc_ﬁde°
 = 
sim_cy˛e
;

228 
˘x
 = 
ke
->
Æloc_li°_hód
; ctx; ctx = ctx->
Æloc_√xt
)

229 i‡(!
˘x
->
dóŒoc_sig«l
 && ctx->
Æloc_whí
 < 
p
->
˘x_Æloc_ﬁde°
)

230 
p
->
˘x_Æloc_ﬁde°
 = 
˘x
->
Æloc_whí
;

231 
	}
}

	@tcache.c

20 
	~<m2s.h
>

25 
	gtˇche_¥e£¡
 = 0;

26 
uöt32_t
 
	gtˇche_åa˚_size
 = 16;

27 
uöt32_t
 
	gtˇche_bønch_max
 = 3;

28 
uöt32_t
 
	gtˇche_queue_size
 = 32;

29 *
	gtˇche_t›o
 = "64:4";

30 
uöt32_t
 
	gtˇche_£ts
;

31 
uöt32_t
 
	gtˇche_assoc
;

34 
	$tˇche_ªg_›ti⁄s
()

36 
	`›t_ªg_boﬁ
("-tˇche", "U£Åø˚ cachê{t|f}", &
tˇche_¥e£¡
);

37 
	`›t_ªg_°rög
("-tcache:topo", "Trace cacheÅopology (<sets>:<assoc>)",

38 &
tˇche_t›o
);

39 
	`›t_ªg_uöt32
("-tcache:trace_size", "MaximumÇumber of uops ináÅrace",

40 &
tˇche_åa˚_size
);

41 
	`›t_ªg_uöt32
("-tcache:branch_max", "MaximumÇumber of branches ináÅrace",

42 &
tˇche_bønch_max
);

43 
	`›t_ªg_uöt32
("-tcache:queue_size", "Fetch queue forÖredecoded uops",

44 &
tˇche_queue_size
);

45 
	}
}

48 
	$tˇche_öô
()

50 
c‹e
, 
thªad
;

53 i‡(!
tˇche_¥e£¡
)

57 i‡(
	`ssˇnf
(
tˇche_t›o
, "%d:%d", &
tˇche_£ts
, &
tˇche_assoc
) != 2)

58 
	`Áèl
("invalidÅcache:topo format");

61 i‡((
tˇche_£ts
 & (tcache_sets - 1)) || !tcache_sets)

62 
	`Áèl
("trace cache sets must beÖower of 2ánd > 0");

63 i‡((
tˇche_assoc
 & (tcache_assoc - 1)) || !tcache_assoc)

64 
	`Áèl
("trace cacheássociativity must beÖower of 2ánd > 0");

65 i‡(!
tˇche_åa˚_size
 || !
tˇche_bønch_max
)

66 
	`Áèl
("trace cache: maxÇumber of branchesánd microinst must be > 0");

67 i‡(
tˇche_bønch_max
 > 
tˇche_åa˚_size
)

68 
	`Áèl
("tcache:branch_max cannot be greaterÅhanÅcache:trace_size");

69 i‡(
tˇche_bønch_max
 > 31)

70 
	`Áèl
("tcache:branch_max cannot be greaterÅhan 31");

73 
FOREACH_CORE
 
FOREACH_THREAD
 {

74 
THREAD
.
tˇche
 = 
	`tˇche_¸óã
();

75 
	`•rötf
(
THREAD
.
tˇche
->
«me
, "c%dt%d.tˇche", 
c‹e
, 
thªad
);

77 
	}
}

80 
	$tˇche_d⁄e
()

82 
c‹e
, 
thªad
;

85 i‡(!
tˇche_¥e£¡
)

89 
FOREACH_CORE
 
FOREACH_THREAD


90 
	`tˇche_‰ì
(
THREAD
.
tˇche
);

91 
	}
}

94 
tˇche_t
 *
	$tˇche_¸óã
()

96 
tˇche_t
 *
tˇche
;

97 
tˇche_íåy_t
 *
íåy
;

98 
£t
, 
way
;

101 
tˇche
 = 
	`ˇŒoc
(1, (
tˇche_t
));

102 
tˇche
->
íåy
 = 
	`ˇŒoc
(
tˇche_£ts
 * 
tˇche_assoc
, 
TCACHE_ENTRY_SIZE
);

103 
tˇche
->
ãmp
 = 
	`ˇŒoc
(1, 
TCACHE_ENTRY_SIZE
);

106 
£t
 = 0; së < 
tˇche_£ts
; set++) {

107 
way
 = 0; way < 
tˇche_assoc
; way++) {

108 
íåy
 = 
	`TCACHE_ENTRY
(
£t
, 
way
);

109 
íåy
->
cou¡î
 = 
way
;

114  
tˇche
;

115 
	}
}

118 
	$tˇche_‰ì
(
tˇche_t
 *
tˇche
)

120 
	`‰ì
(
tˇche
->
íåy
);

121 
	`‰ì
(
tˇche
->
ãmp
);

122 
	`‰ì
(
tˇche
);

123 
	}
}

126 
	$tˇche_dump_ªp‹t
(
tˇche_t
 *
tˇche
, 
FILE
 *
f
)

129 
	`Ârötf
(
f
, "# Trace cache\n");

130 
	`Ârötf
(
f
, "Tø˚Cache.Ac˚s£†%Œd\n", (Ë
tˇche
->
ac˚s£s
);

131 
	`Ârötf
(
f
, "Tø˚Cache.Hô†%Œd\n", (Ë
tˇche
->
hôs
);

132 
	`Ârötf
(
f
, "Tø˚Cache.HôR©iÿ%.4g\n", 
tˇche
->
ac˚s£s
 ? ()

133 
tˇche
->
hôs
 /Åˇche->
ac˚s£s
 : 0.0);

134 
	`Ârötf
(
f
, "Tø˚Cache.Commôãd = %Œd\n", (Ë
tˇche
->
commôãd
);

135 
	`Ârötf
(
f
, "Tø˚Cache.Squashed = %Œd\n", (Ë
tˇche
->
squashed
);

136 
	`Ârötf
(
f
, "TraceCache.TraceLength = %.2g\n",

137 
tˇche
->
åa˚_Àngth_cou¡
 ? (Ëtˇche->
åa˚_Àngth_acc
 /

138 
tˇche
->
åa˚_Àngth_cou¡
 : 0);

139 
	`Ârötf
(
f
, "\n");

140 
	}
}

144 
	$tˇche_Êush_åa˚
(
tˇche_t
 *
tˇche
)

146 
tˇche_íåy_t
 *
íåy
, *
found
 = 
NULL
, *
åa˚
 = 
tˇche
->
ãmp
;

147 
£t
, 
way
;

150 i‡(!
åa˚
->
u›_cou¡
)

152 
	`as£π
(
åa˚
->
èg
);

157 i‡(
åa˚
->
èrgë
) {

158 
	`as£π
(
åa˚
->
bønch_cou¡
);

159 
åa˚
->
bønch_cou¡
--;

160 
åa˚
->
bønch_mask
 &~(1 <<Åø˚->
bønch_cou¡
);

161 
åa˚
->
bønch_Êags
 &~(1 <<Åø˚->
bønch_cou¡
);

166 
£t
 = 
åa˚
->
èg
 % 
tˇche_£ts
;

167 
way
 = 0; way < 
tˇche_assoc
; way++) {

168 
íåy
 = 
	`TCACHE_ENTRY
(
£t
, 
way
);

169 i‡(
íåy
->
èg
 =
åa˚
->èg &&É¡ry->
bønch_mask
 ==Årace->branch_mask

170 && 
íåy
->
bønch_Êags
 =
åa˚
->branch_flags)

172 
found
 = 
íåy
;

175 i‡(!
íåy
->
èg
) {

176 
found
 = 
íåy
;

182 i‡(!
found
) {

183 
way
 = 0; way < 
tˇche_assoc
; way++) {

184 
íåy
 = 
	`TCACHE_ENTRY
(
£t
, 
way
);

185 
íåy
->
cou¡î
--;

186 i‡(
íåy
->
cou¡î
 < 0) {

187 
íåy
->
cou¡î
 = 
tˇche_assoc
 - 1;

188 
found
 = 
íåy
;

195 
	`as£π
(
found
);

196 
tˇche
->
åa˚_Àngth_acc
 +
åa˚
->
u›_cou¡
;

197 
tˇche
->
åa˚_Àngth_cou¡
++;

198 
åa˚
->
cou¡î
 = 
found
->counter;

199 
	`mem˝y
(
found
, 
åa˚
, 
TCACHE_ENTRY_SIZE
);

200 
	`mem£t
(
tˇche
->
ãmp
, 0, 
TCACHE_ENTRY_SIZE
);

201 
	}
}

204 
	$tˇche_√w_u›
(
tˇche_t
 *
tˇche
, 
u›_t
 *
u›
)

206 
tˇche_íåy_t
 *
åa˚
 = 
tˇche
->
ãmp
;

207 
èkí
;

210 i‡(
u›
->
m›_ödex
)

215 
	`as£π
(!
u›
->
•ecmode
);

216 
	`as£π
(
u›
->
eù
);

217 
	`as£π
(
u›
->
£q
 =u›->
m›_£q
);

218 i‡(
åa˚
->
u›_cou¡
 + 
u›
->
m›_cou¡
 > 
tˇche_åa˚_size
)

219 
	`tˇche_Êush_åa˚
(
tˇche
);

220 i‡(
u›
->
m›_cou¡
 > 
tˇche_åa˚_size
)

224 i‡(!
åa˚
->
u›_cou¡
)

225 
åa˚
->
èg
 = 
u›
->
eù
;

228 
åa˚
->
m›_¨øy
[åa˚->
m›_cou¡
] = 
u›
->
eù
;

229 
åa˚
->
m›_cou¡
++;

230 
åa˚
->
u›_cou¡
 +
u›
->
m›_cou¡
;

231 
åa˚
->
èrgë
 = 0;

232 
åa˚
->
ÁŒ_through
 = 
u›
->
eù
 + u›->
m›_size
;

236 i‡(
u›
->
Êags
 & 
FCTRL
) {

237 
èkí
 = 
u›
->
√ù
 !u›->
eù
 + u›->
m›_size
;

238 
åa˚
->
bønch_mask
 |1 <<Åø˚->
bønch_cou¡
;

239 
åa˚
->
bønch_Êags
 |
èkí
 <<Åø˚->
bønch_cou¡
;

240 
åa˚
->
bønch_cou¡
++;

241 
åa˚
->
èrgë
 = 
u›
->
èrgë_√ù
;

242 i‡(
åa˚
->
bønch_cou¡
 =
tˇche_bønch_max
)

243 
	`tˇche_Êush_åa˚
(
tˇche
);

245 
	}
}

248 
	$tˇche_lookup
(
tˇche_t
 *
tˇche
, 
uöt32_t
 
eù
, 
¥ed
,

249 *
±r_m›_cou¡
, 
uöt32_t
 **
±r_m›_¨øy
, uöt32_à*
±r_√ù
)

251 
tˇche_íåy_t
 *
íåy
 = 
NULL
, *
found
 = NULL;

252 
£t
, 
way
;

253 
uöt32_t
 
√ù
;

256 
£t
 = 
eù
 % 
tˇche_£ts
;

257 
way
 = 0; way < 
tˇche_assoc
; way++) {

258 
íåy
 = 
	`TCACHE_ENTRY
(
£t
, 
way
);

259 i‡(
íåy
->
èg
 =
eù
 && ((
¥ed
 &É¡ry->
bønch_mask
Ë=íåy->
bønch_Êags
)) {

260 
found
 = 
íåy
;

266 
tˇche
->
ac˚s£s
++;

267 i‡(!
found
)

269 
tˇche
->
hôs
++;

273 
√ù
 = 
íåy
->
èrgë
 && (
¥ed
 & (1 <<É¡ry->
bønch_cou¡
)) ?

274 
íåy
->
èrgë
 :É¡ry->
ÁŒ_through
;

275 
	`PTR_ASSIGN
(
±r_m›_cou¡
, 
íåy
->
m›_cou¡
);

276 
	`PTR_ASSIGN
(
±r_m›_¨øy
, 
íåy
->
m›_¨øy
);

277 
	`PTR_ASSIGN
(
±r_√ù
, 
√ù
);

279 
	}
}

	@uop.c

20 
	~<m2s.h
>

23 
°rög_m≠_t
 
	gdï_m≠
 = {

25 { "óx", 
DEAX
 },

26 { "ecx", 
DECX
 },

27 { "edx", 
DEDX
 },

28 { "ebx", 
DEBX
 },

29 { "e•", 
DESP
 },

30 { "ebp", 
DEBP
 },

31 { "esi", 
DESI
 },

32 { "edi", 
DEDI
 },

34 { "es", 
DES
 },

35 { "cs", 
DCS
 },

36 { "ss", 
DSS
 },

37 { "ds", 
DDS
 },

38 { "fs", 
DFS
 },

39 { "gs", 
DGS
 },

41 { "zps", 
DZPS
 },

42 { "of", 
DOF
 },

43 { "cf", 
DCF
 },

44 { "df", 
DDF
 },

46 { "aux", 
DAUX
 },

47 { "aux2", 
DAUX2
 },

49 { "addr", 
DEA
 },

50 { "d©a", 
DDATA
 },

52 { "°", 
DST0
 },

53 { "°(1)", 
DST1
 },

54 { "°(2)", 
DST2
 },

55 { "°(3)", 
DST3
 },

56 { "°(4)", 
DST4
 },

57 { "°(5)", 
DST5
 },

58 { "°(6)", 
DST6
 },

59 { "°(7)", 
DST7
 },

61 { "Â°", 
DFPST
 },

62 { "Âcw", 
DFPCW
 },

63 { "Âaux", 
DFPAUX
 }

70 
	su›_b™k_íåy_t
 {

71 *
	m«me
;

72 
	mfu_˛ass
;

73 
	mÊags
;

76 
u›_b™k_íåy_t
 
	gu›_b™k
[
u›_cou¡
 + 1] = {

77 
	#UOP
(
_u›
, 
_fu_˛ass
, 
_Êags
Ë{ #_u›, 
fu_
##_fu_˛ass, _Êags},

	)

78 
	~"u›1.d©
"

79 #unde‡
UOP


86 
	su›_èbÀ_íåy_t
 {

87 
	mu›
;

88 
	midï
[
IDEP_COUNT
];

89 
	modï
[
ODEP_COUNT
];

90 
u›_èbÀ_íåy_t
 *
	m√xt
;

93 
u›_èbÀ_íåy_t
 *
	gu›_èbÀ
[
x86_›code_cou¡
];

96 
ªpos_t
 *
	gu›_ªpos
;

99 
	$u›_èbÀ_íåy_add
(
x86_›code_t
 
›code
,

100 
u›_èbÀ_íåy_t
 *
íåy
)

102 
u›_èbÀ_íåy_t
 *
œ°
;

103 
œ°
 = 
u›_èbÀ
[
›code
];

104 i‡(!
œ°
) {

105 
u›_èbÀ
[
›code
] = 
íåy
;

108 
œ°
->
√xt
)

109 
œ°
 =Üa°->
√xt
;

110 
œ°
->
√xt
 = 
íåy
;

111 
	}
}

114 
	$u›_öô
()

116 
x86_›code_t
 
›code
;

117 
u›_èbÀ_íåy_t
 *
íåy
;

118 
i
, 
j
;

120 
u›_ªpos
 = 
	`ªpos_¸óã
((
u›_t
), "uop_repos");

122 
	#X86_INST
(
_›code
Ë
›code
 = 
›_
##_›code;

	)

123 
	#UOP
(
_u›
, 
_idï0
, 
_idï1
, 
_idï2
, 
_odï0
, 
_odï1
, 
_odï2
, 
_odï3
) \

124 
íåy
 = 
	`ˇŒoc
(1, (
u›_èbÀ_íåy_t
)); \

125 
íåy
->
u›
 = 
u›_
##
_u›
; \

126 
íåy
->
idï
[0] = 
_idï0
; \

127 
íåy
->
idï
[1] = 
_idï1
; \

128 
íåy
->
idï
[2] = 
_idï2
; \

129 
íåy
->
odï
[0] = 
_odï0
; \

130 
íåy
->
odï
[1] = 
_odï1
; \

131 
íåy
->
odï
[2] = 
_odï2
; \

132 
íåy
->
odï
[3] = 
_odï3
; \

133 
	`u›_èbÀ_íåy_add
(
›code
, 
íåy
);

	)

134 
	~"u›2.d©
"

135 #unde‡
X86_INST


136 #unde‡
UOP


140 
›code
 = 0; opcodê< 
x86_›code_cou¡
; opcode++) {

141 
íåy
 = 
u›_èbÀ
[
›code
];É¡ry;É¡ry =É¡ry->
√xt
) {

142 
i
 = 0; i < 
IDEP_COUNT
; i++)

143 
j
 = 0; j < 
i
; j++)

144 i‡(
íåy
->
idï
[
i
] &&É¡ry->idï[i] =íåy->idï[
j
])

145 
	`∑nic
("uop2.dat: opcode=0x%x,Ñepeated input dependence",

146 
›code
);

147 
i
 = 0; i < 
ODEP_COUNT
; i++)

148 
j
 = 0; j < 
i
; j++)

149 i‡(
íåy
->
odï
[
i
] &&É¡ry->odï[i] =íåy->odï[
j
])

150 
	`∑nic
("uop2.dat: opcode=0x%x,Ñepeated output dependence",

151 
›code
);

154 
	}
}

157 
	$u›_d⁄e
()

159 
x86_›code_t
 
›code
;

160 
u›_èbÀ_íåy_t
 *
íåy
;

161 
›code
 = 0; opcodê< 
x86_›code_cou¡
; opcode++) {

162 
u›_èbÀ
[
›code
]) {

163 
íåy
 = 
u›_èbÀ
[
›code
]->
√xt
;

164 
	`‰ì
(
u›_èbÀ
[
›code
]);

165 
u›_èbÀ
[
›code
] = 
íåy
;

169 
	`ªpos_‰ì
(
u›_ªpos
);

170 
	}
}

173 
	$u›_dï_∑r£
(
li°_t
 *
u›_li°
, 
dï
)

176 i‡(
	`DEP_IS_VALID
(
dï
))

177  
dï
;

180 
dï
) {

182 
DNONE
:

183 
DFPOP
:

184 
DFPOP2
:

185 
DFPUSH
:

186  
dï
;

188 
DRM8
:

189  
iß_ö°
.
modrm_rm
 < 4 ? 
DEAX
 + isa_inst.modrm_rm : DEAX + isa_inst.modrm_rm - 4;

191 
DRM16
:

192 
DRM32
:

193  
DEAX
 + 
iß_ö°
.
modrm_rm
;

195 
DR8
:

196  
iß_ö°
.
ªg
 < 4 ? 
DEAX
 + isa_inst.reg : DEAX + isa_inst.reg - 4;

198 
DR16
:

199 
DR32
:

200  
DEAX
 + 
iß_ö°
.
ªg
;

202 
DIR8
:

203  
iß_ö°
.
›ödex
 < 4 ? 
DEAX
 + isa_inst.opindex : DEAX + isa_inst.opindex - 4;

205 
DIR16
:

206 
DIR32
:

207  
DEAX
 + 
iß_ö°
.
›ödex
;

209 
DSREG
:

210  
DES
 + 
iß_ö°
.
ªg
;

212 
DSTI
:

213  
DST0
 + 
iß_ö°
.
›ödex
;

217 
	`∑nic
("u›_dï_∑r£: unknow¿dï: 0x%x\n", 
dï
);

219 
	}
}

222 
	$u›_idï_∑r£
(
li°_t
 *
u›_li°
, 
dï
)

224 
u›_t
 *
u›
;

229 i‡(((
dï
 =
DRM8
 || dï =
DRM16
 || dï =
DRM32
Ë&& 
iß_ö°
.
modrm_mod
 != 3) ||

230 
dï
 =
DMEM
)

234 
u›
 = 
	`ªpos_¸óã_obje˘
(
u›_ªpos
);

235 
u›
->u› = 
u›_efÁddr
;

236 
u›
->
idï
[0] = 
iß_ö°
.
£gmít
 ? iß_ö°.£gmíà- 
ªg_es
 + 
DES
 : 
DNONE
;

237 
u›
->
idï
[1] = 
iß_ö°
.
ó_ba£
 ? iß_ö°.ó_ba£ - 
ªg_óx
 + 
DEAX
 : 
DNONE
;

238 
u›
->
idï
[2] = 
iß_ö°
.
ó_ödex
 ? iß_ö°.ó_ödex - 
ªg_óx
 + 
DEAX
 : 
DNONE
;

239 
u›
->
odï
[0] = 
DEA
;

240 
u›
->
fu_˛ass
 = 
u›_b™k
[uop->uop].fu_class;

241 
u›
->
Êags
 = 
u›_b™k
[uop->uop].flags;

242 
	`li°_add
(
u›_li°
, 
u›
);

245 
u›
 = 
	`ªpos_¸óã_obje˘
(
u›_ªpos
);

246 
u›
->u› = 
u›_lﬂd
;

247 
u›
->
idï
[0] = 
DEA
;

248 
u›
->
odï
[0] = 
DDATA
;

249 
u›
->
fu_˛ass
 = 
u›_b™k
[uop->uop].fu_class;

250 
u›
->
Êags
 = 
u›_b™k
[uop->uop].flags;

251 
	`li°_add
(
u›_li°
, 
u›
);

254  
DDATA
;

258 i‡(
dï
 =
DEASEG
)

259  
iß_ö°
.
£gmít
 ? iß_ö°.£gmíà- 
ªg_es
 + 
DES
 : 
DNONE
;

260 i‡(
dï
 =
DEABAS
)

261  
iß_ö°
.
ó_ba£
 ? iß_ö°.ó_ba£ - 
ªg_óx
 + 
DEAX
 : 
DNONE
;

262 i‡(
dï
 =
DEAIDX
)

263  
iß_ö°
.
ó_ödex
 ? iß_ö°.ó_ödex - 
ªg_óx
 + 
DEAX
 : 
DNONE
;

266  
	`u›_dï_∑r£
(
u›_li°
, 
dï
);

267 
	}
}

270 
	$u›_odï_∑r£
(
li°_t
 *
u›_li°
, 
dï
)

272 
u›_t
 *
u›
;

275 i‡(((
dï
 =
DRM8
 || dï =
DRM16
 || dï =
DRM32
Ë&& 
iß_ö°
.
modrm_mod
 != 3) ||

276 
dï
 =
DMEM
)

282 
u›
 = 
	`ªpos_¸óã_obje˘
(
u›_ªpos
);

283 
u›
->u› = 
u›_efÁddr
;

284 
u›
->
idï
[0] = 
iß_ö°
.
£gmít
 ? iß_ö°.£gmíà- 
ªg_es
 + 
DES
 : 
DNONE
;

285 
u›
->
idï
[1] = 
iß_ö°
.
ó_ba£
 ? iß_ö°.ó_ba£ - 
ªg_óx
 + 
DEAX
 : 
DNONE
;

286 
u›
->
idï
[2] = 
iß_ö°
.
ó_ödex
 ? iß_ö°.ó_ödex - 
ªg_óx
 + 
DEAX
 : 
DNONE
;

287 
u›
->
odï
[0] = 
DEA
;

288 
u›
->
fu_˛ass
 = 
u›_b™k
[uop->uop].fu_class;

289 
u›
->
Êags
 = 
u›_b™k
[uop->uop].flags;

290 
	`li°_add
(
u›_li°
, 
u›
);

293 
u›
 = 
	`ªpos_¸óã_obje˘
(
u›_ªpos
);

294 
u›
->u› = 
u›_°‹e
;

295 
u›
->
idï
[0] = 
DEA
;

296 
u›
->
idï
[1] = 
DDATA
;

297 
u›
->
fu_˛ass
 = 
u›_b™k
[uop->uop].fu_class;

298 
u›
->
Êags
 = 
u›_b™k
[uop->uop].flags;

299 
	`li°_add
(
u›_li°
, 
u›
);

302  
DDATA
;

306  
	`u›_dï_∑r£
(
u›_li°
, 
dï
);

307 
	}
}

310 
	$u›_‰ì_if_nŸ_queued
(
u›_t
 *
u›
)

312 i‡(
u›
->
ö_„tchq
 || u›->
ö_u›q
 || u›->
ö_iq
 ||

313 
u›
->
ö_lq
 || u›->
ö_sq
 ||

314 
u›
->
ö_rob
 || u›->
ö_evítq
)

316 
	`ªpos_‰ì_obje˘
(
u›_ªpos
, 
u›
);

317 
	}
}

320 
	$u›_exi°s
(
u›_t
 *
u›
)

322  
	`ªpos_Æloˇãd_obje˘
(
u›_ªpos
, 
u›
);

323 
	}
}

326 
	$u›_dump_buf
(
u›_t
 *
u›
, *
buf
, 
size
)

328 
i
, 
l‹eg
, 
cou¡
, 
Â_t›_of_°ack
;

329 *
comma
;

331 
	`dump_buf
(&
buf
, &
size
, "%†", 
u›_b™k
[
u›
->u›].
«me
);

332 
comma
 = "";

333 
i
 = 
cou¡
 = 0; i < 
IDEP_COUNT
; i++) {

334 i‡(!
	`DEP_IS_VALID
(
u›
->
idï
[
i
]))

336 
	`dump_buf
(&
buf
, &
size
, "%s%s", 
comma
,

337 
	`m≠_vÆue
(&
dï_m≠
, 
u›
->
idï
[
i
]));

338 
comma
 = ",";

339 
cou¡
++;

341 i‡(!
cou¡
)

342 
	`dump_buf
(&
buf
, &
size
, "-");

343 
	`dump_buf
(&
buf
, &
size
, "/");

344 
comma
 = "";

345 
Â_t›_of_°ack
 = 0;

346 
i
 = 
cou¡
 = 0; i < 
ODEP_COUNT
; i++) {

347 
l‹eg
 = 
u›
->
odï
[
i
];

348 i‡(
l‹eg
 =
DFPOP
)

349 
Â_t›_of_°ack
--;

350 i‡(
l‹eg
 =
DFPOP2
)

351 
Â_t›_of_°ack
 -= 2;

352 i‡(
l‹eg
 =
DFPUSH
)

353 
Â_t›_of_°ack
++;

354 i‡(!
	`DEP_IS_VALID
(
l‹eg
))

356 
	`dump_buf
(&
buf
, &
size
, "%s%s", 
comma
, 
	`m≠_vÆue
(&
dï_m≠
, 
l‹eg
));

357 
comma
 = ",";

358 
cou¡
++;

360 i‡(!
cou¡
)

361 
	`dump_buf
(&
buf
, &
size
, "-");

362 i‡(
Â_t›_of_°ack
)

363 
	`dump_buf
(&
buf
, &
size
, "(°=>%+d)", 
Â_t›_of_°ack
);

364 
	}
}

367 
	$u›_dump
(
u›_t
 *
u›
, 
FILE
 *
f
)

369 
buf
[100];

370 
	`u›_dump_buf
(
u›
, 
buf
, (buf));

371 
	`Ârötf
(
f
, "%s", 
buf
);

372 
	}
}

375 
	$u›_li°_dump
(
li°_t
 *
u›_li°
, 
FILE
 *
f
)

377 
u›_t
 *
u›
;

378 
i
;

380 
i
 = 0; i < 
	`li°_cou¡
(
u›_li°
); i++) {

381 
u›
 = 
	`li°_gë
(
u›_li°
, 
i
);

382 
	`Ârötf
(
f
, "%3d. ", 
i
);

383 
	`u›_dump
(
u›
, 
f
);

384 
	`Ârötf
(
f
, "\n");

386 
	}
}

389 
	$u›_ li°_dump
(
 li°_t
 *
u›_li°
, 
FILE
 *
f
)

391 
u›_t
 *
u›
;

393 
	` li°_hód
(
u›_li°
);

394 !
	` li°_eﬁ
(
u›_li°
)) {

395 
u›
 = 
	` li°_gë
(
u›_li°
);

396 
	`Ârötf
(
f
, "%3d. ", 
	` li°_cuºít
(
u›_li°
));

397 
	`u›_dump
(
u›
, 
f
);

398 
	`Ârötf
(
f
, "\n");

399 
	` li°_√xt
(
u›_li°
);

401 
	}
}

408 
	$u›_ li°_check_if_ªady
(
 li°_t
 *
u›_li°
)

410 
u›_t
 *
u›
;

411 
	` li°_hód
(
u›_li°
);

412 
	` li°_hód
(
u›_li°
); !
	` li°_eﬁ
(u›_li°); 
	` li°_√xt
(uop_list)) {

413 
u›
 = 
	` li°_gë
(
u›_li°
);

414 i‡(
u›
->
ªady
 || !
	`rf_ªady
(uop))

416 
u›
->
ªady
 = 1;

417 
	`esim_debug
("uopáction=\"update\", core=%d, seq=%lld,Ñeady=1\n",

418 
u›
->
c‹e
, (Ëu›->
di_£q
);

420 
	}
}

426 
u›_t
 *
	$u›_decode
(
li°_t
 *
li°
)

428 
u›_èbÀ_íåy_t
 *
íåy
;

429 
u›_t
 *
u›
, *
ªt
 = 
NULL
;

430 
cou¡
, 
i
;

432 
cou¡
 = 
	`li°_cou¡
(
li°
);

433 
íåy
 = 
u›_èbÀ
[
iß_ö°
.
›code
];É¡ry;É¡ry =É¡ry->
√xt
) {

436 i‡(
ªt
)

437 
	`∑nic
("uop_decode:Ço uopállowedáfter control uop");

438 
u›
 = 
	`ªpos_¸óã_obje˘
(
u›_ªpos
);

441 
i
 = 0; i < 
IDEP_COUNT
; i++)

442 
u›
->
idï
[
i
] = 
	`u›_idï_∑r£
(
li°
, 
íåy
->idep[i]);

445 
	`li°_add
(
li°
, 
u›
);

448 
i
 = 0; i < 
ODEP_COUNT
; i++)

449 
u›
->
odï
[
i
] = 
	`u›_odï_∑r£
(
li°
, 
íåy
->odep[i]);

452 
u›
->u› = 
íåy
->uop;

453 
u›
->
fu_˛ass
 = 
u›_b™k
[
íåy
->uop].fu_class;

454 
u›
->
Êags
 = 
u›_b™k
[
íåy
->uop].flags;

455 i‡(
u›
->
Êags
 & 
FCTRL
)

456 
ªt
 = 
u›
;

460  
ªt
 ?Ñë : 
	`li°_gë
(
li°
, 
cou¡
);

461 
	}
}

	@writeback.c

20 
	~<m2s.h
>

24 
	$wrôeback_c‹e
(
c‹e
)

26 
u›_t
 *
u›
;

27 
thªad
, 
ªcovî
 = 0;

32 
	` li°_hód
(
CORE
.
evítq
);

33 
u›
 = 
	` li°_gë
(
CORE
.
evítq
);

34 i‡(
	` li°_îr‹
(
CORE
.
evítq
))

39 i‡(
u›
->
Êags
 & 
FMEM
)

40 
u›
->
whí
 = 
sim_cy˛e
;

41 i‡(
u›
->
whí
 > 
sim_cy˛e
)

45 
	`as£π
(
	`u›_exi°s
(
u›
));

46 
	`as£π
(
u›
->
whí
 =
sim_cy˛e
);

47 
	`as£π
(
u›
->
c‹e
 == core);

48 
	`as£π
(
u›
->
ªady
);

49 
	`as£π
(!
u›
->
com∂ëed
);

52 
	` li°_ªmove
(
CORE
.
evítq
);

53 
u›
->
ö_evítq
 = 0;

54 
thªad
 = 
u›
->thread;

58 i‡(
p_ªcovî_köd
 =
p_ªcovî_köd_wrôeback
 &&

59 (
u›
->
Êags
 & 
FCTRL
Ë&& !u›->
•ecmode
 &&

60 
u›
->
√ù
 !u›->
¥ed_√ù
)

61 
ªcovî
 = 1;

64 
	`esim_debug
("uopáction=\"update\", core=%d, seq=%llu,"

66 
u›
->
c‹e
, (Ëu›->
di_£q
);

69 
u›
->
com∂ëed
 = 1;

70 
	`rf_wrôe
(
u›
);

71 
CORE
.
rf_öt_wrôes
 +
u›
->
ph_öt_odï_cou¡
;

72 
CORE
.
rf_Â_wrôes
 +
u›
->
ph_Â_odï_cou¡
;

73 
CORE
.
iq_wakeup_ac˚s£s
++;

74 
THREAD
.
rf_öt_wrôes
 +
u›
->
ph_öt_odï_cou¡
;

75 
THREAD
.
rf_Â_wrôes
 +
u›
->
ph_Â_odï_cou¡
;

76 
THREAD
.
iq_wakeup_ac˚s£s
++;

77 
	`u›_‰ì_if_nŸ_queued
(
u›
);

81 i‡(
ªcovî
)

82 
	`p_ªcovî
(
c‹e
, 
thªad
);

84 
	}
}

87 
	$p_wrôeback
()

89 
c‹e
;

90 
p
->
°age
 = "writeback";

91 
FOREACH_CORE


92 
	`wrôeback_c‹e
(
c‹e
);

93 
	}
}

	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@uop1.dat

24 
	$UOP
(
n›
, 
n⁄e
, 0)

26 
	$UOP
(
move
, 
n⁄e
, 
FICOMP
)

27 
	$UOP
(
add
, 
öèdd
, 
FICOMP
)

28 
	$UOP
(
sub
, 
ötsub
, 
FICOMP
)

29 
	$UOP
(
mu…
, 
ötmu…
, 
FICOMP
)

30 
	$UOP
(
div
, 
ötdiv
, 
FICOMP
)

31 
	$UOP
(
efÁddr
,ÉfÁddr, 
FICOMP
)

33 
	$UOP
(
™d
, 
logiˇl
, 
FLCOMP
)

34 
	$UOP
(
‹
, 
logiˇl
, 
FLCOMP
)

35 
	$UOP
(
x‹
, 
logiˇl
, 
FLCOMP
)

36 
	$UOP
(
nŸ
, 
logiˇl
, 
FLCOMP
)

37 
	$UOP
(
shi·
, 
logiˇl
, 
FLCOMP
)

38 
	$UOP
(
sign
, 
logiˇl
, 
FLCOMP
)

40 
	$UOP
(
Âmove
, 
n⁄e
, 
FFCOMP
)

41 
	$UOP
(
Âsim∂e
, 
Âadd
, 
FFCOMP
)

42 
	$UOP
(
Âadd
, f∑dd, 
FFCOMP
)

43 
	$UOP
(
Âcomp
, 
Âadd
, 
FFCOMP
)

44 
	$UOP
(
Âmu…
, fpmu…, 
FFCOMP
)

45 
	$UOP
(
Âdiv
, fpdiv, 
FFCOMP
)

46 
	$UOP
(
Âcom∂ex
, fpcom∂ex, 
FFCOMP
)

48 
	`UOP
(
lﬂd
, 
n⁄e
, 
FLOAD
 | 
FMEM
)

49 
	`UOP
(
°‹e
, 
n⁄e
, 
FSTORE
 | 
FMEM
)

51 
	`UOP
(
ˇŒ
, 
n⁄e
, 
FCTRL
 | 
FCALL
)

52 
	`UOP
(
ªt
, 
n⁄e
, 
FCTRL
 | 
FRET
)

53 
	$UOP
(
jump
, 
n⁄e
, 
FCTRL
)

54 
	`UOP
(
bønch
, 
n⁄e
, 
FCTRL
 | 
FCOND
)

56 
	`UOP
(
sysˇŒ
, 
n⁄e
, 0)

	@uop2.dat

23 
	$X86_INST
(
adc_Æ_imm8
)

24 
	$UOP
(
add
, 
DEAX
, 
DCF
, 0, DEAX, 
DZPS
, DCF, 
DOF
)

25 
	$X86_INST
(
adc_ax_imm16
)

26 
	$UOP
(
add
, 
DEAX
, 
DCF
, 0, DEAX, 
DZPS
, DCF, 
DOF
)

27 
	$X86_INST
(
adc_óx_imm32
)

28 
	$UOP
(
add
, 
DEAX
, 
DCF
, 0, DEAX, 
DZPS
, DCF, 
DOF
)

29 
	$X86_INST
(
adc_rm8_imm8
)

30 
	$UOP
(
add
, 
DRM8
, 
DCF
, 0, DRM8, 
DZPS
, DCF, 
DOF
)

31 
	$X86_INST
(
adc_rm16_imm16
)

32 
	$UOP
(
add
, 
DRM16
, 
DCF
, 0, DRM16, 
DZPS
, DCF, 
DOF
)

33 
	$X86_INST
(
adc_rm32_imm32
)

34 
	$UOP
(
add
, 
DRM32
, 
DCF
, 0, DRM32, 
DZPS
, DCF, 
DOF
)

35 
	$X86_INST
(
adc_rm16_imm8
)

36 
	$UOP
(
add
, 
DRM16
, 
DCF
, 0, DRM16, 
DZPS
, DCF, 
DOF
)

37 
	$X86_INST
(
adc_rm32_imm8
)

38 
	$UOP
(
add
, 
DRM32
, 
DCF
, 0, DRM32, 
DZPS
, DCF, 
DOF
)

39 
	$X86_INST
(
adc_rm8_r8
)

40 
	$UOP
(
add
, 
DRM8
, 
DR8
, 
DCF
, DRM8, 
DZPS
, DCF, 
DOF
)

41 
	$X86_INST
(
adc_rm16_r16
)

42 
	$UOP
(
add
, 
DRM16
, 
DR16
, 
DCF
, DRM16, 
DZPS
, DCF, 
DOF
)

43 
	$X86_INST
(
adc_rm32_r32
)

44 
	$UOP
(
add
, 
DRM32
, 
DR32
, 
DCF
, DRM32, 
DZPS
, DCF, 
DOF
)

45 
	$X86_INST
(
adc_r8_rm8
)

46 
	$UOP
(
add
, 
DR8
, 
DRM8
, 
DCF
, DR8, 
DZPS
, DCF, 
DOF
)

47 
	$X86_INST
(
adc_r16_rm16
)

48 
	$UOP
(
add
, 
DR16
, 
DRM16
, 
DCF
, DR16, 
DZPS
, DCF, 
DOF
)

49 
	$X86_INST
(
adc_r32_rm32
)

50 
	$UOP
(
add
, 
DR32
, 
DRM32
, 
DCF
, DR32, 
DZPS
, DCF, 
DOF
)

52 
	$X86_INST
(
add_Æ_imm8
)

53 
	$UOP
(
add
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

54 
	$X86_INST
(
add_ax_imm16
)

55 
	$UOP
(
add
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

56 
	$X86_INST
(
add_óx_imm32
)

57 
	$UOP
(
add
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

58 
	$X86_INST
(
add_rm8_imm8
)

59 
	$UOP
(
add
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

60 
	$X86_INST
(
add_rm16_imm16
)

61 
	$UOP
(
add
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

62 
	$X86_INST
(
add_rm32_imm32
)

63 
	$UOP
(
add
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

64 
	$X86_INST
(
add_rm16_imm8
)

65 
	$UOP
(
add
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

66 
	$X86_INST
(
add_rm32_imm8
)

67 
	$UOP
(
add
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

68 
	$X86_INST
(
add_rm8_r8
)

69 
	$UOP
(
add
, 
DRM8
, 
DR8
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

70 
	$X86_INST
(
add_rm16_r16
)

71 
	$UOP
(
add
, 
DRM16
, 
DR16
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

72 
	$X86_INST
(
add_rm32_r32
)

73 
	$UOP
(
add
, 
DRM32
, 
DR32
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

74 
	$X86_INST
(
add_r8_rm8
)

75 
	$UOP
(
add
, 
DR8
, 
DRM8
, 0, DR8, 
DZPS
, 
DCF
, 
DOF
)

76 
	$X86_INST
(
add_r16_rm16
)

77 
	$UOP
(
add
, 
DR16
, 
DRM16
, 0, DR16, 
DZPS
, 
DCF
, 
DOF
)

78 
	$X86_INST
(
add_r32_rm32
)

79 
	$UOP
(
add
, 
DR32
, 
DRM32
, 0, DR32, 
DZPS
, 
DCF
, 
DOF
)

81 
	$X86_INST
(
™d_Æ_imm8
)

82 
	$UOP
(
™d
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

83 
	$X86_INST
(
™d_ax_imm16
)

84 
	$UOP
(
™d
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

85 
	$X86_INST
(
™d_óx_imm32
)

86 
	$UOP
(
™d
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

87 
	$X86_INST
(
™d_rm8_imm8
)

88 
	$UOP
(
™d
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

89 
	$X86_INST
(
™d_rm16_imm16
)

90 
	$UOP
(
™d
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

91 
	$X86_INST
(
™d_rm32_imm32
)

92 
	$UOP
(
™d
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

93 
	$X86_INST
(
™d_rm16_imm8
)

94 
	$UOP
(
™d
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

95 
	$X86_INST
(
™d_rm32_imm8
)

96 
	$UOP
(
™d
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

97 
	$X86_INST
(
™d_rm8_r8
)

98 
	$UOP
(
™d
, 
DRM8
, 
DR8
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

99 
	$X86_INST
(
™d_rm16_r16
)

100 
	$UOP
(
™d
, 
DRM16
, 
DR16
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

101 
	$X86_INST
(
™d_rm32_r32
)

102 
	$UOP
(
™d
, 
DRM32
, 
DR32
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

103 
	$X86_INST
(
™d_r8_rm8
)

104 
	$UOP
(
™d
, 
DR8
, 
DRM8
, 0, DR8, 
DZPS
, 
DCF
, 
DOF
)

105 
	$X86_INST
(
™d_r16_rm16
)

106 
	$UOP
(
™d
, 
DR16
, 
DRM16
, 0, DR16, 
DZPS
, 
DCF
, 
DOF
)

107 
	$X86_INST
(
™d_r32_rm32
)

108 
	$UOP
(
™d
, 
DR32
, 
DRM32
, 0, DR32, 
DZPS
, 
DCF
, 
DOF
)

110 
	$X86_INST
(
bsf_r32_rm32
)

111 
	$UOP
(
shi·
, 
DRM32
, 0, 0, 
DR32
, 
DZPS
, 0, 0)

112 
	$X86_INST
(
b§_r32_rm32
)

113 
	$UOP
(
shi·
, 
DRM32
, 0, 0, 
DR32
, 
DZPS
, 0, 0)

115 
	$X86_INST
(
bsw≠_ú32
)

116 
	$UOP
(
shi·
, 
DIR32
, 0, 0, DIR32, 0, 0, 0)

118 
	$X86_INST
(
bt_rm32_r32
)

119 
	$UOP
(
shi·
, 
DRM32
, 
DR32
, 0, 
DCF
, 0, 0, 0)

120 
	$X86_INST
(
bt_rm32_imm8
)

121 
	$UOP
(
shi·
, 
DRM32
, 0, 0, 
DCF
, 0, 0, 0)

123 
	$X86_INST
(
bts_rm32_imm8
)

124 
	$UOP
(
sub
, 
DRM32
, 0, 0, DRM32, 
DCF
, 0, 0)

126 
	$X86_INST
(
ˇŒ_ªl32
)

127 
	$UOP
(
ˇŒ
, 0, 0, 0, 0, 0, 0, 0)

128 
	$X86_INST
(
ˇŒ_rm32
)

129 
	$UOP
(
ˇŒ
, 
DRM32
, 0, 0, 0, 0, 0, 0)

131 
	$X86_INST
(
cbw
)

132 
	$UOP
(
sign
, 
DEAX
, 0, 0, DEAX, 0, 0, 0)

133 
	$X86_INST
(
cwde
)

134 
	$UOP
(
sign
, 
DEAX
, 0, 0, DEAX, 0, 0, 0)

136 
	$X86_INST
(
cdq
)

137 
	$UOP
(
sign
, 
DEAX
, 0, 0, 
DEDX
, 0, 0, 0)

139 
	$X86_INST
(
˛d
)

140 
	$UOP
(
move
, 0, 0, 0, 0, 
DDF
, 0, 0)

142 
	$X86_INST
(
cmova_r16_rm16
)

143 
	$UOP
(
move
, 
DRM16
, 
DCF
, 
DZPS
, 
DR16
, 0, 0, 0)

144 
	$X86_INST
(
cmova_r32_rm32
)

145 
	$UOP
(
move
, 
DRM32
, 
DCF
, 
DZPS
, 
DR32
, 0, 0, 0)

146 
	$X86_INST
(
cmov´_r16_rm16
)

147 
	$UOP
(
move
, 
DRM16
, 
DCF
, 0, 
DR16
, 0, 0, 0)

148 
	$X86_INST
(
cmov´_r32_rm32
)

149 
	$UOP
(
move
, 
DRM32
, 
DCF
, 0, 
DR32
, 0, 0, 0)

150 
	$X86_INST
(
cmovb_r16_rm16
)

151 
	$UOP
(
move
, 
DRM16
, 
DCF
, 0, 
DR16
, 0, 0, 0)

152 
	$X86_INST
(
cmovb_r32_rm32
)

153 
	$UOP
(
move
, 
DRM32
, 
DCF
, 0, 
DR32
, 0, 0, 0)

154 
	$X86_INST
(
cmovbe_r16_rm16
)

155 
	$UOP
(
move
, 
DRM16
, 
DCF
, 
DZPS
, 
DR16
, 0, 0, 0)

156 
	$X86_INST
(
cmovbe_r32_rm32
)

157 
	$UOP
(
move
, 
DRM32
, 
DCF
, 
DZPS
, 
DR32
, 0, 0, 0)

158 
	$X86_INST
(
cmove_r16_rm16
)

159 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 0, 
DR16
, 0, 0, 0)

160 
	$X86_INST
(
cmove_r32_rm32
)

161 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 0, 
DR32
, 0, 0, 0)

162 
	$X86_INST
(
cmovg_r16_rm16
)

163 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 
DOF
, 
DR16
, 0, 0, 0)

164 
	$X86_INST
(
cmovg_r32_rm32
)

165 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 
DOF
, 
DR32
, 0, 0, 0)

166 
	$X86_INST
(
cmovge_r16_rm16
)

167 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 
DOF
, 
DR16
, 0, 0, 0)

168 
	$X86_INST
(
cmovge_r32_rm32
)

169 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 
DOF
, 
DR32
, 0, 0, 0)

170 
	$X86_INST
(
cmovl_r16_rm16
)

171 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 
DOF
, 
DR16
, 0, 0, 0)

172 
	$X86_INST
(
cmovl_r32_rm32
)

173 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 
DOF
, 
DR32
, 0, 0, 0)

174 
	$X86_INST
(
cmovÀ_r16_rm16
)

175 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 
DOF
, 
DR16
, 0, 0, 0)

176 
	$X86_INST
(
cmovÀ_r32_rm32
)

177 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 
DOF
, 
DR32
, 0, 0, 0)

178 
	$X86_INST
(
cmov√_r16_rm16
)

179 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 0, 
DR16
, 0, 0, 0)

180 
	$X86_INST
(
cmov√_r32_rm32
)

181 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 0, 
DR32
, 0, 0, 0)

182 
	$X86_INST
(
cmovno_r16_rm16
)

183 
	$UOP
(
move
, 
DRM16
, 
DOF
, 0, 
DR16
, 0, 0, 0)

184 
	$X86_INST
(
cmovno_r32_rm32
)

185 
	$UOP
(
move
, 
DRM32
, 
DOF
, 0, 
DR32
, 0, 0, 0)

186 
	$X86_INST
(
cmov≈_r16_rm16
)

187 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 0, 
DR16
, 0, 0, 0)

188 
	$X86_INST
(
cmov≈_r32_rm32
)

189 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 0, 
DR32
, 0, 0, 0)

190 
	$X86_INST
(
cmovns_r16_rm16
)

191 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 0, 
DR16
, 0, 0, 0)

192 
	$X86_INST
(
cmovns_r32_rm32
)

193 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 0, 
DR32
, 0, 0, 0)

194 
	$X86_INST
(
cmovo_r16_rm16
)

195 
	$UOP
(
move
, 
DRM16
, 
DOF
, 0, 
DR16
, 0, 0, 0)

196 
	$X86_INST
(
cmovo_r32_rm32
)

197 
	$UOP
(
move
, 
DRM32
, 
DOF
, 0, 
DR32
, 0, 0, 0)

198 
	$X86_INST
(
cmovp_r16_rm16
)

199 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 0, 
DR16
, 0, 0, 0)

200 
	$X86_INST
(
cmovp_r32_rm32
)

201 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 0, 
DR32
, 0, 0, 0)

202 
	$X86_INST
(
cmovs_r16_rm16
)

203 
	$UOP
(
move
, 
DRM16
, 
DZPS
, 0, 
DR16
, 0, 0, 0)

204 
	$X86_INST
(
cmovs_r32_rm32
)

205 
	$UOP
(
move
, 
DRM32
, 
DZPS
, 0, 
DR32
, 0, 0, 0)

207 
	$X86_INST
(
cmp_Æ_imm8
)

208 
	$UOP
(
sub
, 
DEAX
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

209 
	$X86_INST
(
cmp_ax_imm16
)

210 
	$UOP
(
sub
, 
DEAX
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

211 
	$X86_INST
(
cmp_óx_imm32
)

212 
	$UOP
(
sub
, 
DEAX
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

213 
	$X86_INST
(
cmp_rm8_imm8
)

214 
	$UOP
(
sub
, 
DRM8
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

215 
	$X86_INST
(
cmp_rm16_imm16
)

216 
	$UOP
(
sub
, 
DRM16
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

217 
	$X86_INST
(
cmp_rm32_imm32
)

218 
	$UOP
(
sub
, 
DRM32
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

219 
	$X86_INST
(
cmp_rm16_imm8
)

220 
	$UOP
(
sub
, 
DRM16
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

221 
	$X86_INST
(
cmp_rm32_imm8
)

222 
	$UOP
(
sub
, 
DRM32
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

223 
	$X86_INST
(
cmp_rm8_r8
)

224 
	$UOP
(
sub
, 
DRM8
, 
DR8
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

225 
	$X86_INST
(
cmp_rm16_r16
)

226 
	$UOP
(
sub
, 
DRM16
, 
DR16
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

227 
	$X86_INST
(
cmp_rm32_r32
)

228 
	$UOP
(
sub
, 
DRM32
, 
DR32
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

229 
	$X86_INST
(
cmp_r8_rm8
)

230 
	$UOP
(
sub
, 
DR8
, 
DRM8
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

231 
	$X86_INST
(
cmp_r16_rm16
)

232 
	$UOP
(
sub
, 
DR16
, 
DRM16
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

233 
	$X86_INST
(
cmp_r32_rm32
)

234 
	$UOP
(
sub
, 
DR32
, 
DRM32
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

236 
	$X86_INST
(
cmpsb
)

237 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

238 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

239 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

240 
	$UOP
(
lﬂd
, 
DAUX2
, 0, 0, DAUX2, 0, 0, 0)

241 
	$UOP
(
sub
, 
DAUX
, 
DAUX2
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

242 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

243 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

244 
	$X86_INST
(
cmpsd
)

245 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

246 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

247 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

248 
	$UOP
(
lﬂd
, 
DAUX2
, 0, 0, DAUX2, 0, 0, 0)

249 
	$UOP
(
sub
, 
DAUX
, 
DAUX2
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

250 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

251 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

253 
	$X86_INST
(
cmpxchg_rm32_r32
)

254 
	$UOP
(
sub
, 
DEAX
, 
DRM32
, 0, 
DZPS
, 
DCF
, 
DOF
, 0)

255 
	$UOP
(
move
, 
DZPS
, 
DR32
, 0, 
DRM32
, 0, 0, 0)

256 
	$UOP
(
move
, 
DCF
, 
DRM32
, 0, 
DEAX
, 0, 0, 0)

258 
	$X86_INST
(
˝uid
)

259 
	$UOP
(
move
, 
DEAX
, 0, 0, 
DAUX
, 0, 0, 0)

260 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DEAX
, 0, 0, 0)

261 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DEBX
, 0, 0, 0)

262 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DECX
, 0, 0, 0)

263 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DEDX
, 0, 0, 0)

265 
	$X86_INST
(
dec_rm8
)

266 
	$UOP
(
sub
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DOF
, 0)

267 
	$X86_INST
(
dec_rm32
)

268 
	$UOP
(
sub
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DOF
, 0)

269 
	$X86_INST
(
dec_ú16
)

270 
	$UOP
(
sub
, 
DIR16
, 0, 0, DIR16, 
DZPS
, 
DOF
, 0)

271 
	$X86_INST
(
dec_ú32
)

272 
	$UOP
(
sub
, 
DIR32
, 0, 0, DIR32, 
DZPS
, 
DOF
, 0)

274 
	$X86_INST
(
div_rm8
)

275 
	$UOP
(
div
, 
DEAX
, 
DRM8
, 0, DEAX, 0, 0, 0)

276 
	$X86_INST
(
div_rm32
)

277 
	$UOP
(
div
, 
DEDX
, 
DEAX
, 
DRM32
, DEAX, DEDX, 0, 0)

279 
	$X86_INST
(
f2xm1
)

280 
	$UOP
(
Âcom∂ex
, 
DST0
, 0, 0, DST0, 0, 0, 0)

282 
	$X86_INST
(
Ábs
)

283 
	$UOP
(
Âsim∂e
, 
DST0
, 0, 0, DST0, 0, 0, 0)

285 
	$X86_INST
(
Ádd_m32
)

286 
	$UOP
(
Âadd
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

287 
	$X86_INST
(
Ádd_m64
)

288 
	$UOP
(
Âadd
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

289 
	$X86_INST
(
Ádd_°0_°i
)

290 
	$UOP
(
Âadd
, 
DST0
, 
DSTI
, 0, DST0, 0, 0, 0)

291 
	$X86_INST
(
Ádd_°i_°0
)

292 
	$UOP
(
Âadd
, 
DSTI
, 
DST0
, 0, DST0, 0, 0, 0)

293 
	$X86_INST
(
Áddp_°i_°0
)

294 
	$UOP
(
Âadd
, 
DSTI
, 
DST0
, 0, 
DST1
, 
DFPOP
, 0, 0)

296 
	$X86_INST
(
fchs
)

297 
	$UOP
(
Âsim∂e
, 
DST0
, 0, 0, DST0, 0, 0, 0)

299 
	$X86_INST
(
fcmovb_°0_°i
)

300 
	$UOP
(
Âmove
, 
DSTI
, 
DCF
, 0, 
DST0
, 0, 0, 0)

301 
	$X86_INST
(
fcmove_°0_°i
)

302 
	$UOP
(
Âmove
, 
DSTI
, 
DZPS
, 0, 
DST0
, 0, 0, 0)

303 
	$X86_INST
(
fcmovbe_°0_°i
)

304 
	$UOP
(
Âmove
, 
DSTI
, 
DCF
, 
DZPS
, 
DST0
, 0, 0, 0)

305 
	$X86_INST
(
fcmovu_°0_°i
)

306 
	$UOP
(
Âmove
, 
DSTI
, 
DZPS
, 0, 
DST0
, 0, 0, 0)

307 
	$X86_INST
(
fcmovnb_°0_°i
)

308 
	$UOP
(
Âmove
, 
DSTI
, 
DCF
, 0, 
DST0
, 0, 0, 0)

309 
	$X86_INST
(
fcmov√_°0_°i
)

310 
	$UOP
(
Âmove
, 
DSTI
, 
DZPS
, 0, 
DST0
, 0, 0, 0)

311 
	$X86_INST
(
fcmovnbe_°0_°i
)

312 
	$UOP
(
Âmove
, 
DSTI
, 
DCF
, 
DZPS
, 
DST0
, 0, 0, 0)

313 
	$X86_INST
(
fcmovnu_°0_°i
)

314 
	$UOP
(
Âmove
, 
DSTI
, 
DZPS
, 0, 
DST0
, 0, 0, 0)

316 
	$X86_INST
(
fcom_m32
)

317 
	$UOP
(
Âcomp
, 
DST0
, 
DMEM
, 0, 
DFPST
, 0, 0, 0)

318 
	$X86_INST
(
fcom_m64
)

319 
	$UOP
(
Âcomp
, 
DST0
, 
DMEM
, 0, 
DFPST
, 0, 0, 0)

320 
	$X86_INST
(
fcom_°i
)

321 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 
DFPOP
, 0, 0)

322 
	$X86_INST
(
fcomp_m32
)

323 
	$UOP
(
Âcomp
, 
DST0
, 
DMEM
, 0, 
DFPST
, 
DFPOP
, 0, 0)

324 
	$X86_INST
(
fcomp_m64
)

325 
	$UOP
(
Âcomp
, 
DST0
, 
DMEM
, 0, 
DFPST
, 
DFPOP
, 0, 0)

326 
	$X86_INST
(
fcomp_°i
)

327 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 
DFPOP
, 0, 0)

328 
	$X86_INST
(
fcomµ
)

329 
	$UOP
(
Âcomp
, 
DST0
, 
DST1
, 0, 
DFPST
, 
DFPOP2
, 0, 0)

331 
	$X86_INST
(
fcomi_°0_°i
)

332 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 0, 0, 0)

333 
	$X86_INST
(
fcomù_°0_°i
)

334 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 
DFPOP
, 0, 0)

335 
	$X86_INST
(
fucomi_°0_°i
)

336 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 0, 0, 0)

337 
	$X86_INST
(
fucomù_°0_°i
)

338 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 
DFPOP
, 0, 0)

340 
	$X86_INST
(
fcos
)

341 
	$UOP
(
Âcom∂ex
, 
DST0
, 0, 0, DST0, 0, 0, 0)

343 
	$X86_INST
(
fdiv_m32
)

344 
	$UOP
(
Âdiv
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

345 
	$X86_INST
(
fdiv_m64
)

346 
	$UOP
(
Âdiv
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

347 
	$X86_INST
(
fdiv_°0_°i
)

348 
	$UOP
(
Âdiv
, 
DST0
, 
DSTI
, 0, DST0, 0, 0, 0)

349 
	$X86_INST
(
fdiv_°i_°0
)

350 
	$UOP
(
Âdiv
, 
DSTI
, 
DST0
, 0, DSTI, 0, 0, 0)

351 
	$X86_INST
(
fdivp_°i_°0
)

352 
	$UOP
(
Âdiv
, 
DSTI
, 
DST0
, 0, DSTI, 
DFPOP
, 0, 0)

354 
	$X86_INST
(
fdivr_m32
)

355 
	$UOP
(
Âdiv
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

356 
	$X86_INST
(
fdivr_m64
)

357 
	$UOP
(
Âdiv
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

358 
	$X86_INST
(
fdivr_°0_°i
)

359 
	$UOP
(
Âdiv
, 
DST0
, 
DSTI
, 0, DST0, 0, 0, 0)

360 
	$X86_INST
(
fdivr_°i_°0
)

361 
	$UOP
(
Âdiv
, 
DSTI
, 
DST0
, 0, DSTI, 0, 0, 0)

362 
	$X86_INST
(
fdivΩ_°i_°0
)

363 
	$UOP
(
Âdiv
, 
DSTI
, 
DST0
, 0, DSTI, 
DFPOP
, 0, 0)

365 
	$X86_INST
(
fûd_m16
)

366 
	$UOP
(
Âmove
, 
DMEM
, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

367 
	$X86_INST
(
fûd_m32
)

368 
	$UOP
(
Âmove
, 
DMEM
, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

369 
	$X86_INST
(
fûd_m64
)

370 
	$UOP
(
Âmove
, 
DMEM
, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

372 
	$X86_INST
(
fi°_m16
)

373 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 0, 0, 0)

374 
	$X86_INST
(
fi°_m32
)

375 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 0, 0, 0)

376 
	$X86_INST
(
fi°p_m16
)

377 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 
DFPOP
, 0, 0)

378 
	$X86_INST
(
fi°p_m32
)

379 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 
DFPOP
, 0, 0)

380 
	$X86_INST
(
fi°p_m64
)

381 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 
DFPOP
, 0, 0)

383 
	$X86_INST
(
Êd1
)

384 
	$UOP
(
Âmove
, 0, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

385 
	$X86_INST
(
Êdl2t
)

386 
	$UOP
(
Âmove
, 0, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

387 
	$X86_INST
(
Êdl2e
)

388 
	$UOP
(
Âmove
, 0, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

389 
	$X86_INST
(
Êdpi
)

390 
	$UOP
(
Âmove
, 0, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

391 
	$X86_INST
(
Êdlg2
)

392 
	$UOP
(
Âmove
, 0, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

393 
	$X86_INST
(
Êd 2
)

394 
	$UOP
(
Âmove
, 0, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

395 
	$X86_INST
(
Êdz
)

396 
	$UOP
(
Âmove
, 0, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

398 
	$X86_INST
(
Êd_m32
)

399 
	$UOP
(
Âmove
, 
DMEM
, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

400 
	$X86_INST
(
Êd_m64
)

401 
	$UOP
(
Âmove
, 
DMEM
, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

402 
	$X86_INST
(
Êd_m80
)

403 
	$UOP
(
Âmove
, 
DMEM
, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

404 
	$X86_INST
(
Êd_°i
)

405 
	$UOP
(
Âmove
, 
DSTI
, 0, 0, 
DFPUSH
, 
DST0
, 0, 0)

407 
	$X86_INST
(
Êdcw_m16
)

408 
	$UOP
(
Âmove
, 
DMEM
, 0, 0, 
DFPCW
, 0, 0, 0)

410 
	$X86_INST
(
fmul_m32
)

411 
	$UOP
(
Âmu…
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

412 
	$X86_INST
(
fmul_m64
)

413 
	$UOP
(
Âmu…
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

414 
	$X86_INST
(
fmul_°0_°i
)

415 
	$UOP
(
Âmu…
, 
DST0
, 
DSTI
, 0, DST0, 0, 0, 0)

416 
	$X86_INST
(
fmul_°i_°0
)

417 
	$UOP
(
Âmu…
, 
DSTI
, 
DST0
, 0, DSTI, 0, 0, 0)

418 
	$X86_INST
(
fmuÕ_°i_°0
)

419 
	$UOP
(
Âmu…
, 
DSTI
, 
DST0
, 0, DSTI, 
DFPOP
, 0, 0)

421 
	$X86_INST
(
Â©™
)

422 
	$UOP
(
Âcom∂ex
, 
DST0
, 
DST1
, 0, DST1, 
DFPOP
, 0, 0)

424 
	$X86_INST
(
Âªm
)

425 
	$UOP
(
Âdiv
, 
DST0
, 
DST1
, 0, DST0, 0, 0, 0)

427 
	$X86_INST
(
Âªm1
)

428 
	$UOP
(
Âdiv
, 
DST0
, 
DST1
, 0, DST0, 0, 0, 0)

430 
	$X86_INST
(
Âèn
)

431 
	$UOP
(
Âcom∂ex
, 
DST0
, 0, 0, 
DFPUSH
, DST0, 
DST1
, 0)

433 
	$X86_INST
(
‰ndöt
)

434 
	$UOP
(
Âsim∂e
, 
DST0
, 0, 0, DST0, 0, 0, 0)

436 
	$X86_INST
(
fsˇÀ
)

437 
	$UOP
(
Âcom∂ex
, 
DST1
, 0, 0, 
DST0
, 0, 0, 0)

439 
	$X86_INST
(
fsö
)

440 
	$UOP
(
Âcom∂ex
, 
DST0
, 0, 0, DST0, 0, 0, 0)

442 
	$X86_INST
(
fsöcos
)

443 
	$UOP
(
Âcom∂ex
, 
DST0
, 0, 0, 
DFPUSH
, DST0, 
DST1
, 0)

445 
	$X86_INST
(
fsqπ
)

446 
	$UOP
(
Âcom∂ex
, 
DST0
, 0, 0, DST0, 0, 0, 0)

448 
	$X86_INST
(
f°cw_m16
)

449 
	$UOP
(
Âmove
, 
DFPCW
, 0, 0, 
DMEM
, 0, 0, 0)

450 
	$X86_INST
(
‚°cw_m16
)

451 
	$UOP
(
Âmove
, 
DFPCW
, 0, 0, 
DMEM
, 0, 0, 0)

453 
	$X86_INST
(
f°_m32
)

454 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 0, 0, 0)

455 
	$X86_INST
(
f°_m64
)

456 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 0, 0, 0)

457 
	$X86_INST
(
f°_°i
)

458 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DSTI
, 0, 0, 0)

459 
	$X86_INST
(
f°p_m32
)

460 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 
DFPOP
, 0, 0)

461 
	$X86_INST
(
f°p_m64
)

462 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 
DFPOP
, 0, 0)

463 
	$X86_INST
(
f°p_m80
)

464 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DMEM
, 
DFPOP
, 0, 0)

465 
	$X86_INST
(
f°p_°i
)

466 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DSTI
, 
DFPOP
, 0, 0)

468 
	$X86_INST
(
f°sw_ax
)

469 
	$UOP
(
Âmove
, 
DFPST
, 0, 0, 
DEAX
, 0, 0, 0)

470 
	$X86_INST
(
‚°sw_ax
)

471 
	$UOP
(
Âmove
, 
DFPST
, 0, 0, 
DEAX
, 0, 0, 0)

473 
	$X86_INST
(
fsub_m32
)

474 
	$UOP
(
Âadd
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

475 
	$X86_INST
(
fsub_m64
)

476 
	$UOP
(
Âadd
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

477 
	$X86_INST
(
fsub_°0_°i
)

478 
	$UOP
(
Âadd
, 
DST0
, 
DSTI
, 0, DST0, 0, 0, 0)

479 
	$X86_INST
(
fsub_°i_°0
)

480 
	$UOP
(
Âadd
, 
DSTI
, 
DST0
, 0, DSTI, 0, 0, 0)

481 
	$X86_INST
(
fsubp_°i_°0
)

482 
	$UOP
(
Âadd
, 
DSTI
, 
DST0
, 0, DSTI, 
DFPOP
, 0, 0)

484 
	$X86_INST
(
fsubr_m32
)

485 
	$UOP
(
Âadd
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

486 
	$X86_INST
(
fsubr_m64
)

487 
	$UOP
(
Âadd
, 
DST0
, 
DMEM
, 0, DST0, 0, 0, 0)

488 
	$X86_INST
(
fsubr_°0_°i
)

489 
	$UOP
(
Âadd
, 
DST0
, 
DSTI
, 0, DST0, 0, 0, 0)

490 
	$X86_INST
(
fsubr_°i_°0
)

491 
	$UOP
(
Âadd
, 
DSTI
, 
DST0
, 0, DSTI, 0, 0, 0)

492 
	$X86_INST
(
fsubΩ_°i_°0
)

493 
	$UOP
(
Âadd
, 
DSTI
, 
DST0
, 0, DSTI, 
DFPOP
, 0, 0)

495 
	$X86_INST
(
·°
)

496 
	$UOP
(
Âcomp
, 
DST0
, 0, 0, 
DFPST
, 0, 0, 0)

498 
	$X86_INST
(
fucom_°i
)

499 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 0, 0, 0)

500 
	$X86_INST
(
fucomp_°i
)

501 
	$UOP
(
Âcomp
, 
DST0
, 
DSTI
, 0, 
DFPST
, 
DFPOP
, 0, 0)

502 
	$X86_INST
(
fucomµ
)

503 
	$UOP
(
Âcomp
, 
DST0
, 
DST1
, 0, 
DFPST
, 
DFPOP2
, 0, 0)

505 
	$X86_INST
(
fxam
)

506 
	$UOP
(
Âcomp
, 
DST0
, 0, 0, 
DFPST
, 0, 0, 0)

508 
	$X86_INST
(
fxch_°i
)

509 
	$UOP
(
Âmove
, 
DST0
, 0, 0, 
DFPAUX
, 0, 0, 0)

510 
	$UOP
(
Âmove
, 
DSTI
, 0, 0, 
DST0
, 0, 0, 0)

511 
	$UOP
(
Âmove
, 
DFPAUX
, 0, 0, 
DSTI
, 0, 0, 0)

513 
	$X86_INST
(
fyl2x
)

514 
	$UOP
(
Âcom∂ex
, 
DST0
, 
DST1
, 0, DST1, 
DFPOP
, 0, 0)

516 
	$X86_INST
(
fyl2xp1
)

517 
	$UOP
(
Âcom∂ex
, 
DST0
, 
DST1
, 0, DST1, 
DFPOP
, 0, 0)

519 
	$X86_INST
(
h…
)

520 
	$UOP
(
n›
, 0, 0, 0, 0, 0, 0, 0)

522 
	$X86_INST
(
idiv_rm32
)

523 
	$UOP
(
div
, 
DRM32
, 
DEAX
, 0, DEAX, 
DEDX
, 0, 0)

525 
	$X86_INST
(
imul_rm32
)

526 
	$UOP
(
mu…
, 
DRM32
, 
DEAX
, 0, DEAX, 
DEDX
, 
DCF
, 
DOF
)

527 
	$X86_INST
(
imul_r32_rm32
)

528 
	$UOP
(
mu…
, 
DR32
, 
DRM32
, 0, DR32, 0, 
DCF
, 
DOF
)

529 
	$X86_INST
(
imul_r32_rm32_imm8
)

530 
	$UOP
(
mu…
, 
DRM32
, 0, 0, 
DR32
, 0, 
DCF
, 
DOF
)

531 
	$X86_INST
(
imul_r32_rm32_imm32
)

532 
	$UOP
(
mu…
, 
DRM32
, 0, 0, 
DR32
, 0, 
DCF
, 
DOF
)

534 
	$X86_INST
(
öc_rm8
)

535 
	$UOP
(
add
, 
DRM8
, 0, 0, DRM8, 0, 
DZPS
, 
DOF
)

536 
	$X86_INST
(
öc_rm32
)

537 
	$UOP
(
add
, 
DRM32
, 0, 0, DRM32, 0, 
DZPS
, 
DOF
)

538 
	$X86_INST
(
öc_ú16
)

539 
	$UOP
(
add
, 
DIR16
, 0, 0, DIR16, 0, 
DZPS
, 
DOF
)

540 
	$X86_INST
(
öc_ú32
)

541 
	$UOP
(
add
, 
DIR32
, 0, 0, DIR32, 0, 
DZPS
, 
DOF
)

543 
	$X86_INST
(
öt_imm8
)

544 
	$UOP
(
sysˇŒ
, 0, 0, 0, 0, 0, 0, 0)

546 
	$X86_INST
(
ja_ªl8
)

547 
	$UOP
(
bønch
, 
DCF
, 
DZPS
, 0, 0, 0, 0, 0)

548 
	$X86_INST
(
j´_ªl8
)

549 
	$UOP
(
bønch
, 
DCF
, 0, 0, 0, 0, 0, 0)

550 
	$X86_INST
(
jb_ªl8
)

551 
	$UOP
(
bønch
, 
DCF
, 0, 0, 0, 0, 0, 0)

552 
	$X86_INST
(
jbe_ªl8
)

553 
	$UOP
(
bønch
, 
DCF
, 
DZPS
, 0, 0, 0, 0, 0)

554 
	$X86_INST
(
je_ªl8
)

555 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

556 
	$X86_INST
(
jcxz_ªl8
)

557 
	$UOP
(
bønch
, 
DECX
, 0, 0, 0, 0, 0, 0)

558 
	$X86_INST
(
jecxz_ªl8
)

559 
	$UOP
(
bønch
, 
DECX
, 0, 0, 0, 0, 0, 0)

560 
	$X86_INST
(
jg_ªl8
)

561 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

562 
	$X86_INST
(
jge_ªl8
)

563 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

564 
	$X86_INST
(
jl_ªl8
)

565 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

566 
	$X86_INST
(
jÀ_ªl8
)

567 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

568 
	$X86_INST
(
j√_ªl8
)

569 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

570 
	$X86_INST
(
jno_ªl8
)

571 
	$UOP
(
bønch
, 
DOF
, 0, 0, 0, 0, 0, 0)

572 
	$X86_INST
(
j≈_ªl8
)

573 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

574 
	$X86_INST
(
jns_ªl8
)

575 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

576 
	$X86_INST
(
jo_ªl8
)

577 
	$UOP
(
bønch
, 
DOF
, 0, 0, 0, 0, 0, 0)

578 
	$X86_INST
(
jp_ªl8
)

579 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

580 
	$X86_INST
(
js_ªl8
)

581 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

583 
	$X86_INST
(
ja_ªl32
)

584 
	$UOP
(
bønch
, 
DCF
, 
DZPS
, 0, 0, 0, 0, 0)

585 
	$X86_INST
(
j´_ªl32
)

586 
	$UOP
(
bønch
, 
DCF
, 0, 0, 0, 0, 0, 0)

587 
	$X86_INST
(
jb_ªl32
)

588 
	$UOP
(
bønch
, 
DCF
, 0, 0, 0, 0, 0, 0)

589 
	$X86_INST
(
jbe_ªl32
)

590 
	$UOP
(
bønch
, 
DCF
, 
DZPS
, 0, 0, 0, 0, 0)

591 
	$X86_INST
(
je_ªl32
)

592 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

593 
	$X86_INST
(
jg_ªl32
)

594 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

595 
	$X86_INST
(
jge_ªl32
)

596 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

597 
	$X86_INST
(
jl_ªl32
)

598 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

599 
	$X86_INST
(
jÀ_ªl32
)

600 
	$UOP
(
bønch
, 
DZPS
, 
DOF
, 0, 0, 0, 0, 0)

601 
	$X86_INST
(
j√_ªl32
)

602 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

603 
	$X86_INST
(
jno_ªl32
)

604 
	$UOP
(
bønch
, 
DOF
, 0, 0, 0, 0, 0, 0)

605 
	$X86_INST
(
j≈_ªl32
)

606 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

607 
	$X86_INST
(
jns_ªl32
)

608 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

609 
	$X86_INST
(
jo_ªl32
)

610 
	$UOP
(
bønch
, 
DOF
, 0, 0, 0, 0, 0, 0)

611 
	$X86_INST
(
jp_ªl32
)

612 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

613 
	$X86_INST
(
js_ªl32
)

614 
	$UOP
(
bønch
, 
DZPS
, 0, 0, 0, 0, 0, 0)

616 
	$X86_INST
(
jmp_ªl8
)

617 
	$UOP
(
jump
, 0, 0, 0, 0, 0, 0, 0)

618 
	$X86_INST
(
jmp_ªl32
)

619 
	$UOP
(
jump
, 0, 0, 0, 0, 0, 0, 0)

620 
	$X86_INST
(
jmp_rm32
)

621 
	$UOP
(
jump
, 
DRM32
, 0, 0, 0, 0, 0, 0)

623 
	$X86_INST
(
Àa_r32_m
)

624 
	$UOP
(
efÁddr
, 
DEASEG
, 
DEABAS
, 
DEAIDX
, 
DR32
, 0, 0, 0)

626 
	$X86_INST
(
Àave
)

627 
	$UOP
(
move
, 
DEBP
, 0, 0, 
DESP
, 0, 0, 0)

628 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

629 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, 
DEBP
, 0, 0, 0)

630 
	$UOP
(
add
, 
DESP
, 0, 0, DESP, 0, 0, 0)

632 
	$X86_INST
(
lodsb
)

633 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

634 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, 
DEAX
, 0, 0, 0)

635 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

636 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

637 
	$X86_INST
(
lodsd
)

638 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

639 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, 
DEAX
, 0, 0, 0)

640 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

641 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

643 
	$X86_INST
(
mov_rm8_r8
)

644 
	$UOP
(
move
, 
DR8
, 0, 0, 
DRM8
, 0, 0, 0)

645 
	$X86_INST
(
mov_rm16_r16
)

646 
	$UOP
(
move
, 
DR16
, 0, 0, 
DRM16
, 0, 0, 0)

647 
	$X86_INST
(
mov_rm32_r32
)

648 
	$UOP
(
move
, 
DR32
, 0, 0, 
DRM32
, 0, 0, 0)

649 
	$X86_INST
(
mov_r8_rm8
)

650 
	$UOP
(
move
, 
DRM8
, 0, 0, 
DR8
, 0, 0, 0)

651 
	$X86_INST
(
mov_r16_rm16
)

652 
	$UOP
(
move
, 
DRM16
, 0, 0, 
DR16
, 0, 0, 0)

653 
	$X86_INST
(
mov_r32_rm32
)

654 
	$UOP
(
move
, 
DRM32
, 0, 0, 
DR32
, 0, 0, 0)

655 
	$X86_INST
(
mov_Æ_moffs8
)

656 
	$UOP
(
lﬂd
, 0, 0, 0, 
DEAX
, 0, 0, 0)

657 
	$X86_INST
(
mov_ax_moffs16
)

658 
	$UOP
(
lﬂd
, 0, 0, 0, 
DEAX
, 0, 0, 0)

659 
	$X86_INST
(
mov_óx_moffs32
)

660 
	$UOP
(
lﬂd
, 0, 0, 0, 
DEAX
, 0, 0, 0)

661 
	$X86_INST
(
mov_moffs8_Æ
)

662 
	$UOP
(
°‹e
, 
DEAX
, 0, 0, 0, 0, 0, 0)

663 
	$X86_INST
(
mov_moffs16_ax
)

664 
	$UOP
(
°‹e
, 
DEAX
, 0, 0, 0, 0, 0, 0)

665 
	$X86_INST
(
mov_moffs32_óx
)

666 
	$UOP
(
°‹e
, 
DEAX
, 0, 0, 0, 0, 0, 0)

667 
	$X86_INST
(
mov_ú8_imm8
)

668 
	$UOP
(
move
, 0, 0, 0, 
DIR8
, 0, 0, 0)

669 
	$X86_INST
(
mov_ú16_imm16
)

670 
	$UOP
(
move
, 0, 0, 0, 
DIR16
, 0, 0, 0)

671 
	$X86_INST
(
mov_ú32_imm32
)

672 
	$UOP
(
move
, 0, 0, 0, 
DIR32
, 0, 0, 0)

673 
	$X86_INST
(
mov_rm8_imm8
)

674 
	$UOP
(
move
, 0, 0, 0, 
DRM8
, 0, 0, 0)

675 
	$X86_INST
(
mov_rm16_imm16
)

676 
	$UOP
(
move
, 0, 0, 0, 
DRM16
, 0, 0, 0)

677 
	$X86_INST
(
mov_rm32_imm32
)

678 
	$UOP
(
move
, 0, 0, 0, 
DRM32
, 0, 0, 0)

679 
	$X86_INST
(
mov_§eg_rm16
)

680 
	$UOP
(
move
, 
DRM16
, 0, 0, 
DSREG
, 0, 0, 0)

681 
	$X86_INST
(
mov_§eg_rm32
)

682 
	$UOP
(
move
, 
DRM32
, 0, 0, 
DSREG
, 0, 0, 0)

683 
	$X86_INST
(
mov_rm16_§eg
)

684 
	$UOP
(
move
, 
DSREG
, 0, 0, 
DRM16
, 0, 0, 0)

685 
	$X86_INST
(
mov_rm32_§eg
)

686 
	$UOP
(
move
, 
DSREG
, 0, 0, 
DRM32
, 0, 0, 0)

688 
	$X86_INST
(
movsb
)

689 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

690 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

691 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

692 
	$UOP
(
°‹e
, 
DAUX
, 
DAUX2
, 0, 0, 0, 0, 0)

693 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

694 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

695 
	$X86_INST
(
movsw
)

696 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

697 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

698 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

699 
	$UOP
(
°‹e
, 
DAUX
, 
DAUX2
, 0, 0, 0, 0, 0)

700 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

701 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

702 
	$X86_INST
(
movsd
)

703 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

704 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

705 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

706 
	$UOP
(
°‹e
, 
DAUX
, 
DAUX2
, 0, 0, 0, 0, 0)

707 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

708 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

710 
	$X86_INST
(
movsx_r16_rm8
)

711 
	$UOP
(
sign
, 
DRM8
, 0, 0, 
DR16
, 0, 0, 0)

712 
	$X86_INST
(
movsx_r32_rm8
)

713 
	$UOP
(
sign
, 
DRM8
, 0, 0, 
DR32
, 0, 0, 0)

714 
	$X86_INST
(
movsx_r32_rm16
)

715 
	$UOP
(
sign
, 
DRM16
, 0, 0, 
DR32
, 0, 0, 0)

717 
	$X86_INST
(
movzx_r16_rm8
)

718 
	$UOP
(
move
, 
DRM8
, 0, 0, 
DR16
, 0, 0, 0)

719 
	$X86_INST
(
movzx_r32_rm8
)

720 
	$UOP
(
move
, 
DRM8
, 0, 0, 
DR32
, 0, 0, 0)

721 
	$X86_INST
(
movzx_r32_rm16
)

722 
	$UOP
(
move
, 
DRM16
, 0, 0, 
DR32
, 0, 0, 0)

724 
	$X86_INST
(
mul_rm32
)

725 
	$UOP
(
mu…
, 
DRM32
, 
DEAX
, 0, 
DEDX
, DEAX, 
DOF
, 
DCF
)

727 
	$X86_INST
(
√g_rm8
)

728 
	$UOP
(
sub
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

729 
	$X86_INST
(
√g_rm32
)

730 
	$UOP
(
sub
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

732 
	$X86_INST
(
n›
)

733 
	$UOP
(
n›
, 0, 0, 0, 0, 0, 0, 0)

735 
	$X86_INST
(
nŸ_rm8
)

736 
	$UOP
(
nŸ
, 
DRM8
, 0, 0, DRM8, 0, 0, 0)

737 
	$X86_INST
(
nŸ_rm16
)

738 
	$UOP
(
nŸ
, 
DRM16
, 0, 0, DRM16, 0, 0, 0)

739 
	$X86_INST
(
nŸ_rm32
)

740 
	$UOP
(
nŸ
, 
DRM32
, 0, 0, DRM32, 0, 0, 0)

742 
	$X86_INST
(
‹_Æ_imm8
)

743 
	$UOP
(
‹
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

744 
	$X86_INST
(
‹_ax_imm16
)

745 
	$UOP
(
‹
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

746 
	$X86_INST
(
‹_óx_imm32
)

747 
	$UOP
(
‹
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

748 
	$X86_INST
(
‹_rm8_imm8
)

749 
	$UOP
(
‹
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

750 
	$X86_INST
(
‹_rm16_imm16
)

751 
	$UOP
(
‹
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

752 
	$X86_INST
(
‹_rm32_imm32
)

753 
	$UOP
(
‹
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

754 
	$X86_INST
(
‹_rm16_imm8
)

755 
	$UOP
(
‹
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

756 
	$X86_INST
(
‹_rm32_imm8
)

757 
	$UOP
(
‹
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

758 
	$X86_INST
(
‹_rm8_r8
)

759 
	$UOP
(
‹
, 
DRM8
, 
DR8
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

760 
	$X86_INST
(
‹_rm16_r16
)

761 
	$UOP
(
‹
, 
DRM16
, 
DR16
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

762 
	$X86_INST
(
‹_rm32_r32
)

763 
	$UOP
(
‹
, 
DRM32
, 
DR32
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

764 
	$X86_INST
(
‹_r8_rm8
)

765 
	$UOP
(
‹
, 
DR8
, 
DRM8
, 0, DR8, 
DZPS
, 
DCF
, 
DOF
)

766 
	$X86_INST
(
‹_r16_rm16
)

767 
	$UOP
(
‹
, 
DR16
, 
DRM16
, 0, DR16, 
DZPS
, 
DCF
, 
DOF
)

768 
	$X86_INST
(
‹_r32_rm32
)

769 
	$UOP
(
‹
, 
DR32
, 
DRM32
, 0, DR32, 
DZPS
, 
DCF
, 
DOF
)

771 
	$X86_INST
(
p›_ú32
)

772 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

773 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, 
DIR32
, 0, 0, 0)

774 
	$UOP
(
add
, 
DESP
, 0, 0, DESP, 0, 0, 0)

776 
	$X86_INST
(
p›f
)

777 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

778 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, 
DZPS
, 
DCF
, 
DOF
, 0)

779 
	$UOP
(
add
, 
DESP
, 0, 0, DESP, 0, 0, 0)

781 
	$X86_INST
(
¥e„tcht0
)

782 
	$UOP
(
lﬂd
, 
DMEM
, 0, 0, 0, 0, 0, 0)

783 
	$X86_INST
(
¥e„tcht1
)

784 
	$UOP
(
lﬂd
, 
DMEM
, 0, 0, 0, 0, 0, 0)

785 
	$X86_INST
(
¥e„tcht2
)

786 
	$UOP
(
lﬂd
, 
DMEM
, 0, 0, 0, 0, 0, 0)

787 
	$X86_INST
(
¥e„tch¡a
)

788 
	$UOP
(
lﬂd
, 
DMEM
, 0, 0, 0, 0, 0, 0)

790 
	$X86_INST
(
push_rm32
)

791 
	$UOP
(
sub
, 
DESP
, 0, 0, DESP, 0, 0, 0)

792 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

793 
	$UOP
(
°‹e
, 
DAUX
, 
DRM32
, 0, 0, 0, 0, 0)

794 
	$X86_INST
(
push_imm8
)

795 
	$UOP
(
sub
, 
DESP
, 0, 0, DESP, 0, 0, 0)

796 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

797 
	$UOP
(
°‹e
, 
DAUX
, 0, 0, 0, 0, 0, 0)

798 
	$X86_INST
(
push_imm32
)

799 
	$UOP
(
sub
, 
DESP
, 0, 0, DESP, 0, 0, 0)

800 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

801 
	$UOP
(
°‹e
, 
DAUX
, 0, 0, 0, 0, 0, 0)

802 
	$X86_INST
(
push_ú32
)

803 
	$UOP
(
sub
, 
DESP
, 0, 0, DESP, 0, 0, 0)

804 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

805 
	$UOP
(
°‹e
, 
DAUX
, 
DIR32
, 0, 0, 0, 0, 0)

807 
	$X86_INST
(
pushf
)

808 
	$UOP
(
sub
, 
DESP
, 0, 0, DESP, 0, 0, 0)

809 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

810 
	$UOP
(
move
, 
DZPS
, 
DCF
, 
DOF
, 
DAUX2
, 0, 0, 0)

811 
	$UOP
(
°‹e
, 
DAUX
, 
DAUX2
, 0, 0, 0, 0, 0)

813 
	$X86_INST
(
r˛_rm8_1
)

814 
	$UOP
(
shi·
, 
DRM8
, 
DCF
, 0, DRM8, DCF, 
DOF
, 0)

815 
	$X86_INST
(
r˛_rm8_˛
)

816 
	$UOP
(
shi·
, 
DRM8
, 
DECX
, 
DCF
, DRM8, DCF, 
DOF
, 0)

817 
	$X86_INST
(
r˛_rm8_imm8
)

818 
	$UOP
(
shi·
, 
DRM8
, 
DCF
, 0, DRM8, DCF, 
DOF
, 0)

819 
	$X86_INST
(
r˛_rm16_1
)

820 
	$UOP
(
shi·
, 
DRM16
, 
DCF
, 0, DRM16, DCF, 
DOF
, 0)

821 
	$X86_INST
(
r˛_rm16_˛
)

822 
	$UOP
(
shi·
, 
DRM16
, 
DECX
, 
DCF
, DRM16, DCF, 
DOF
, 0)

823 
	$X86_INST
(
r˛_rm16_imm8
)

824 
	$UOP
(
shi·
, 
DRM16
, 
DCF
, 0, DRM16, DCF, 
DOF
, 0)

825 
	$X86_INST
(
r˛_rm32_1
)

826 
	$UOP
(
shi·
, 
DRM32
, 
DCF
, 0, DRM32, DCF, 
DOF
, 0)

827 
	$X86_INST
(
r˛_rm32_˛
)

828 
	$UOP
(
shi·
, 
DRM32
, 
DECX
, 
DCF
, DRM32, DCF, 
DOF
, 0)

829 
	$X86_INST
(
r˛_rm32_imm8
)

830 
	$UOP
(
shi·
, 
DRM32
, 
DCF
, 0, DRM32, DCF, 
DOF
, 0)

832 
	$X86_INST
(
r¸_rm8_1
)

833 
	$UOP
(
shi·
, 
DRM8
, 
DCF
, 0, DRM8, DCF, 
DOF
, 0)

834 
	$X86_INST
(
r¸_rm8_˛
)

835 
	$UOP
(
shi·
, 
DRM8
, 
DECX
, 
DCF
, DRM8, DCF, 
DOF
, 0)

836 
	$X86_INST
(
r¸_rm8_imm8
)

837 
	$UOP
(
shi·
, 
DRM8
, 
DCF
, 0, DRM8, DCF, 
DOF
, 0)

838 
	$X86_INST
(
r¸_rm16_1
)

839 
	$UOP
(
shi·
, 
DRM16
, 
DCF
, 0, DRM16, DCF, 
DOF
, 0)

840 
	$X86_INST
(
r¸_rm16_˛
)

841 
	$UOP
(
shi·
, 
DRM16
, 
DECX
, 
DCF
, DRM16, DCF, 
DOF
, 0)

842 
	$X86_INST
(
r¸_rm16_imm8
)

843 
	$UOP
(
shi·
, 
DRM16
, 
DCF
, 0, DRM16, DCF, 
DOF
, 0)

844 
	$X86_INST
(
r¸_rm32_1
)

845 
	$UOP
(
shi·
, 
DRM32
, 
DCF
, 0, DRM32, DCF, 
DOF
, 0)

846 
	$X86_INST
(
r¸_rm32_˛
)

847 
	$UOP
(
shi·
, 
DRM32
, 
DECX
, 
DCF
, DRM32, DCF, 
DOF
, 0)

848 
	$X86_INST
(
r¸_rm32_imm8
)

849 
	$UOP
(
shi·
, 
DRM32
, 
DCF
, 0, DRM32, DCF, 
DOF
, 0)

851 
	$X86_INST
(
rﬁ_rm8_1
)

852 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DCF
, 
DOF
, 0)

853 
	$X86_INST
(
rﬁ_rm8_˛
)

854 
	$UOP
(
shi·
, 
DRM8
, 
DECX
, 0, DRM8, 
DCF
, 
DOF
, 0)

855 
	$X86_INST
(
rﬁ_rm8_imm8
)

856 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DCF
, 
DOF
, 0)

857 
	$X86_INST
(
rﬁ_rm16_1
)

858 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DCF
, 
DOF
, 0)

859 
	$X86_INST
(
rﬁ_rm16_˛
)

860 
	$UOP
(
shi·
, 
DRM16
, 
DECX
, 0, DRM16, 
DCF
, 
DOF
, 0)

861 
	$X86_INST
(
rﬁ_rm16_imm8
)

862 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DCF
, 
DOF
, 0)

863 
	$X86_INST
(
rﬁ_rm32_1
)

864 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DCF
, 
DOF
, 0)

865 
	$X86_INST
(
rﬁ_rm32_˛
)

866 
	$UOP
(
shi·
, 
DRM32
, 
DECX
, 0, DRM32, 
DCF
, 
DOF
, 0)

867 
	$X86_INST
(
rﬁ_rm32_imm8
)

868 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DCF
, 
DOF
, 0)

870 
	$X86_INST
(
r‹_rm8_1
)

871 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DCF
, 
DOF
, 0)

872 
	$X86_INST
(
r‹_rm8_˛
)

873 
	$UOP
(
shi·
, 
DRM8
, 
DECX
, 0, DRM8, 
DCF
, 
DOF
, 0)

874 
	$X86_INST
(
r‹_rm8_imm8
)

875 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DCF
, 
DOF
, 0)

876 
	$X86_INST
(
r‹_rm16_1
)

877 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DCF
, 
DOF
, 0)

878 
	$X86_INST
(
r‹_rm16_˛
)

879 
	$UOP
(
shi·
, 
DRM16
, 
DECX
, 0, DRM16, 
DCF
, 
DOF
, 0)

880 
	$X86_INST
(
r‹_rm16_imm8
)

881 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DCF
, 
DOF
, 0)

882 
	$X86_INST
(
r‹_rm32_1
)

883 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DCF
, 
DOF
, 0)

884 
	$X86_INST
(
r‹_rm32_˛
)

885 
	$UOP
(
shi·
, 
DRM32
, 
DECX
, 0, DRM32, 
DCF
, 
DOF
, 0)

886 
	$X86_INST
(
r‹_rm32_imm8
)

887 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DCF
, 
DOF
, 0)

889 
	$X86_INST
(
ªp_movsb
)

890 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

891 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

892 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

893 
	$UOP
(
°‹e
, 
DAUX
, 
DAUX2
, 0, 0, 0, 0, 0)

894 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

895 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

896 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

897 
	$UOP
(
bønch
, 
DECX
, 0, 0, 0, 0, 0, 0)

898 
	$X86_INST
(
ªp_movsd
)

899 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

900 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

901 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

902 
	$UOP
(
°‹e
, 
DAUX
, 
DAUX2
, 0, 0, 0, 0, 0)

903 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

904 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

905 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

906 
	$UOP
(
bønch
, 
DECX
, 0, 0, 0, 0, 0, 0)

907 
	$X86_INST
(
ªp_°osb
)

908 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

909 
	$UOP
(
°‹e
, 
DAUX
, 
DEAX
, 0, 0, 0, 0, 0)

910 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

911 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

912 
	$UOP
(
bønch
, 
DECX
, 0, 0, 0, 0, 0, 0)

913 
	$X86_INST
(
ªp_°osd
)

914 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

915 
	$UOP
(
°‹e
, 
DAUX
, 
DEAX
, 0, 0, 0, 0, 0)

916 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

917 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

918 
	$UOP
(
bønch
, 
DECX
, 0, 0, 0, 0, 0, 0)

919 
	$X86_INST
(
ªpz_cmpsb
)

920 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

921 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

922 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

923 
	$UOP
(
lﬂd
, 
DAUX2
, 0, 0, DAUX2, 0, 0, 0)

924 
	$UOP
(
sub
, 
DAUX
, 
DAUX2
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

925 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

926 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

927 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

928 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

929 
	$X86_INST
(
ªpz_cmpsd
)

930 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

931 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

932 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

933 
	$UOP
(
lﬂd
, 
DAUX2
, 0, 0, DAUX2, 0, 0, 0)

934 
	$UOP
(
sub
, 
DAUX
, 
DAUX2
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

935 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

936 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

937 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

938 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

939 
	$X86_INST
(
ªpz_sˇsb
)

940 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

941 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

942 
	$UOP
(
sub
, 
DAUX
, 
DEAX
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

943 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

944 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

945 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

946 
	$X86_INST
(
ªpz_sˇsd
)

947 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

948 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

949 
	$UOP
(
sub
, 
DAUX
, 
DEAX
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

950 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

951 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

952 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

953 
	$X86_INST
(
ª≤z_cmpsb
)

954 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

955 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

956 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

957 
	$UOP
(
lﬂd
, 
DAUX2
, 0, 0, DAUX2, 0, 0, 0)

958 
	$UOP
(
sub
, 
DAUX
, 
DAUX2
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

959 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

960 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

961 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

962 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

963 
	$X86_INST
(
ª≤z_cmpsd
)

964 
	$UOP
(
efÁddr
, 
DESI
, 0, 0, 
DAUX
, 0, 0, 0)

965 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

966 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX2
, 0, 0, 0)

967 
	$UOP
(
lﬂd
, 
DAUX2
, 0, 0, DAUX2, 0, 0, 0)

968 
	$UOP
(
sub
, 
DAUX
, 
DAUX2
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

969 
	$UOP
(
add
, 
DESI
, 
DDF
, 0, DESI, 0, 0, 0)

970 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

971 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

972 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

973 
	$X86_INST
(
ª≤z_sˇsb
)

974 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

975 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

976 
	$UOP
(
sub
, 
DAUX
, 
DEAX
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

977 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

978 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

979 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

980 
	$X86_INST
(
ª≤z_sˇsd
)

981 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

982 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

983 
	$UOP
(
sub
, 
DAUX
, 
DEAX
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

984 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

985 
	$UOP
(
sub
, 
DECX
, 0, 0, DECX, 0, 0, 0)

986 
	$UOP
(
bønch
, 
DECX
, 
DZPS
, 0, 0, 0, 0, 0)

988 
	$X86_INST
(
ªpz_ªt
)

989 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

990 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

991 
	$UOP
(
add
, 
DESP
, 0, 0, DESP, 0, 0, 0)

992 
	$UOP
(
ªt
, 
DAUX
, 0, 0, 0, 0, 0, 0)

993 
	$X86_INST
(
ªt
)

994 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

995 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

996 
	$UOP
(
add
, 
DESP
, 0, 0, DESP, 0, 0, 0)

997 
	$UOP
(
ªt
, 
DAUX
, 0, 0, 0, 0, 0, 0)

998 
	$X86_INST
(
ªt_imm16
)

999 
	$UOP
(
efÁddr
, 
DESP
, 0, 0, 
DAUX
, 0, 0, 0)

1000 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

1001 
	$UOP
(
add
, 
DESP
, 0, 0, DESP, 0, 0, 0)

1002 
	$UOP
(
ªt
, 
DAUX
, 0, 0, 0, 0, 0, 0)

1004 
	$X86_INST
(
rdtsc
)

1005 
	$UOP
(
move
, 0, 0, 0, 
DEAX
, 
DEDX
, 0, 0)

1007 
	$X86_INST
(
ßhf
)

1008 
	$UOP
(
move
, 
DEAX
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1010 
	$X86_INST
(
£è_rm8
)

1011 
	$UOP
(
move
, 
DCF
, 
DZPS
, 0, 
DRM8
, 0, 0, 0)

1012 
	$X86_INST
(
£èe_rm8
)

1013 
	$UOP
(
move
, 
DCF
, 0, 0, 
DRM8
, 0, 0, 0)

1014 
	$X86_INST
(
£tb_rm8
)

1015 
	$UOP
(
move
, 
DCF
, 0, 0, 
DRM8
, 0, 0, 0)

1016 
	$X86_INST
(
£tbe_rm8
)

1017 
	$UOP
(
move
, 
DCF
, 
DZPS
, 0, 
DRM8
, 0, 0, 0)

1018 
	$X86_INST
(
£ã_rm8
)

1019 
	$UOP
(
move
, 
DZPS
, 0, 0, 
DRM8
, 0, 0, 0)

1020 
	$X86_INST
(
£tg_rm8
)

1021 
	$UOP
(
move
, 
DZPS
, 
DOF
, 0, 
DRM8
, 0, 0, 0)

1022 
	$X86_INST
(
£tge_rm8
)

1023 
	$UOP
(
move
, 
DZPS
, 
DOF
, 0, 
DRM8
, 0, 0, 0)

1024 
	$X86_INST
(
£é_rm8
)

1025 
	$UOP
(
move
, 
DZPS
, 
DOF
, 0, 
DRM8
, 0, 0, 0)

1026 
	$X86_INST
(
£ée_rm8
)

1027 
	$UOP
(
move
, 
DZPS
, 
DOF
, 0, 
DRM8
, 0, 0, 0)

1028 
	$X86_INST
(
£äe_rm8
)

1029 
	$UOP
(
move
, 
DZPS
, 0, 0, 
DRM8
, 0, 0, 0)

1030 
	$X86_INST
(
£äo_rm8
)

1031 
	$UOP
(
move
, 
DOF
, 0, 0, 
DRM8
, 0, 0, 0)

1032 
	$X86_INST
(
£äp_rm8
)

1033 
	$UOP
(
move
, 
DZPS
, 0, 0, 
DRM8
, 0, 0, 0)

1034 
	$X86_INST
(
£äs_rm8
)

1035 
	$UOP
(
move
, 
DZPS
, 0, 0, 
DRM8
, 0, 0, 0)

1036 
	$X86_INST
(
£to_rm8
)

1037 
	$UOP
(
move
, 
DOF
, 0, 0, 
DRM8
, 0, 0, 0)

1038 
	$X86_INST
(
£ç_rm8
)

1039 
	$UOP
(
move
, 
DZPS
, 0, 0, 
DRM8
, 0, 0, 0)

1040 
	$X86_INST
(
£ts_rm8
)

1041 
	$UOP
(
move
, 
DZPS
, 0, 0, 
DRM8
, 0, 0, 0)

1043 
	$X86_INST
(
ßr_rm8_1
)

1044 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1045 
	$X86_INST
(
ßr_rm8_˛
)

1046 
	$UOP
(
shi·
, 
DRM8
, 
DECX
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1047 
	$X86_INST
(
ßr_rm8_imm8
)

1048 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1049 
	$X86_INST
(
ßr_rm16_1
)

1050 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1051 
	$X86_INST
(
ßr_rm16_˛
)

1052 
	$UOP
(
shi·
, 
DRM16
, 
DECX
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1053 
	$X86_INST
(
ßr_rm16_imm8
)

1054 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1055 
	$X86_INST
(
ßr_rm32_1
)

1056 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1057 
	$X86_INST
(
ßr_rm32_˛
)

1058 
	$UOP
(
shi·
, 
DRM32
, 
DECX
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1059 
	$X86_INST
(
ßr_rm32_imm8
)

1060 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1061 
	$X86_INST
(
shl_rm8_1
)

1062 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1063 
	$X86_INST
(
shl_rm8_˛
)

1064 
	$UOP
(
shi·
, 
DRM8
, 
DECX
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1065 
	$X86_INST
(
shl_rm8_imm8
)

1066 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1067 
	$X86_INST
(
shl_rm16_1
)

1068 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1069 
	$X86_INST
(
shl_rm16_˛
)

1070 
	$UOP
(
shi·
, 
DRM16
, 
DECX
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1071 
	$X86_INST
(
shl_rm16_imm8
)

1072 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1073 
	$X86_INST
(
shl_rm32_1
)

1074 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1075 
	$X86_INST
(
shl_rm32_˛
)

1076 
	$UOP
(
shi·
, 
DRM32
, 
DECX
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1077 
	$X86_INST
(
shl_rm32_imm8
)

1078 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1079 
	$X86_INST
(
shr_rm8_1
)

1080 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1081 
	$X86_INST
(
shr_rm8_˛
)

1082 
	$UOP
(
shi·
, 
DRM8
, 
DECX
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1083 
	$X86_INST
(
shr_rm8_imm8
)

1084 
	$UOP
(
shi·
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1085 
	$X86_INST
(
shr_rm16_1
)

1086 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1087 
	$X86_INST
(
shr_rm16_˛
)

1088 
	$UOP
(
shi·
, 
DRM16
, 
DECX
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1089 
	$X86_INST
(
shr_rm16_imm8
)

1090 
	$UOP
(
shi·
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1091 
	$X86_INST
(
shr_rm32_1
)

1092 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1093 
	$X86_INST
(
shr_rm32_˛
)

1094 
	$UOP
(
shi·
, 
DRM32
, 
DECX
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1095 
	$X86_INST
(
shr_rm32_imm8
)

1096 
	$UOP
(
shi·
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1098 
	$X86_INST
(
sbb_Æ_imm8
)

1099 
	$UOP
(
sub
, 
DEAX
, 
DCF
, 0, DEAX, 
DZPS
, DCF, 
DOF
)

1100 
	$X86_INST
(
sbb_ax_imm16
)

1101 
	$UOP
(
sub
, 
DEAX
, 
DCF
, 0, DEAX, 
DZPS
, DCF, 
DOF
)

1102 
	$X86_INST
(
sbb_óx_imm32
)

1103 
	$UOP
(
sub
, 
DEAX
, 
DCF
, 0, DEAX, 
DZPS
, DCF, 
DOF
)

1104 
	$X86_INST
(
sbb_rm8_imm8
)

1105 
	$UOP
(
sub
, 
DRM8
, 
DCF
, 0, DRM8, 
DZPS
, DCF, 
DOF
)

1106 
	$X86_INST
(
sbb_rm16_imm16
)

1107 
	$UOP
(
sub
, 
DRM16
, 
DCF
, 0, DRM16, 
DZPS
, DCF, 
DOF
)

1108 
	$X86_INST
(
sbb_rm32_imm32
)

1109 
	$UOP
(
sub
, 
DRM32
, 
DCF
, 0, DRM32, 
DZPS
, DCF, 
DOF
)

1110 
	$X86_INST
(
sbb_rm16_imm8
)

1111 
	$UOP
(
sub
, 
DRM16
, 
DCF
, 0, DRM16, 
DZPS
, DCF, 
DOF
)

1112 
	$X86_INST
(
sbb_rm32_imm8
)

1113 
	$UOP
(
sub
, 
DRM32
, 
DCF
, 0, DRM32, 
DZPS
, DCF, 
DOF
)

1114 
	$X86_INST
(
sbb_rm8_r8
)

1115 
	$UOP
(
sub
, 
DRM8
, 
DR8
, 
DCF
, DRM8, 
DZPS
, DCF, 
DOF
)

1116 
	$X86_INST
(
sbb_rm16_r16
)

1117 
	$UOP
(
sub
, 
DRM16
, 
DR16
, 
DCF
, DRM16, 
DZPS
, DCF, 
DOF
)

1118 
	$X86_INST
(
sbb_rm32_r32
)

1119 
	$UOP
(
sub
, 
DRM32
, 
DR32
, 
DCF
, DRM32, 
DZPS
, DCF, 
DOF
)

1120 
	$X86_INST
(
sbb_r8_rm8
)

1121 
	$UOP
(
sub
, 
DR8
, 
DRM8
, 
DCF
, DR8, 
DZPS
, DCF, 
DOF
)

1122 
	$X86_INST
(
sbb_r16_rm16
)

1123 
	$UOP
(
sub
, 
DR16
, 
DRM16
, 
DCF
, DR16, 
DZPS
, DCF, 
DOF
)

1124 
	$X86_INST
(
sbb_r32_rm32
)

1125 
	$UOP
(
sub
, 
DR32
, 
DRM32
, 
DCF
, DR32, 
DZPS
, DCF, 
DOF
)

1127 
	$X86_INST
(
sˇsb
)

1128 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

1129 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

1130 
	$UOP
(
sub
, 
DAUX
, 
DEAX
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1131 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

1132 
	$X86_INST
(
sˇsd
)

1133 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

1134 
	$UOP
(
lﬂd
, 
DAUX
, 0, 0, DAUX, 0, 0, 0)

1135 
	$UOP
(
sub
, 
DAUX
, 
DEAX
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1136 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

1138 
	$X86_INST
(
shld_rm32_r32_imm8
)

1139 
	$UOP
(
shi·
, 
DRM32
, 
DR32
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1140 
	$X86_INST
(
shld_rm32_r32_˛
)

1141 
	$UOP
(
shi·
, 
DRM32
, 
DR32
, 
DECX
, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1143 
	$X86_INST
(
shrd_rm32_r32_imm8
)

1144 
	$UOP
(
shi·
, 
DRM32
, 
DR32
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1145 
	$X86_INST
(
shrd_rm32_r32_˛
)

1146 
	$UOP
(
shi·
, 
DRM32
, 
DR32
, 
DECX
, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1148 
	$X86_INST
(
°d
)

1149 
	$UOP
(
move
, 0, 0, 0, 0, 
DDF
, 0, 0)

1151 
	$X86_INST
(
°osb
)

1152 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

1153 
	$UOP
(
°‹e
, 
DAUX
, 
DEAX
, 0, 0, 0, 0, 0)

1154 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

1155 
	$X86_INST
(
°osd
)

1156 
	$UOP
(
efÁddr
, 
DEDI
, 0, 0, 
DAUX
, 0, 0, 0)

1157 
	$UOP
(
°‹e
, 
DAUX
, 
DEAX
, 0, 0, 0, 0, 0)

1158 
	$UOP
(
add
, 
DEDI
, 
DDF
, 0, DEDI, 0, 0, 0)

1160 
	$X86_INST
(
sub_Æ_imm8
)

1161 
	$UOP
(
sub
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

1162 
	$X86_INST
(
sub_ax_imm16
)

1163 
	$UOP
(
sub
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

1164 
	$X86_INST
(
sub_óx_imm32
)

1165 
	$UOP
(
sub
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

1166 
	$X86_INST
(
sub_rm8_imm8
)

1167 
	$UOP
(
sub
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1168 
	$X86_INST
(
sub_rm16_imm16
)

1169 
	$UOP
(
sub
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1170 
	$X86_INST
(
sub_rm32_imm32
)

1171 
	$UOP
(
sub
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1172 
	$X86_INST
(
sub_rm16_imm8
)

1173 
	$UOP
(
sub
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1174 
	$X86_INST
(
sub_rm32_imm8
)

1175 
	$UOP
(
sub
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1176 
	$X86_INST
(
sub_rm8_r8
)

1177 
	$UOP
(
sub
, 
DRM8
, 
DR8
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1178 
	$X86_INST
(
sub_rm16_r16
)

1179 
	$UOP
(
sub
, 
DRM16
, 
DR16
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1180 
	$X86_INST
(
sub_rm32_r32
)

1181 
	$UOP
(
sub
, 
DRM32
, 
DR32
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1182 
	$X86_INST
(
sub_r8_rm8
)

1183 
	$UOP
(
sub
, 
DR8
, 
DRM8
, 0, DR8, 
DZPS
, 
DCF
, 
DOF
)

1184 
	$X86_INST
(
sub_r16_rm16
)

1185 
	$UOP
(
sub
, 
DR16
, 
DRM16
, 0, DR16, 
DZPS
, 
DCF
, 
DOF
)

1186 
	$X86_INST
(
sub_r32_rm32
)

1187 
	$UOP
(
sub
, 
DR32
, 
DRM32
, 0, DR32, 
DZPS
, 
DCF
, 
DOF
)

1189 
	$X86_INST
(
ã°_Æ_imm8
)

1190 
	$UOP
(
™d
, 
DEAX
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1191 
	$X86_INST
(
ã°_ax_imm16
)

1192 
	$UOP
(
™d
, 
DEAX
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1193 
	$X86_INST
(
ã°_óx_imm32
)

1194 
	$UOP
(
™d
, 
DEAX
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1195 
	$X86_INST
(
ã°_rm8_imm8
)

1196 
	$UOP
(
™d
, 
DRM8
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1197 
	$X86_INST
(
ã°_rm16_imm16
)

1198 
	$UOP
(
™d
, 
DRM16
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1199 
	$X86_INST
(
ã°_rm32_imm32
)

1200 
	$UOP
(
™d
, 
DRM32
, 0, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1201 
	$X86_INST
(
ã°_rm8_r8
)

1202 
	$UOP
(
™d
, 
DRM8
, 
DR8
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1203 
	$X86_INST
(
ã°_rm16_r16
)

1204 
	$UOP
(
™d
, 
DRM16
, 
DR16
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1205 
	$X86_INST
(
ã°_rm32_r32
)

1206 
	$UOP
(
™d
, 
DRM32
, 
DR32
, 0, 0, 
DZPS
, 
DCF
, 
DOF
)

1208 
	$X86_INST
(
xadd_rm8_r8
)

1209 
	$UOP
(
add
, 
DRM8
, 
DR8
, 0, 
DAUX
, 
DZPS
, 
DCF
, 
DOF
)

1210 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DRM8
, 0, 0, 0)

1211 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DR8
, 0, 0, 0)

1212 
	$X86_INST
(
xadd_rm32_r32
)

1213 
	$UOP
(
add
, 
DRM32
, 
DR32
, 0, 
DAUX
, 
DZPS
, 
DCF
, 
DOF
)

1214 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DRM32
, 0, 0, 0)

1215 
	$UOP
(
move
, 
DAUX
, 0, 0, 
DR32
, 0, 0, 0)

1217 
	$X86_INST
(
x‹_Æ_imm8
)

1218 
	$UOP
(
x‹
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

1219 
	$X86_INST
(
x‹_ax_imm16
)

1220 
	$UOP
(
x‹
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

1221 
	$X86_INST
(
x‹_óx_imm32
)

1222 
	$UOP
(
x‹
, 
DEAX
, 0, 0, DEAX, 
DZPS
, 
DCF
, 
DOF
)

1223 
	$X86_INST
(
x‹_rm8_imm8
)

1224 
	$UOP
(
x‹
, 
DRM8
, 0, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1225 
	$X86_INST
(
x‹_rm16_imm16
)

1226 
	$UOP
(
x‹
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1227 
	$X86_INST
(
x‹_rm32_imm32
)

1228 
	$UOP
(
x‹
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1229 
	$X86_INST
(
x‹_rm16_imm8
)

1230 
	$UOP
(
x‹
, 
DRM16
, 0, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1231 
	$X86_INST
(
x‹_rm32_imm8
)

1232 
	$UOP
(
x‹
, 
DRM32
, 0, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1233 
	$X86_INST
(
x‹_rm8_r8
)

1234 
	$UOP
(
x‹
, 
DRM8
, 
DR8
, 0, DRM8, 
DZPS
, 
DCF
, 
DOF
)

1235 
	$X86_INST
(
x‹_rm16_r16
)

1236 
	$UOP
(
x‹
, 
DRM16
, 
DR16
, 0, DRM16, 
DZPS
, 
DCF
, 
DOF
)

1237 
	$X86_INST
(
x‹_rm32_r32
)

1238 
	$UOP
(
x‹
, 
DRM32
, 
DR32
, 0, DRM32, 
DZPS
, 
DCF
, 
DOF
)

1239 
	$X86_INST
(
x‹_r8_rm8
)

1240 
	$UOP
(
x‹
, 
DR8
, 
DRM8
, 0, DR8, 
DZPS
, 
DCF
, 
DOF
)

1241 
	$X86_INST
(
x‹_r16_rm16
)

1242 
	$UOP
(
x‹
, 
DR16
, 
DRM16
, 0, DR16, 
DZPS
, 
DCF
, 
DOF
)

1243 
	$X86_INST
(
x‹_r32_rm32
)

1244 
	$UOP
(
x‹
, 
DR32
, 
DRM32
, 0, DR32, 
DZPS
, 
DCF
, 
DOF
)

1246 
	$X86_INST
(
xchg_ú16_ax
)

1247 
	$UOP
(
move
, 
DIR16
, 
DEAX
, 0, DIR16, DEAX, 0, 0)

1248 
	$X86_INST
(
xchg_ú32_óx
)

1249 
	$UOP
(
move
, 
DIR32
, 
DEAX
, 0, DIR32, DEAX, 0, 0)

1250 
	$X86_INST
(
xchg_rm8_r8
)

1251 
	$UOP
(
move
, 
DRM8
, 
DR8
, 0, DRM8, DR8, 0, 0)

1252 
	$X86_INST
(
xchg_rm16_r16
)

1253 
	$UOP
(
move
, 
DRM16
, 
DR16
, 0, DRM16, DR16, 0, 0)

1254 
	$X86_INST
(
xchg_rm32_r32
)

1255 
	`UOP
(
move
, 
DRM32
, 
DR32
, 0, DRM32, DR32, 0, 0)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
38
529
bpred.c
commit.c
decode.c
dispatch.c
fetch.c
fu.c
guestos.c
issue.c
m2s-fast.c
m2s-objdump.c
m2s.c
m2s.h
processor.c
queues.c
recover.c
rf.c
rob.c
sched.c
tcache.c
uop.c
writeback.c
/usr/include/limits.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/string.h
/usr/include/time.h
uop1.dat
uop2.dat
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
